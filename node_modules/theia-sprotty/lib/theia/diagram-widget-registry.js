"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License") you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var widgets_1 = require("@phosphor/widgets");
var DiagramWidgetRegistry = /** @class */ (function () {
    function DiagramWidgetRegistry() {
        this.idSequence = 0;
        this.widgets = new Map();
        this.widgetsById = new Map();
        this.onWidgetsChangedEmitter = new common_1.Emitter();
    }
    DiagramWidgetRegistry.prototype.onWidgetsChanged = function () {
        return this.onWidgetsChangedEmitter.event;
    };
    DiagramWidgetRegistry.prototype.getWidgetCount = function () {
        return this.widgets.size;
    };
    DiagramWidgetRegistry.prototype.getOpenedWidgets = function () {
        return Array.from(this.widgets.values()).filter(function (widget) { return widget instanceof widgets_1.Widget; });
    };
    DiagramWidgetRegistry.prototype.getWidget = function (uri, diagramType) {
        var widget = this.widgets.get(this.getKey(uri, diagramType));
        if (widget)
            return Promise.resolve(widget || undefined);
        else
            return Promise.resolve(undefined);
    };
    DiagramWidgetRegistry.prototype.getWidgetById = function (widgetId) {
        return this.widgetsById.get(widgetId);
    };
    DiagramWidgetRegistry.prototype.addWidget = function (uri, diagramType, widget) {
        this.widgets.set(this.getKey(uri, diagramType), widget);
        this.widgetsById.set(widget.id, widget);
        this.onWidgetsChangedEmitter.fire(undefined);
    };
    DiagramWidgetRegistry.prototype.removeWidget = function (uri, diagramType) {
        if (this.widgets.delete(this.getKey(uri, diagramType))) {
            this.onWidgetsChangedEmitter.fire(undefined);
        }
    };
    DiagramWidgetRegistry.prototype.getKey = function (uri, diagramType) {
        return uri.toString(true) + '#' + diagramType;
    };
    DiagramWidgetRegistry.prototype.nextId = function () {
        return "widget-" + this.idSequence++;
    };
    DiagramWidgetRegistry = __decorate([
        inversify_1.injectable()
    ], DiagramWidgetRegistry);
    return DiagramWidgetRegistry;
}());
exports.DiagramWidgetRegistry = DiagramWidgetRegistry;
//# sourceMappingURL=diagram-widget-registry.js.map