"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License") you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var diagram_commands_1 = require("./diagram-commands");
var diagram_widget_1 = require("./diagram-widget");
var inversify_1 = require("inversify");
var frontend_application_1 = require("@theia/core/lib/browser/frontend-application");
var browser_1 = require("@theia/core/lib/browser");
var DiagramKeybindingContext = /** @class */ (function () {
    function DiagramKeybindingContext(application) {
        this.application = application;
        this.id = 'diagram.keybinding.context';
    }
    DiagramKeybindingContext.prototype.isEnabled = function (arg) {
        return this.application.shell.currentWidget instanceof diagram_widget_1.DiagramWidget;
    };
    DiagramKeybindingContext = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(frontend_application_1.FrontendApplication)),
        __metadata("design:paramtypes", [frontend_application_1.FrontendApplication])
    ], DiagramKeybindingContext);
    return DiagramKeybindingContext;
}());
exports.DiagramKeybindingContext = DiagramKeybindingContext;
var DiagramKeybindingContribution = /** @class */ (function () {
    function DiagramKeybindingContribution(diagramKeybindingContext) {
        this.diagramKeybindingContext = diagramKeybindingContext;
    }
    DiagramKeybindingContribution.prototype.registerKeybindings = function (registry) {
        [
            {
                command: diagram_commands_1.DiagramCommands.CENTER,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+c'
            },
            {
                command: diagram_commands_1.DiagramCommands.FIT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+f'
            },
            {
                command: diagram_commands_1.DiagramCommands.EXPORT,
                context: this.diagramKeybindingContext.id,
                keybinding: 'alt+e'
            },
            {
                command: diagram_commands_1.DiagramCommands.SELECT_ALL,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+a'
            },
            {
                command: browser_1.CommonCommands.UNDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+z'
            },
            {
                command: browser_1.CommonCommands.REDO.id,
                context: this.diagramKeybindingContext.id,
                keybinding: 'ctrlcmd+shift+z'
            }
        ].forEach(function (binding) {
            registry.registerKeybinding(binding);
        });
    };
    DiagramKeybindingContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(DiagramKeybindingContext)),
        __metadata("design:paramtypes", [DiagramKeybindingContext])
    ], DiagramKeybindingContribution);
    return DiagramKeybindingContribution;
}());
exports.DiagramKeybindingContribution = DiagramKeybindingContribution;
//# sourceMappingURL=diagram-keybinding.js.map