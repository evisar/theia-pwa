define(["require", "exports", "vscode-languageserver-protocol/lib/main", "vscode-languageserver-protocol/lib/utils/is"], function (require, exports, main_1, Is) {
    /* --------------------------------------------------------------------------------------------
     * Copyright (c) 2018 TypeFox GmbH (http://www.typefox.io). All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     * ------------------------------------------------------------------------------------------ */
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    function createConnection(connection, errorHandler, closeHandler) {
        connection.onError(function (data) { errorHandler(data[0], data[1], data[2]); });
        connection.onClose(closeHandler);
        return {
            listen: function () { return connection.listen(); },
            sendRequest: function (type) {
                var params = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    params[_i - 1] = arguments[_i];
                }
                return connection.sendRequest.apply(connection, [Is.string(type) ? type : type.method].concat(params));
            },
            onRequest: function (type, handler) { return connection.onRequest(Is.string(type) ? type : type.method, handler); },
            sendNotification: function (type, params) { return connection.sendNotification(Is.string(type) ? type : type.method, params); },
            onNotification: function (type, handler) { return connection.onNotification(Is.string(type) ? type : type.method, handler); },
            trace: function (value, tracer, sendNotification) {
                if (sendNotification === void 0) { sendNotification = false; }
                return connection.trace(value, tracer, sendNotification);
            },
            initialize: function (params) { return connection.sendRequest(main_1.InitializeRequest.type, params); },
            shutdown: function () { return connection.sendRequest(main_1.ShutdownRequest.type, undefined); },
            exit: function () { return connection.sendNotification(main_1.ExitNotification.type); },
            onLogMessage: function (handler) { return connection.onNotification(main_1.LogMessageNotification.type, handler); },
            onShowMessage: function (handler) { return connection.onNotification(main_1.ShowMessageNotification.type, handler); },
            onTelemetry: function (handler) { return connection.onNotification(main_1.TelemetryEventNotification.type, handler); },
            didChangeConfiguration: function (params) { return connection.sendNotification(main_1.DidChangeConfigurationNotification.type, params); },
            didChangeWatchedFiles: function (params) { return connection.sendNotification(main_1.DidChangeWatchedFilesNotification.type, params); },
            didOpenTextDocument: function (params) { return connection.sendNotification(main_1.DidOpenTextDocumentNotification.type, params); },
            didChangeTextDocument: function (params) { return connection.sendNotification(main_1.DidChangeTextDocumentNotification.type, params); },
            didCloseTextDocument: function (params) { return connection.sendNotification(main_1.DidCloseTextDocumentNotification.type, params); },
            didSaveTextDocument: function (params) { return connection.sendNotification(main_1.DidSaveTextDocumentNotification.type, params); },
            onDiagnostics: function (handler) { return connection.onNotification(main_1.PublishDiagnosticsNotification.type, handler); },
            dispose: function () { return connection.dispose(); }
        };
    }
    exports.createConnection = createConnection;
});
//# sourceMappingURL=connection.js.map