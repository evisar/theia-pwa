var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "vscode-base-languageclient/lib/client", "vscode-base-languageclient/lib/typeDefinition", "vscode-base-languageclient/lib/implementation", "vscode-base-languageclient/lib/colorProvider", "vscode-base-languageclient/lib/workspaceFolders", "vscode-base-languageclient/lib/foldingRange", "vscode-base-languageclient/lib/client"], function (require, exports, client_1, typeDefinition_1, implementation_1, colorProvider_1, workspaceFolders_1, foldingRange_1, client_2) {
    "use strict";
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(client_2);
    var MonacoLanguageClient = /** @class */ (function (_super) {
        __extends(MonacoLanguageClient, _super);
        function MonacoLanguageClient(_a) {
            var id = _a.id, name = _a.name, clientOptions = _a.clientOptions, connectionProvider = _a.connectionProvider;
            var _this = _super.call(this, id || name.toLowerCase(), name, clientOptions) || this;
            _this.connectionProvider = connectionProvider;
            _this.createConnection = _this.doCreateConnection.bind(_this);
            // bypass LSP <=> VS Code conversion
            var self = _this;
            self._p2c = new Proxy(self._p2c, {
                get: function (target, prop) {
                    if (prop === 'asUri') {
                        return target[prop];
                    }
                    return MonacoLanguageClient.bypassConversion;
                }
            });
            self._c2p = new Proxy(self._c2p, {
                get: function (target, prop) {
                    if (prop === 'asUri') {
                        return target[prop];
                    }
                    if (prop === 'asCompletionParams') {
                        return function (textDocument, position, context) {
                            return {
                                textDocument: target.asTextDocumentIdentifier(textDocument),
                                position: position,
                                context: context
                            };
                        };
                    }
                    if (prop === 'asWillSaveTextDocumentParams') {
                        return function (event) {
                            return {
                                textDocument: target.asTextDocumentIdentifier(event.document),
                                reason: event.reason
                            };
                        };
                    }
                    if (prop.endsWith('Params')) {
                        return target[prop];
                    }
                    return MonacoLanguageClient.bypassConversion;
                }
            });
            return _this;
        }
        MonacoLanguageClient.prototype.doCreateConnection = function () {
            var errorHandler = this.handleConnectionError.bind(this);
            var closeHandler = this.handleConnectionClosed.bind(this);
            return this.connectionProvider.get(errorHandler, closeHandler, this.outputChannel);
        };
        MonacoLanguageClient.prototype.createMessageTransports = function (encoding) {
            throw new Error('Unsupported');
        };
        MonacoLanguageClient.prototype.registerBuiltinFeatures = function () {
            _super.prototype.registerBuiltinFeatures.call(this);
            this.registerFeature(new typeDefinition_1.TypeDefinitionFeature(this));
            this.registerFeature(new implementation_1.ImplementationFeature(this));
            this.registerFeature(new colorProvider_1.ColorProviderFeature(this));
            this.registerFeature(new workspaceFolders_1.WorkspaceFoldersFeature(this));
            var foldingRangeFeature = new foldingRange_1.FoldingRangeFeature(this);
            foldingRangeFeature['asFoldingRanges'] = MonacoLanguageClient.bypassConversion;
            this.registerFeature(foldingRangeFeature);
        };
        MonacoLanguageClient.bypassConversion = function (result) { return result || undefined; };
        return MonacoLanguageClient;
    }(client_1.BaseLanguageClient));
    exports.MonacoLanguageClient = MonacoLanguageClient;
});
//# sourceMappingURL=monaco-language-client.js.map