/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UUID = require("./utils/uuid");
var Is = require("./utils/is");
var vscode_1 = require("vscode");
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var client_1 = require("./client");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
var ColorProviderFeature = /** @class */ (function (_super) {
    __extends(ColorProviderFeature, _super);
    function ColorProviderFeature(client) {
        return _super.call(this, client, vscode_languageserver_protocol_1.DocumentColorRequest.type) || this;
    }
    ColorProviderFeature.prototype.fillClientCapabilities = function (capabilites) {
        ensure(ensure(capabilites, 'textDocument'), 'colorProvider').dynamicRegistration = true;
    };
    ColorProviderFeature.prototype.initialize = function (capabilities, documentSelector) {
        if (!capabilities.colorProvider) {
            return;
        }
        var implCapabilities = capabilities.colorProvider;
        var id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();
        var selector = implCapabilities.documentSelector || documentSelector;
        if (selector) {
            this.register(this.messages, {
                id: id,
                registerOptions: Object.assign({}, { documentSelector: selector })
            });
        }
    };
    ColorProviderFeature.prototype.registerLanguageProvider = function (options) {
        var _this = this;
        var client = this._client;
        var provideColorPresentations = function (color, context, token) {
            var requestParams = {
                color: color,
                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(context.document),
                range: client.code2ProtocolConverter.asRange(context.range)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, requestParams, token).then(_this.asColorPresentations.bind(_this), function (error) {
                client.logFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, error);
                return Promise.resolve(null);
            });
        };
        var provideDocumentColors = function (document, token) {
            var requestParams = {
                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document)
            };
            return client.sendRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, requestParams, token).then(_this.asColorInformations.bind(_this), function (error) {
                client.logFailedRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, error);
                return Promise.resolve(null);
            });
        };
        var middleware = client.clientOptions.middleware;
        return vscode_1.languages.registerColorProvider(options.documentSelector, {
            provideColorPresentations: function (color, context, token) {
                return middleware.provideColorPresentations
                    ? middleware.provideColorPresentations(color, context, token, provideColorPresentations)
                    : provideColorPresentations(color, context, token);
            },
            provideDocumentColors: function (document, token) {
                return middleware.provideDocumentColors
                    ? middleware.provideDocumentColors(document, token, provideDocumentColors)
                    : provideDocumentColors(document, token);
            }
        });
    };
    ColorProviderFeature.prototype.asColor = function (color) {
        return new vscode_1.Color(color.red, color.green, color.blue, color.alpha);
    };
    ColorProviderFeature.prototype.asColorInformations = function (colorInformation) {
        var _this = this;
        if (Array.isArray(colorInformation)) {
            return colorInformation.map(function (ci) {
                return new vscode_1.ColorInformation(_this._client.protocol2CodeConverter.asRange(ci.range), _this.asColor(ci.color));
            });
        }
        return [];
    };
    ColorProviderFeature.prototype.asColorPresentations = function (colorPresentations) {
        var _this = this;
        if (Array.isArray(colorPresentations)) {
            return colorPresentations.map(function (cp) {
                var presentation = new vscode_1.ColorPresentation(cp.label);
                presentation.additionalTextEdits = _this._client.protocol2CodeConverter.asTextEdits(cp.additionalTextEdits);
                presentation.textEdit = _this._client.protocol2CodeConverter.asTextEdit(cp.textEdit);
                return presentation;
            });
        }
        return [];
    };
    return ColorProviderFeature;
}(client_1.TextDocumentFeature));
exports.ColorProviderFeature = ColorProviderFeature;
