/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vscode_1 = require("vscode");
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var ConfigurationFeature = /** @class */ (function () {
    function ConfigurationFeature(_client) {
        this._client = _client;
    }
    ConfigurationFeature.prototype.fillClientCapabilities = function (capabilities) {
        capabilities.workspace = capabilities.workspace || {};
        capabilities.workspace.configuration = true;
    };
    ConfigurationFeature.prototype.initialize = function () {
        var _this = this;
        var client = this._client;
        client.onRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, function (params, token) {
            var configuration = function (params) {
                var e_1, _a;
                var result = [];
                try {
                    for (var _b = __values(params.items), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var item = _c.value;
                        var resource = item.scopeUri !== void 0 && item.scopeUri !== null ? _this._client.protocol2CodeConverter.asUri(item.scopeUri) : undefined;
                        result.push(_this.getConfiguration(resource, item.section !== null ? item.section : undefined));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return result;
            };
            var middleware = client.clientOptions.middleware.workspace;
            return middleware && middleware.configuration
                ? middleware.configuration(params, token, configuration)
                : configuration(params, token);
        });
    };
    ConfigurationFeature.prototype.getConfiguration = function (resource, section) {
        var e_2, _a;
        var result = null;
        if (section) {
            var index = section.lastIndexOf('.');
            if (index === -1) {
                result = vscode_1.workspace.getConfiguration(undefined, resource).get(section);
            }
            else {
                var config = vscode_1.workspace.getConfiguration(section.substr(0, index));
                if (config) {
                    result = config.get(section.substr(index + 1));
                }
            }
        }
        else {
            var config = vscode_1.workspace.getConfiguration(undefined, resource);
            result = {};
            try {
                for (var _b = __values(Object.keys(config)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    if (config.has(key)) {
                        result[key] = config.get(key);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (!result) {
            return null;
        }
        return result;
    };
    return ConfigurationFeature;
}());
exports.ConfigurationFeature = ConfigurationFeature;
