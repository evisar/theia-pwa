/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UUID = require("./utils/uuid");
var Is = require("./utils/is");
var vscode_1 = require("vscode");
var vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
var client_1 = require("./client");
function ensure(target, key) {
    if (target[key] === void 0) {
        target[key] = {};
    }
    return target[key];
}
var TypeDefinitionFeature = /** @class */ (function (_super) {
    __extends(TypeDefinitionFeature, _super);
    function TypeDefinitionFeature(client) {
        return _super.call(this, client, vscode_languageserver_protocol_1.TypeDefinitionRequest.type) || this;
    }
    TypeDefinitionFeature.prototype.fillClientCapabilities = function (capabilites) {
        ensure(ensure(capabilites, 'textDocument'), 'typeDefinition').dynamicRegistration = true;
    };
    TypeDefinitionFeature.prototype.initialize = function (capabilities, documentSelector) {
        if (!capabilities.typeDefinitionProvider) {
            return;
        }
        if (capabilities.typeDefinitionProvider === true) {
            if (!documentSelector) {
                return;
            }
            this.register(this.messages, {
                id: UUID.generateUuid(),
                registerOptions: Object.assign({}, { documentSelector: documentSelector })
            });
        }
        else {
            var implCapabilities = capabilities.typeDefinitionProvider;
            var id = Is.string(implCapabilities.id) && implCapabilities.id.length > 0 ? implCapabilities.id : UUID.generateUuid();
            var selector = implCapabilities.documentSelector || documentSelector;
            if (selector) {
                this.register(this.messages, {
                    id: id,
                    registerOptions: Object.assign({}, { documentSelector: selector })
                });
            }
        }
    };
    TypeDefinitionFeature.prototype.registerLanguageProvider = function (options) {
        var client = this._client;
        var provideTypeDefinition = function (document, position, token) {
            return client.sendRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, client.code2ProtocolConverter.asTextDocumentPositionParams(document, position), token).then(client.protocol2CodeConverter.asDefinitionResult, function (error) {
                client.logFailedRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, error);
                return Promise.resolve(null);
            });
        };
        var middleware = client.clientOptions.middleware;
        return vscode_1.languages.registerTypeDefinitionProvider(options.documentSelector, {
            provideTypeDefinition: function (document, position, token) {
                return middleware.provideTypeDefinition
                    ? middleware.provideTypeDefinition(document, position, token, provideTypeDefinition)
                    : provideTypeDefinition(document, position, token);
            }
        });
    };
    return TypeDefinitionFeature;
}(client_1.TextDocumentFeature));
exports.TypeDefinitionFeature = TypeDefinitionFeature;
