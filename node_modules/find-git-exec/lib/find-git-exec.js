"use strict";
/*
 * Copyright (c) 2017 TypeFox. Licensed under the MIT License.
 * See the LICENSE file in the project root for license information.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var cp = require("child_process");
/**
 * Resolves to the path of the locally available Git executable. Will be rejected if Git cannot be found on the system.
 */
function default_1() {
    switch (process.platform) {
        case 'win32': return findGitWin32();
        default: return findGitNix();
    }
}
exports.default = default_1;
function findGit(path) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _c, error_1;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                _d.trys.push([0, 3, , 4]);
                                _a = resolve;
                                _b = {
                                    path: path
                                };
                                _c = parseVersion;
                                return [4 /*yield*/, exec(path, '--version')];
                            case 1:
                                _b.version = _c.apply(void 0, [_d.sent()]);
                                return [4 /*yield*/, exec(path, '--exec-path')];
                            case 2:
                                _a.apply(void 0, [(_b.execPath = _d.sent(),
                                        _b)]);
                                return [3 /*break*/, 4];
                            case 3:
                                error_1 = _d.sent();
                                reject(error_1);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
function exec(path, command) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var buffers = [];
                    var child = cp.spawn(path, Array.isArray(command) ? command : [command]);
                    child.stdout.on('data', function (b) { return buffers.push(b); });
                    child.on('error', reject);
                    child.on('exit', function (code) { return code ? reject(new Error("Git not found under '" + path + "'.")) : resolve(toUtf8String(buffers)); });
                })];
        });
    });
}
function findGitNix() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    cp.exec('which git', function (error, buffer) {
                        if (error) {
                            return reject('Git not found.');
                        }
                        var path = buffer.toString().replace(/^\s+|\s+$/g, '');
                        if (path !== 'usr/bin/git' || process.platform !== 'darwin') {
                            return resolve(findGit(path));
                        }
                        cp.exec('xcode-select -p', function (error) {
                            if (error && error.code === 2) {
                                return reject(new Error('Git not found.'));
                            }
                            resolve(findGit(path));
                        });
                    });
                })];
        });
    });
}
function findSystemGitWin32(base) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!base) {
                throw new Error("Git not found.");
            }
            return [2 /*return*/, findGit(path.join(base, 'Git', 'cmd', 'git.exe'))];
        });
    });
}
function findGitHubGitWin32() {
    return __awaiter(this, void 0, void 0, function () {
        var github;
        return __generator(this, function (_a) {
            github = path.join(env('LOCALAPPDATA'), 'GitHub');
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.readdir(github, function (error, files) {
                        if (error) {
                            return reject(error);
                        }
                        var git = files.filter(function (file) { return /^PortableGit/.test(file); }).shift();
                        if (!git) {
                            return reject(new Error("Git not found."));
                        }
                        resolve(findGit(path.join(github, git, 'cmd', 'git.exe')));
                    });
                })];
        });
    });
}
function findGitWin32() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, findSystemGitWin32(env('ProgramW6432'))
                    .then(undefined, function () { return findSystemGitWin32(env('ProgramFiles(x86)'))
                    .then(undefined, function () { return findSystemGitWin32(env('ProgramFiles'))
                    .then(undefined, function () { return findGit('git'); })
                    .then(undefined, function () { return findGitHubGitWin32(); }); }); })];
        });
    });
}
function toUtf8String(buffers) {
    return Buffer.concat(buffers).toString('utf8').trim();
}
function parseVersion(raw) {
    return raw.replace(/^git version /, '');
}
function env(key) {
    return process.env[key] || '';
}
//# sourceMappingURL=find-git-exec.js.map