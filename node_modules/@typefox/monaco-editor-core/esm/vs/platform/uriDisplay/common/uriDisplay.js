/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Emitter } from '../../../base/common/event';
import { IEnvironmentService } from '../../environment/common/environment';
import { IWorkspaceContextService } from '../../workspace/common/workspace';
import { createDecorator } from '../../instantiation/common/instantiation';
import { isEqual, basenameOrAuthority } from '../../../base/common/resources';
import { isLinux, isWindows } from '../../../base/common/platform';
import { tildify } from '../../../base/common/labels';
import { ltrim } from '../../../base/common/strings';
var URI_DISPLAY_SERVICE_ID = 'uriDisplay';
var sepRegexp = /\//g;
var labelMatchingRegexp = /\$\{scheme\}|\$\{authority\}|\$\{path\}/g;
function hasDriveLetter(path) {
    return isWindows && path && path[2] === ':';
}
var UriDisplayService = /** @class */ (function () {
    function UriDisplayService(environmentService, contextService) {
        this.environmentService = environmentService;
        this.contextService = contextService;
        this.formaters = new Map();
        this._onDidRegisterFormater = new Emitter();
    }
    Object.defineProperty(UriDisplayService.prototype, "onDidRegisterFormater", {
        get: function () {
            return this._onDidRegisterFormater.event;
        },
        enumerable: true,
        configurable: true
    });
    UriDisplayService.prototype.getLabel = function (resource, relative) {
        if (!resource) {
            return undefined;
        }
        var formater = this.formaters.get(resource.scheme);
        if (!formater) {
            return resource.path;
        }
        if (relative) {
            var baseResource = this.contextService && this.contextService.getWorkspaceFolder(resource);
            if (baseResource) {
                var relativeLabel = void 0;
                if (isEqual(baseResource.uri, resource, !isLinux)) {
                    relativeLabel = ''; // no label if resources are identical
                }
                else {
                    var baseResourceLabel = this.formatUri(baseResource.uri, formater);
                    relativeLabel = ltrim(this.formatUri(resource, formater).substring(baseResourceLabel.length), formater.separator);
                }
                var hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;
                if (hasMultipleRoots) {
                    var rootName = (baseResource && baseResource.name) ? baseResource.name : basenameOrAuthority(baseResource.uri);
                    relativeLabel = relativeLabel ? (rootName + ' â€¢ ' + relativeLabel) : rootName; // always show root basename if there are multiple
                }
                return relativeLabel;
            }
        }
        return this.formatUri(resource, formater);
    };
    UriDisplayService.prototype.registerFormater = function (scheme, formater) {
        var _this = this;
        this.formaters.set(scheme, formater);
        this._onDidRegisterFormater.fire({ scheme: scheme, formater: formater });
        return {
            dispose: function () { return _this.formaters.delete(scheme); }
        };
    };
    UriDisplayService.prototype.formatUri = function (resource, formater) {
        var label = formater.label.replace(labelMatchingRegexp, function (match) {
            switch (match) {
                case '${scheme}': return resource.scheme;
                case '${authority}': return resource.authority;
                case '${path}': return resource.path;
                default: return '';
            }
        });
        // convert \c:\something => C:\something
        if (formater.normalizeDriveLetter && hasDriveLetter(label)) {
            label = label.charAt(1).toUpperCase() + label.substr(2);
        }
        if (formater.tildify) {
            label = tildify(label, this.environmentService.userHome);
        }
        return label.replace(sepRegexp, formater.separator);
    };
    UriDisplayService = __decorate([
        __param(0, IEnvironmentService),
        __param(1, IWorkspaceContextService)
    ], UriDisplayService);
    return UriDisplayService;
}());
export { UriDisplayService };
export var IUriDisplayService = createDecorator(URI_DISPLAY_SERVICE_ID);
