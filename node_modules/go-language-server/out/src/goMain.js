/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------*/
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const vscode = require("../src-vscode-mock/vscode");
// export function activate(ctx: vscode.ExtensionContext): void {
// 	/* __GDPR__
// 	   "beta-testing" : {
// 		  "version" : { "classification": "SystemMetaData", "purpose": "FeatureInsight" },
// 		  "data": { "classification": "SystemMetaData", "purpose": "FeatureInsight" }
// 	   }
// 	 */
// 	sendTelemetryEvent('beta-testing', { version: '0.6.74', date: '01/12/2018' });
// 	let useLangServer = vscode.workspace.getConfiguration('go')['useLanguageServer'];
// 	let langServerFlags: string[] = vscode.workspace.getConfiguration('go')['languageServerFlags'] || [];
// 	updateGoPathGoRootFromConfig().then(() => {
// 		const updateToolsCmdText = 'Update tools';
// 		const prevGoroot = ctx.globalState.get('goroot');
// 		const currentGoroot = process.env['GOROOT'];
// 		if (prevGoroot !== currentGoroot && prevGoroot) {
// 			vscode.window.showInformationMessage('Your goroot is different than before, few Go tools may need re-compiling', updateToolsCmdText).then(selected => {
// 				if (selected === updateToolsCmdText) {
// 					vscode.commands.executeCommand('go.tools.install');
// 				}
// 			});
// 		} else {
// 			getGoVersion().then(currentVersion => {
// 				if (currentVersion) {
// 					const prevVersion = ctx.globalState.get('goVersion');
// 					const currVersionString = `${currentVersion.major}.${currentVersion.minor}`;
// 					if (prevVersion !== currVersionString) {
// 						if (prevVersion) {
// 							vscode.window.showInformationMessage('Your Go version is different than before, few Go tools may need re-compiling', updateToolsCmdText).then(selected => {
// 								if (selected === updateToolsCmdText) {
// 									vscode.commands.executeCommand('go.tools.install');
// 								}
// 							});
// 						}
// 						ctx.globalState.update('goVersion', currVersionString);
// 					}
// 				}
// 			});
// 		}
// 		ctx.globalState.update('goroot', currentGoroot);
// 		offerToInstallTools();
// 		let langServerAvailable = checkLanguageServer();
// 		if (langServerAvailable) {
// 			let langServerFlags: string[] = vscode.workspace.getConfiguration('go')['languageServerFlags'] || [];
// 			// Language Server needs GOPATH to be in process.env
// 			process.env['GOPATH'] = getCurrentGoPath();
// 			const c = new LanguageClient(
// 				'go-langserver',
// 				{
// 					command: getBinPath('go-langserver'),
// 					args: ['-mode=stdio', ...langServerFlags],
// 				},
// 				{
// 					documentSelector: ['go'],
// 					uriConverters: {
// 						// Apply file:/// scheme to all file paths.
// 						code2Protocol: (uri: vscode.Uri): string => (uri.scheme ? uri : uri.with({ scheme: 'file' })).toString(),
// 						protocol2Code: (uri: string) => vscode.Uri.parse(uri),
// 					},
// 				}
// 			);
// 			ctx.subscriptions.push(c.start());
// 		} else {
// 			ctx.subscriptions.push(vscode.languages.registerHoverProvider(GO_MODE, new GoHoverProvider()));
// 			ctx.subscriptions.push(vscode.languages.registerDefinitionProvider(GO_MODE, new GoDefinitionProvider()));
// 			ctx.subscriptions.push(vscode.languages.registerReferenceProvider(GO_MODE, new GoReferenceProvider()));
// 			ctx.subscriptions.push(vscode.languages.registerDocumentSymbolProvider(GO_MODE, new GoDocumentSymbolProvider()));
// 			ctx.subscriptions.push(vscode.languages.registerWorkspaceSymbolProvider(new GoWorkspaceSymbolProvider()));
// 			ctx.subscriptions.push(vscode.languages.registerSignatureHelpProvider(GO_MODE, new GoSignatureHelpProvider(), '(', ','));
// 		}
// 		if (vscode.window.activeTextEditor && vscode.window.activeTextEditor.document.languageId === 'go' && isGoPathSet()) {
// 			// preload packages so the cache are ready to use
// 			loadPackages();
// 			runBuilds(vscode.window.activeTextEditor.document, vscode.workspace.getConfiguration('go', vscode.window.activeTextEditor.document.uri));
// 		}
// 	});
// 	initGoCover(ctx);
// 	let testCodeLensProvider = new GoRunTestCodeLensProvider();
// 	let referencesCodeLensProvider = new GoReferencesCodeLensProvider();
// 	ctx.subscriptions.push(vscode.languages.registerCompletionItemProvider(GO_MODE, new GoCompletionItemProvider(), '.', '\"'));
// 	ctx.subscriptions.push(vscode.languages.registerDocumentFormattingEditProvider(GO_MODE, new GoDocumentFormattingEditProvider()));
// 	ctx.subscriptions.push(vscode.languages.registerRenameProvider(GO_MODE, new GoRenameProvider()));
// 	ctx.subscriptions.push(vscode.languages.registerCodeActionsProvider(GO_MODE, new GoCodeActionProvider()));
// 	ctx.subscriptions.push(vscode.languages.registerCodeLensProvider(GO_MODE, testCodeLensProvider));
// 	ctx.subscriptions.push(vscode.languages.registerCodeLensProvider(GO_MODE, referencesCodeLensProvider));
// 	ctx.subscriptions.push(vscode.languages.registerImplementationProvider(GO_MODE, new GoImplementationProvider()));
// 	ctx.subscriptions.push(vscode.debug.registerDebugConfigurationProvider('go', new GoDebugConfigurationProvider()));
exports.errorDiagnosticCollection = vscode.languages.createDiagnosticCollection('go-error');
// ctx.subscriptions.push(errorDiagnosticCollection);
exports.warningDiagnosticCollection = vscode.languages.createDiagnosticCollection('go-warning');
//# sourceMappingURL=goMain.js.map