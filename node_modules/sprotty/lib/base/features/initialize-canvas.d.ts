import { VNode } from "snabbdom/vnode";
import { Bounds } from '../../utils/geometry';
import { Action } from '../actions/action';
import { IActionDispatcher } from '../actions/action-dispatcher';
import { IVNodeDecorator } from "../views/vnode-decorators";
import { SModelElement, SModelRoot } from "../model/smodel";
import { SystemCommand, CommandExecutionContext } from '../commands/command';
/**
 * Grabs the bounds from the root element in page coordinates and fires a
 * InitializeCanvasBoundsAction. This size is needed for other actions such
 * as FitToScreenAction.
 */
export declare class CanvasBoundsInitializer implements IVNodeDecorator {
    protected actionDispatcher: IActionDispatcher;
    protected rootAndVnode: [SModelRoot, VNode] | undefined;
    constructor(actionDispatcher: IActionDispatcher);
    decorate(vnode: VNode, element: SModelElement): VNode;
    postUpdate(): void;
    protected getBoundsInPage(element: Element): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
}
export declare class InitializeCanvasBoundsAction implements Action {
    readonly newCanvasBounds: Bounds;
    readonly kind: string;
    constructor(newCanvasBounds: Bounds);
}
export declare class InitializeCanvasBoundsCommand extends SystemCommand {
    protected action: InitializeCanvasBoundsAction;
    static readonly KIND: string;
    private newCanvasBounds;
    constructor(action: InitializeCanvasBoundsAction);
    execute(context: CommandExecutionContext): SModelRoot;
    undo(context: CommandExecutionContext): SModelRoot;
    redo(context: CommandExecutionContext): SModelRoot;
}
//# sourceMappingURL=initialize-canvas.d.ts.map