import { Action } from "../actions/action";
import { SModelRoot, SModelRootSchema } from "../model/smodel";
import { Command, CommandExecutionContext } from "../commands/command";
/**
 * Sent from the client to the model source (e.g. a DiagramServer) in order to request a model. Usually this
 * is the first message that is sent to the source, so it is also used to initiate the communication.
 * The response is a SetModelAction or an UpdateModelAction.
 */
export declare class RequestModelAction implements Action {
    readonly options?: {
        [key: string]: string;
    } | undefined;
    static readonly KIND: string;
    readonly kind: string;
    constructor(options?: {
        [key: string]: string;
    } | undefined);
}
/**
 * Sent from the model source to the client in order to set the model. If a model is already present, it is replaced.
 */
export declare class SetModelAction implements Action {
    readonly newRoot: SModelRootSchema;
    readonly kind: string;
    constructor(newRoot: SModelRootSchema);
}
export declare class SetModelCommand extends Command {
    action: SetModelAction;
    static readonly KIND: string;
    oldRoot: SModelRoot;
    newRoot: SModelRoot;
    constructor(action: SetModelAction);
    execute(context: CommandExecutionContext): SModelRoot;
    undo(context: CommandExecutionContext): SModelRoot;
    redo(context: CommandExecutionContext): SModelRoot;
    readonly blockUntil: (action: Action) => boolean;
}
//# sourceMappingURL=set-model.d.ts.map