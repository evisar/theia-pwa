import { interfaces } from "inversify";
import { VNode } from "snabbdom/vnode";
import { SModelElement, SModelRoot, SParentElement } from "../model/smodel";
import { ProviderRegistry } from "../../utils/registry";
/**
 * Base interface for the components that turn GModelElements into virtual DOM elements.
 */
export interface IView {
    render(model: Readonly<SModelElement>, context: RenderingContext, args?: object): VNode;
}
/**
 * Bundles additional data that is passed to views for VNode creation.
 */
export interface RenderingContext {
    viewRegistry: ViewRegistry;
    decorate(vnode: VNode, element: Readonly<SModelElement>): VNode;
    renderElement(element: Readonly<SModelElement>, args?: object): VNode;
    renderChildren(element: Readonly<SParentElement>, args?: object): VNode[];
}
/**
 * Used to bind a model element type to a view constructor in the ViewRegistry.
 */
export interface ViewRegistration {
    type: string;
    constr: new () => IView;
}
/**
 * Allows to look up the IView for a given SModelElement based on its type.
 */
export declare class ViewRegistry extends ProviderRegistry<IView, void> {
    constructor(registrations: ViewRegistration[]);
    protected registerDefaults(): void;
    missing(key: string): IView;
}
/**
 * Utility function to register model and view constructors for a model element type.
 */
export declare function configureModelElement(context: {
    bind: interfaces.Bind;
}, type: string, modelConstr: new () => SModelElement, viewConstr: new () => IView): void;
/**
 * This view is used when the model is the EMPTY_ROOT.
 */
export declare class EmptyView implements IView {
    render(model: SModelRoot, context: RenderingContext): VNode;
}
/**
 * This view is used when no view has been registered for a model element type.
 */
export declare class MissingView implements IView {
    render(model: Readonly<SModelElement>, context: RenderingContext): VNode;
}
//# sourceMappingURL=view.d.ts.map