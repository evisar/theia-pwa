"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx svg */
var snabbdom_jsx_1 = require("snabbdom-jsx");
var inversify_1 = require("inversify");
var types_1 = require("../types");
var smodel_factory_1 = require("../model/smodel-factory");
var registry_1 = require("../../utils/registry");
var geometry_1 = require("../../utils/geometry");
/**
 * Allows to look up the IView for a given SModelElement based on its type.
 */
var ViewRegistry = /** @class */ (function (_super) {
    __extends(ViewRegistry, _super);
    function ViewRegistry(registrations) {
        var _this = _super.call(this) || this;
        _this.registerDefaults();
        registrations.forEach(function (registration) { return _this.register(registration.type, registration.constr); });
        return _this;
    }
    ViewRegistry.prototype.registerDefaults = function () {
        this.register(smodel_factory_1.EMPTY_ROOT.type, EmptyView);
    };
    ViewRegistry.prototype.missing = function (key) {
        return new MissingView();
    };
    ViewRegistry = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.multiInject(types_1.TYPES.ViewRegistration)), __param(0, inversify_1.optional()),
        __metadata("design:paramtypes", [Array])
    ], ViewRegistry);
    return ViewRegistry;
}(registry_1.ProviderRegistry));
exports.ViewRegistry = ViewRegistry;
/**
 * Utility function to register model and view constructors for a model element type.
 */
function configureModelElement(context, type, modelConstr, viewConstr) {
    context.bind(types_1.TYPES.SModelElementRegistration).toConstantValue({
        type: type,
        constr: modelConstr
    });
    context.bind(types_1.TYPES.ViewRegistration).toConstantValue({
        type: type,
        constr: viewConstr
    });
}
exports.configureModelElement = configureModelElement;
/**
 * This view is used when the model is the EMPTY_ROOT.
 */
var EmptyView = /** @class */ (function () {
    function EmptyView() {
    }
    EmptyView.prototype.render = function (model, context) {
        return snabbdom_jsx_1.svg("svg", { "class-sprotty-empty": true });
    };
    return EmptyView;
}());
exports.EmptyView = EmptyView;
/**
 * This view is used when no view has been registered for a model element type.
 */
var MissingView = /** @class */ (function () {
    function MissingView() {
    }
    MissingView.prototype.render = function (model, context) {
        var position = model.position || geometry_1.ORIGIN_POINT;
        return snabbdom_jsx_1.svg("text", { "class-sprotty-missing": true, x: position.x, y: position.y },
            "?",
            model.id,
            "?");
    };
    return MissingView;
}());
exports.MissingView = MissingView;
//# sourceMappingURL=view.js.map