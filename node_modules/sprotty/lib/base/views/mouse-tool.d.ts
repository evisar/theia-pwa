import { VNode } from "snabbdom/vnode";
import { IActionDispatcher } from "../actions/action-dispatcher";
import { SModelElement, SModelRoot } from "../model/smodel";
import { Action } from "../actions/action";
import { IVNodeDecorator } from "./vnode-decorators";
import { DOMHelper } from "./dom-helper";
export declare class MouseTool implements IVNodeDecorator {
    protected actionDispatcher: IActionDispatcher;
    protected domHelper: DOMHelper;
    protected mouseListeners: MouseListener[];
    constructor(actionDispatcher: IActionDispatcher, domHelper: DOMHelper, mouseListeners?: MouseListener[]);
    register(mouseListener: MouseListener): void;
    deregister(mouseListener: MouseListener): void;
    protected getTargetElement(model: SModelRoot, event: MouseEvent): SModelElement | undefined;
    protected handleEvent<K extends keyof MouseListener>(methodName: K, model: SModelRoot, event: MouseEvent): void;
    protected focusOnMouseEvent<K extends keyof MouseListener>(methodName: K, model: SModelRoot): void;
    mouseOver(model: SModelRoot, event: MouseEvent): void;
    mouseOut(model: SModelRoot, event: MouseEvent): void;
    mouseEnter(model: SModelRoot, event: MouseEvent): void;
    mouseLeave(model: SModelRoot, event: MouseEvent): void;
    mouseDown(model: SModelRoot, event: MouseEvent): void;
    mouseMove(model: SModelRoot, event: MouseEvent): void;
    mouseUp(model: SModelRoot, event: MouseEvent): void;
    wheel(model: SModelRoot, event: WheelEvent): void;
    doubleClick(model: SModelRoot, event: WheelEvent): void;
    decorate(vnode: VNode, element: SModelElement): VNode;
    postUpdate(): void;
}
export declare class PopupMouseTool extends MouseTool {
    protected actionDispatcher: IActionDispatcher;
    protected domHelper: DOMHelper;
    protected mouseListeners: MouseListener[];
    constructor(actionDispatcher: IActionDispatcher, domHelper: DOMHelper, mouseListeners?: MouseListener[]);
}
export declare class MouseListener {
    mouseOver(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseOut(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseEnter(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseLeave(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseDown(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseMove(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseUp(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    wheel(target: SModelElement, event: WheelEvent): (Action | Promise<Action>)[];
    doubleClick(target: SModelElement, event: WheelEvent): (Action | Promise<Action>)[];
    decorate(vnode: VNode, element: SModelElement): VNode;
}
//# sourceMappingURL=mouse-tool.d.ts.map