import { VNode } from "snabbdom/vnode";
import { IActionDispatcher } from "../actions/action-dispatcher";
import { SModelElement, SModelRoot } from "../model/smodel";
import { Action } from "../actions/action";
import { IVNodeDecorator } from "./vnode-decorators";
export declare class KeyTool implements IVNodeDecorator {
    protected actionDispatcher: IActionDispatcher;
    protected keyListeners: KeyListener[];
    constructor(actionDispatcher: IActionDispatcher, keyListeners?: KeyListener[]);
    register(keyListener: KeyListener): void;
    deregister(keyListener: KeyListener): void;
    protected handleEvent<K extends keyof KeyListener>(methodName: K, model: SModelRoot, event: KeyboardEvent): void;
    keyDown(element: SModelRoot, event: KeyboardEvent): void;
    focus(): void;
    decorate(vnode: VNode, element: SModelElement): VNode;
    postUpdate(): void;
}
export declare class KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
//# sourceMappingURL=key-tool.d.ts.map