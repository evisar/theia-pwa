import { VNode } from "snabbdom/vnode";
import { Module } from "snabbdom/modules/module";
import { ILogger } from "../../utils/logging";
import { SModelElement, SModelRoot, SParentElement } from "../model/smodel";
import { IActionDispatcher } from "../actions/action-dispatcher";
import { IVNodeDecorator } from "./vnode-decorators";
import { RenderingContext, ViewRegistry } from "./view";
import { ViewerOptions } from "./viewer-options";
export interface IViewer {
    update(model: SModelRoot): void;
    updateHidden(hiddenModel: SModelRoot): void;
    updatePopup(popupModel: SModelRoot): void;
}
export declare class ModelRenderer implements RenderingContext {
    viewRegistry: ViewRegistry;
    private decorators;
    constructor(viewRegistry: ViewRegistry, decorators: IVNodeDecorator[]);
    decorate(vnode: VNode, element: Readonly<SModelElement>): VNode;
    renderElement(element: Readonly<SModelElement>, args?: object): VNode;
    renderChildren(element: Readonly<SParentElement>, args?: object): VNode[];
    postUpdate(): void;
}
export declare type ModelRendererFactory = (decorators: IVNodeDecorator[]) => ModelRenderer;
/**
 * The component that turns the model into an SVG DOM.
 * Uses a VDOM based on snabbdom.js for performance.
 */
export declare class Viewer implements IViewer {
    protected decorators: IVNodeDecorator[];
    protected hiddenDecorators: IVNodeDecorator[];
    protected popupDecorators: IVNodeDecorator[];
    protected options: ViewerOptions;
    protected logger: ILogger;
    protected actiondispatcher: IActionDispatcher;
    protected renderer: ModelRenderer;
    protected hiddenRenderer: ModelRenderer;
    protected popupRenderer: ModelRenderer;
    protected readonly patcher: Patcher;
    protected lastVDOM: VNode;
    protected lastHiddenVDOM: VNode;
    protected lastPopupVDOM: VNode;
    constructor(modelRendererFactory: ModelRendererFactory, decorators: IVNodeDecorator[], hiddenDecorators: IVNodeDecorator[], popupDecorators: IVNodeDecorator[], options: ViewerOptions, logger: ILogger, actiondispatcher: IActionDispatcher);
    protected createModules(): Module[];
    protected createPatcher(): (oldVnode: Element | VNode, vnode: VNode) => VNode;
    protected onWindowResize: (vdom: VNode) => void;
    protected getBoundsInPage(element: Element): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    update(model: Readonly<SModelRoot>): void;
    protected hasFocus(): boolean;
    protected restoreFocus(focus: boolean): void;
    updateHidden(hiddenModel: Readonly<SModelRoot>): void;
    updatePopup(model: Readonly<SModelRoot>): void;
}
export declare type Patcher = (oldRoot: VNode | Element, newRoot: VNode) => VNode;
export declare type IViewerProvider = () => Promise<Viewer>;
//# sourceMappingURL=viewer.d.ts.map