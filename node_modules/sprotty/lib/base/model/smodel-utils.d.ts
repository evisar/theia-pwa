import { SModelElement, SModelElementSchema } from "./smodel";
import { Point } from "../../utils/geometry";
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the basic type of a model element.
 */
export declare function getBasicType(schema: SModelElementSchema | SModelElement): string;
/**
 * Model element types can include a colon to separate the basic type and a sub-type. This function
 * extracts the sub-type of a model element.
 */
export declare function getSubType(schema: SModelElementSchema | SModelElement): string;
/**
 * Find the element with the given identifier. If you need to find multiple elements, using an
 * SModelIndex might be more effective.
 */
export declare function findElement(parent: SModelElementSchema, elementId: string): SModelElementSchema | undefined;
/**
 * Find a parent element that satisfies the given predicate.
 */
export declare function findParent(element: SModelElement, predicate: (e: SModelElement) => boolean): SModelElement | undefined;
/**
 * Find a parent element that implements the feature identified with the given predicate.
 */
export declare function findParentByFeature<T>(element: SModelElement, predicate: (t: SModelElement) => t is SModelElement & T): SModelElement & T | undefined;
/**
 * Translate a point from the coordinate system of the source element to the coordinate system
 * of the target element.
 */
export declare function translatePoint(point: Point, source: SModelElement, target: SModelElement): Point;
//# sourceMappingURL=smodel-utils.d.ts.map