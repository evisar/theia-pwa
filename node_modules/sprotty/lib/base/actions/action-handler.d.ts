import { MultiInstanceRegistry } from "../../utils/registry";
import { ICommand, ICommandFactory } from "../commands/command";
import { Action } from "./action";
/**
 * An action handler accepts an action and reacts to it by returning either a command to be
 * executed, or another action to be dispatched.
 */
export interface IActionHandler {
    handle(action: Action): ICommand | Action | void;
}
/**
 * Initializes and registers action handlers.
 */
export interface IActionHandlerInitializer {
    initialize(registry: ActionHandlerRegistry): void;
}
/**
 * The action handler registry maps actions to their handlers using the Action.kind property.
 */
export declare class ActionHandlerRegistry extends MultiInstanceRegistry<IActionHandler> {
    constructor(initializers: (IActionHandlerInitializer)[]);
    registerCommand(commandType: ICommandFactory): void;
    initializeActionHandler(initializer: IActionHandlerInitializer): void;
}
//# sourceMappingURL=action-handler.d.ts.map