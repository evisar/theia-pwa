import { ILogger } from "../../utils/logging";
import { ICommandStack } from "../commands/command-stack";
import { AnimationFrameSyncer } from "../animations/animation-frame-syncer";
import { Action } from "./action";
import { ActionHandlerRegistry } from "./action-handler";
export interface IActionDispatcher {
    dispatch(action: Action): Promise<void>;
    dispatchAll(actions: Action[]): Promise<void>;
}
/**
 * Collects actions, converts them to commands and dispatches them.
 * Also acts as the proxy to model sources such as diagram servers.
 */
export declare class ActionDispatcher implements IActionDispatcher {
    protected actionHandlerRegistry: ActionHandlerRegistry;
    protected commandStack: ICommandStack;
    protected logger: ILogger;
    protected syncer: AnimationFrameSyncer;
    protected blockUntil?: (action: Action) => boolean;
    protected postponedActions: PostponedAction[];
    constructor(actionHandlerRegistry: ActionHandlerRegistry, commandStack: ICommandStack, logger: ILogger, syncer: AnimationFrameSyncer);
    dispatchAll(actions: Action[]): Promise<void>;
    dispatch(action: Action): Promise<void>;
    protected handleAction(action: Action): Promise<void>;
    protected handleBlocked(action: Action, predicate: (action: Action) => boolean): Promise<void>;
}
export interface PostponedAction {
    action: Action;
    resolve: () => void;
    reject: (reason: any) => void;
}
//# sourceMappingURL=action-dispatcher.d.ts.map