import { Animation } from '../../base/animations/animation';
import { Command, CommandExecutionContext, CommandResult } from '../../base/commands/command';
import { ResolvedElementFade } from '../fade/fade';
import { Action } from '../../base/actions/action';
import { SModelRootSchema, SModelRoot, SModelElement } from "../../base/model/smodel";
import { ResolvedElementMove } from "../move/move";
import { MatchResult, Match } from "./model-matching";
import { ResolvedElementResize } from '../bounds/resize';
/**
 * Sent from the model source to the client in order to update the model. If no model is present yet,
 * this behaves the same as a SetModelAction. The transition from the old model to the new one can be animated.
 */
export declare class UpdateModelAction implements Action {
    readonly animate: boolean;
    readonly kind: string;
    readonly newRoot?: SModelRootSchema;
    readonly matches?: Match[];
    constructor(input: SModelRootSchema | Match[], animate?: boolean);
}
export interface UpdateAnimationData {
    fades: ResolvedElementFade[];
    moves?: ResolvedElementMove[];
    resizes?: ResolvedElementResize[];
}
export declare class UpdateModelCommand extends Command {
    action: UpdateModelAction;
    static readonly KIND: string;
    oldRoot: SModelRoot;
    newRoot: SModelRoot;
    constructor(action: UpdateModelAction);
    execute(context: CommandExecutionContext): CommandResult;
    protected performUpdate(oldRoot: SModelRoot, newRoot: SModelRoot, context: CommandExecutionContext): CommandResult;
    protected applyMatches(root: SModelRoot, matches: Match[], context: CommandExecutionContext): void;
    protected convertToMatchResult(matches: Match[], leftRoot: SModelRoot, rightRoot: SModelRoot): MatchResult;
    protected computeAnimation(newRoot: SModelRoot, matchResult: MatchResult, context: CommandExecutionContext): SModelRoot | Animation;
    protected updateElement(left: SModelElement, right: SModelElement, animationData: UpdateAnimationData): void;
    protected createAnimations(data: UpdateAnimationData, root: SModelRoot, context: CommandExecutionContext): Animation[];
    undo(context: CommandExecutionContext): CommandResult;
    redo(context: CommandExecutionContext): CommandResult;
}
//# sourceMappingURL=update-model.d.ts.map