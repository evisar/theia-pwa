import { SModelRootSchema, SModelElementSchema, SModelRoot, SModelElement } from '../../base/model/smodel';
export interface Match {
    left?: SModelElementSchema;
    right?: SModelElementSchema;
    leftParentId?: string;
    rightParentId?: string;
}
export interface MatchResult {
    [id: string]: Match;
}
export declare function forEachMatch(matchResult: MatchResult, callback: (id: string, match: Match) => void): void;
export declare class ModelMatcher {
    match(left: SModelRootSchema | SModelRoot, right: SModelRootSchema | SModelRoot): MatchResult;
    protected matchLeft(element: SModelElementSchema | SModelElement, result: MatchResult, parentId?: string): void;
    protected matchRight(element: SModelElementSchema | SModelElement, result: MatchResult, parentId?: string): void;
}
export declare function applyMatches(root: SModelRootSchema, matches: Match[]): void;
//# sourceMappingURL=model-matching.d.ts.map