import { Point } from '../../utils/geometry';
import { SModelElement, SChildElement, SParentElement } from '../../base/model/smodel';
import { SModelExtension } from '../../base/model/smodel-extension';
import { Selectable } from '../select/model';
import { Hoverable } from '../hover/model';
import { RoutedPoint } from '../../graph/routing';
export declare const editFeature: unique symbol;
export interface Routable extends SModelExtension {
    routingPoints: Point[];
    readonly source?: SModelElement;
    readonly target?: SModelElement;
    route(): RoutedPoint[];
}
export declare function isRoutable(element: SModelElement): element is SModelElement & Routable;
export declare function canEditRouting(element: SModelElement): element is SModelElement & Routable;
export declare class SRoutingHandle extends SChildElement implements Selectable, Hoverable {
    /** 'junction' is a point where two line segments meet, 'line' is a volatile handle placed on a line segment. */
    kind: 'junction' | 'line';
    /** The actual routing point index (junction) or the previous point index (line). */
    pointIndex: number;
    /** Whether the routing point is being dragged. */
    editMode: boolean;
    hoverFeedback: boolean;
    selected: boolean;
    hasFeature(feature: symbol): boolean;
}
/**
 * Remove routed points that are in edit mode and for which the angle between the preceding and
 * following points falls below a threshold.
 */
export declare function filterEditModeHandles(route: RoutedPoint[], parent: SParentElement): RoutedPoint[];
//# sourceMappingURL=model.d.ts.map