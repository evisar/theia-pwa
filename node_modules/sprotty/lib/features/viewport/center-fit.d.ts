import { Bounds } from "../../utils/geometry";
import { Action } from "../../base/actions/action";
import { Command, CommandExecutionContext } from "../../base/commands/command";
import { SModelElement, SModelRoot } from "../../base/model/smodel";
import { KeyListener } from "../../base/views/key-tool";
import { Viewport } from "./model";
/**
 * Triggered when the user requests the viewer to center on the current model. The resulting
 * CenterCommand changes the scroll setting of the viewport accordingly and resets the zoom to its default.
 * This action can also be sent from the model source to the client in order to perform such a
 * viewport change programmatically.
 */
export declare class CenterAction implements Action {
    readonly elementIds: string[];
    readonly animate: boolean;
    readonly kind: string;
    constructor(elementIds: string[], animate?: boolean);
}
/**
 * Triggered when the user requests the viewer to fit its content to the available drawing area.
 * The resulting FitToScreenCommand changes the zoom and scroll settings of the viewport so the model
 * can be shown completely. This action can also be sent from the model source to the client in order
 * to perform such a viewport change programmatically.
 */
export declare class FitToScreenAction implements Action {
    readonly elementIds: string[];
    readonly padding?: number | undefined;
    readonly maxZoom?: number | undefined;
    readonly animate: boolean;
    readonly kind: string;
    constructor(elementIds: string[], padding?: number | undefined, maxZoom?: number | undefined, animate?: boolean);
}
export declare abstract class BoundsAwareViewportCommand extends Command {
    protected readonly animate: boolean;
    oldViewport: Viewport;
    newViewport?: Viewport;
    constructor(animate: boolean);
    protected initialize(model: SModelRoot): void;
    protected boundsInViewport(element: SModelElement, bounds: Bounds, viewport: SModelRoot & Viewport): Bounds;
    protected abstract getNewViewport(bounds: Bounds, model: SModelRoot): Viewport | undefined;
    protected abstract getElementIds(): string[];
    execute(context: CommandExecutionContext): import("../../base/commands/command").CommandResult;
    undo(context: CommandExecutionContext): import("../../base/commands/command").CommandResult;
    redo(context: CommandExecutionContext): import("../../base/commands/command").CommandResult;
    protected equal(vp1: Viewport, vp2: Viewport): boolean;
}
export declare class CenterCommand extends BoundsAwareViewportCommand {
    protected action: CenterAction;
    static readonly KIND: string;
    constructor(action: CenterAction);
    getElementIds(): string[];
    getNewViewport(bounds: Bounds, model: SModelRoot): Viewport | undefined;
}
export declare class FitToScreenCommand extends BoundsAwareViewportCommand {
    protected action: FitToScreenAction;
    static readonly KIND: string;
    constructor(action: FitToScreenAction);
    getElementIds(): string[];
    getNewViewport(bounds: Bounds, model: SModelRoot): Viewport | undefined;
}
export declare class CenterKeyboardListener extends KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
//# sourceMappingURL=center-fit.d.ts.map