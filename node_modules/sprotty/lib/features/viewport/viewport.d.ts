import { SModelElement, SModelRoot } from "../../base/model/smodel";
import { Action } from "../../base/actions/action";
import { MergeableCommand, ICommand, CommandExecutionContext } from "../../base/commands/command";
import { Animation } from "../../base/animations/animation";
import { Viewport } from "./model";
export declare class ViewportAction implements Action {
    readonly elementId: string;
    readonly newViewport: Viewport;
    readonly animate: boolean;
    kind: string;
    constructor(elementId: string, newViewport: Viewport, animate: boolean);
}
export declare class ViewportCommand extends MergeableCommand {
    protected action: ViewportAction;
    static readonly KIND: string;
    protected element: SModelElement & Viewport;
    protected oldViewport: Viewport;
    protected newViewport: Viewport;
    constructor(action: ViewportAction);
    execute(context: CommandExecutionContext): import("../../base/commands/command").CommandResult;
    undo(context: CommandExecutionContext): Promise<SModelRoot>;
    redo(context: CommandExecutionContext): Promise<SModelRoot>;
    merge(command: ICommand, context: CommandExecutionContext): boolean;
}
export declare class ViewportAnimation extends Animation {
    protected element: SModelElement & Viewport;
    protected oldViewport: Viewport;
    protected newViewport: Viewport;
    protected context: CommandExecutionContext;
    protected zoomFactor: number;
    constructor(element: SModelElement & Viewport, oldViewport: Viewport, newViewport: Viewport, context: CommandExecutionContext);
    tween(t: number, context: CommandExecutionContext): SModelRoot;
}
//# sourceMappingURL=viewport.d.ts.map