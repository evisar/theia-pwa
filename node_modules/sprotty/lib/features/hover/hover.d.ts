import { Bounds, Point } from "../../utils/geometry";
import { SModelElement, SModelRoot, SModelRootSchema } from "../../base/model/smodel";
import { MouseListener } from "../../base/views/mouse-tool";
import { Action } from "../../base/actions/action";
import { Command, CommandExecutionContext, PopupCommand } from "../../base/commands/command";
import { KeyListener } from "../../base/views/key-tool";
import { ViewerOptions } from "../../base/views/viewer-options";
/**
 * Triggered when the user puts the mouse pointer over an element.
 */
export declare class HoverFeedbackAction implements Action {
    readonly mouseoverElement: string;
    readonly mouseIsOver: boolean;
    kind: string;
    constructor(mouseoverElement: string, mouseIsOver: boolean);
}
export declare class HoverFeedbackCommand extends Command {
    action: HoverFeedbackAction;
    static readonly KIND: string;
    constructor(action: HoverFeedbackAction);
    execute(context: CommandExecutionContext): SModelRoot;
    undo(context: CommandExecutionContext): SModelRoot;
    redo(context: CommandExecutionContext): SModelRoot;
}
/**
 * Triggered when the user hovers the mouse pointer over an element to get a popup with details on
 * that element. This action is sent from the client to the model source, e.g. a DiagramServer.
 * The response is a SetPopupModelAction.
 */
export declare class RequestPopupModelAction implements Action {
    readonly elementId: string;
    readonly bounds: Bounds;
    static readonly KIND: string;
    readonly kind: string;
    constructor(elementId: string, bounds: Bounds);
}
/**
 * Sent from the model source to the client to display a popup in response to a RequestPopupModelAction.
 * This action can also be used to remove any existing popup by choosing EMPTY_ROOT as root element.
 */
export declare class SetPopupModelAction implements Action {
    readonly newRoot: SModelRootSchema;
    readonly kind: string;
    constructor(newRoot: SModelRootSchema);
}
export declare class SetPopupModelCommand extends PopupCommand {
    action: SetPopupModelAction;
    static readonly KIND: string;
    oldRoot: SModelRoot;
    newRoot: SModelRoot;
    constructor(action: SetPopupModelAction);
    execute(context: CommandExecutionContext): SModelRoot;
    undo(context: CommandExecutionContext): SModelRoot;
    redo(context: CommandExecutionContext): SModelRoot;
}
export interface HoverState {
    mouseOverTimer: number | undefined;
    mouseOutTimer: number | undefined;
    popupOpen: boolean;
    previousPopupElement: SModelElement | undefined;
}
export declare abstract class AbstractHoverMouseListener extends MouseListener {
    protected options: ViewerOptions;
    protected state: HoverState;
    constructor(options: ViewerOptions, state: HoverState);
    protected stopMouseOutTimer(): void;
    protected startMouseOutTimer(): Promise<Action>;
    protected stopMouseOverTimer(): void;
}
export declare class HoverMouseListener extends AbstractHoverMouseListener {
    protected computePopupBounds(target: SModelElement, mousePosition: Point): Bounds;
    protected allowSidePosition(target: SModelElement, side: 'above' | 'below' | 'left' | 'right', distance: number): boolean;
    protected startMouseOverTimer(target: SModelElement, event: MouseEvent): Promise<Action>;
    mouseOver(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseOut(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseMove(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    protected closeOnMouseMove(target: SModelElement, event: MouseEvent): boolean;
}
export declare class PopupHoverMouseListener extends AbstractHoverMouseListener {
    mouseOut(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
    mouseOver(target: SModelElement, event: MouseEvent): (Action | Promise<Action>)[];
}
export declare class HoverKeyListener extends KeyListener {
    keyDown(element: SModelElement, event: KeyboardEvent): Action[];
}
//# sourceMappingURL=hover.d.ts.map