import { Bounds, Point } from "../../utils/geometry";
import { SModelElement, SModelRoot, SModelRootSchema } from "../../base/model/smodel";
import { Action } from "../../base/actions/action";
import { CommandExecutionContext, HiddenCommand, SystemCommand } from "../../base/commands/command";
import { BoundsAware, Alignable } from './model';
/**
 * Sent from the model source (e.g. a DiagramServer) to the client to update the bounds of some
 * (or all) model elements.
 */
export declare class SetBoundsAction implements Action {
    readonly bounds: ElementAndBounds[];
    readonly kind: string;
    constructor(bounds: ElementAndBounds[]);
}
/**
 * Sent from the model source to the client to request bounds for the given model. The model is
 * rendered invisibly so the bounds can derived from the DOM. The response is a ComputedBoundsAction.
 * This hidden rendering round-trip is necessary if the client is responsible for parts of the layout
 * (see `needsClientLayout` viewer option).
 */
export declare class RequestBoundsAction implements Action {
    readonly newRoot: SModelRootSchema;
    readonly kind: string;
    constructor(newRoot: SModelRootSchema);
}
/**
 * Sent from the client to the model source (e.g. a DiagramServer) to transmit the result of bounds
 * computation as a response to a RequestBoundsAction. If the server is responsible for parts of
 * the layout (see `needsServerLayout` viewer option), it can do so after applying the computed bounds
 * received with this action. Otherwise there is no need to send the computed bounds to the server,
 * so they can be processed locally by the client.
 */
export declare class ComputedBoundsAction implements Action {
    readonly bounds: ElementAndBounds[];
    readonly revision?: number | undefined;
    readonly alignments?: ElementAndAlignment[] | undefined;
    static readonly KIND: string;
    readonly kind: string;
    constructor(bounds: ElementAndBounds[], revision?: number | undefined, alignments?: ElementAndAlignment[] | undefined);
}
/**
 * Associates new bounds with a model element, which is referenced via its id.
 */
export interface ElementAndBounds {
    elementId: string;
    newBounds: Bounds;
}
/**
 * Associates a new alignment with a model element, which is referenced via its id.
 */
export interface ElementAndAlignment {
    elementId: string;
    newAlignment: Point;
}
export interface ResolvedElementAndBounds {
    element: SModelElement & BoundsAware;
    oldBounds: Bounds;
    newBounds: Bounds;
}
export interface ResolvedElementAndAlignment {
    element: SModelElement & Alignable;
    oldAlignment: Point;
    newAlignment: Point;
}
export declare class SetBoundsCommand extends SystemCommand {
    protected action: SetBoundsAction;
    static readonly KIND: string;
    protected bounds: ResolvedElementAndBounds[];
    constructor(action: SetBoundsAction);
    execute(context: CommandExecutionContext): SModelRoot;
    undo(context: CommandExecutionContext): SModelRoot;
    redo(context: CommandExecutionContext): SModelRoot;
}
export declare class RequestBoundsCommand extends HiddenCommand {
    protected action: RequestBoundsAction;
    static readonly KIND: string;
    constructor(action: RequestBoundsAction);
    execute(context: CommandExecutionContext): SModelRoot;
    readonly blockUntil: (action: Action) => boolean;
}
//# sourceMappingURL=bounds-manipulation.d.ts.map