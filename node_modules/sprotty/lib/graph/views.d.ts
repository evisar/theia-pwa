import { VNode } from "snabbdom/vnode";
import { Point } from '../utils/geometry';
import { RenderingContext, IView } from "../base/views/view";
import { SRoutingHandle } from '../features/edit/model';
import { SCompartment, SEdge, SGraph, SLabel } from "./sgraph";
import { RoutedPoint } from './routing';
/**
 * IView component that turns an SGraph element and its children into a tree of virtual DOM elements.
 */
export declare class SGraphView implements IView {
    render(model: Readonly<SGraph>, context: RenderingContext): VNode;
}
export declare class PolylineEdgeView implements IView {
    render(edge: Readonly<SEdge>, context: RenderingContext): VNode;
    protected renderLine(edge: SEdge, segments: Point[], context: RenderingContext): VNode;
    protected renderAdditionals(edge: SEdge, segments: Point[], context: RenderingContext): VNode[];
    protected renderDanglingEdge(message: string, edge: SEdge, context: RenderingContext): VNode;
}
export declare class SRoutingHandleView implements IView {
    minimalPointDistance: number;
    render(handle: Readonly<SRoutingHandle>, context: RenderingContext, args?: {
        route?: RoutedPoint[];
    }): VNode;
    protected getPosition(handle: SRoutingHandle, route: RoutedPoint[]): Point | undefined;
    protected getJunctionPosition(handle: SRoutingHandle, route: RoutedPoint[]): Point | undefined;
    protected getLinePosition(handle: SRoutingHandle, route: RoutedPoint[]): Point | undefined;
}
export declare class SLabelView implements IView {
    render(label: Readonly<SLabel>, context: RenderingContext): VNode;
}
export declare class SCompartmentView implements IView {
    render(model: Readonly<SCompartment>, context: RenderingContext): VNode;
}
//# sourceMappingURL=views.d.ts.map