import { ViewerOptions } from "../base/views/viewer-options";
export interface ILogger {
    logLevel: LogLevel;
    error(thisArg: any, message: string, ...params: any[]): void;
    warn(thisArg: any, message: string, ...params: any[]): void;
    info(thisArg: any, message: string, ...params: any[]): void;
    log(thisArg: any, message: string, ...params: any[]): void;
}
export declare enum LogLevel {
    none = 0,
    error = 1,
    warn = 2,
    info = 3,
    log = 4
}
export declare class NullLogger implements ILogger {
    logLevel: LogLevel;
    error(thisArg: any, message: string, ...params: any[]): void;
    warn(thisArg: any, message: string, ...params: any[]): void;
    info(thisArg: any, message: string, ...params: any[]): void;
    log(thisArg: any, message: string, ...params: any[]): void;
}
export declare class ConsoleLogger implements ILogger {
    logLevel: LogLevel;
    protected viewOptions: ViewerOptions;
    constructor(logLevel?: LogLevel, viewOptions?: ViewerOptions);
    error(thisArg: any, message: string, ...params: any[]): void;
    warn(thisArg: any, message: string, ...params: any[]): void;
    info(thisArg: any, message: string, ...params: any[]): void;
    log(thisArg: any, message: string, ...params: any[]): void;
    protected consoleArguments(thisArg: any, message: string, params: any[]): any[];
}
//# sourceMappingURL=logging.d.ts.map