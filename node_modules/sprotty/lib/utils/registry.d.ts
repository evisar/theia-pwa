export declare class ProviderRegistry<T, U> {
    protected elements: Map<string, new (u: U) => T>;
    register(key: string, cstr: new (u: U) => T): void;
    deregister(key: string): void;
    hasKey(key: string): boolean;
    get(key: string, arg: U): T;
    protected missing(key: string, arg: U): T | never;
}
export declare class InstanceRegistry<T> {
    protected elements: Map<string, T>;
    register(key: string, instance: T): void;
    deregister(key: string): void;
    hasKey(key: string): boolean;
    get(key: string): T;
    protected missing(key: string): T | never;
}
export declare class MultiInstanceRegistry<T> {
    protected elements: Map<string, T[]>;
    register(key: string, instance: T): void;
    deregisterAll(key: string): void;
    get(key: string): T[];
}
//# sourceMappingURL=registry.d.ts.map