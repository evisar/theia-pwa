import { Bounds, Point } from "../utils/geometry";
import { ILogger } from "../utils/logging";
import { SModelRootSchema, SModelElementSchema } from "../base/model/smodel";
import { SModelStorage } from "../base/model/smodel-storage";
import { Action } from "../base/actions/action";
import { ActionHandlerRegistry } from "../base/actions/action-handler";
import { IActionDispatcher } from "../base/actions/action-dispatcher";
import { ICommand } from "../base/commands/command";
import { ViewerOptions } from "../base/views/viewer-options";
import { ComputedBoundsAction } from '../features/bounds/bounds-manipulation';
import { ModelSource } from "./model-source";
import { ExportSvgAction } from '../features/export/svg-exporter';
/**
 * Wrapper for actions when transferring them between client and server via a DiagramServer.
 */
export interface ActionMessage {
    clientId: string;
    action: Action;
}
export declare function isActionMessage(object: any): object is ActionMessage;
/**
 * Sent by the external server when to signal a state change.
 */
export declare class ServerStatusAction {
    static KIND: string;
    kind: string;
    severity: string;
    message: string;
}
/**
 * A ModelSource that communicates with an external model provider, e.g.
 * a model editor.
 *
 * This class defines which actions are sent to and received from the
 * external model source.
 */
export declare abstract class DiagramServer extends ModelSource {
    protected storage: SModelStorage;
    protected logger: ILogger;
    clientId: string;
    protected currentRoot: SModelRootSchema;
    protected lastSubmittedModelType: string;
    constructor(actionDispatcher: IActionDispatcher, actionHandlerRegistry: ActionHandlerRegistry, viewerOptions: ViewerOptions, storage: SModelStorage, logger: ILogger);
    protected initialize(registry: ActionHandlerRegistry): void;
    handle(action: Action): void | ICommand;
    protected abstract sendMessage(message: ActionMessage): void;
    protected messageReceived(data: any): void;
    /**
     * Check whether the given action should be handled locally. Returns true if the action should
     * still be sent to the server, and false if it's only handled locally.
     */
    protected handleLocally(action: Action): boolean;
    /**
     * Put the new model contained in the given action into the model storage, if there is any.
     */
    protected storeNewModel(action: Action): void;
    /**
     * If the server requires to compute a layout, the computed bounds are forwarded. Otherwise they
     * are applied to the current model locally and a model update is triggered.
     */
    protected handleComputedBounds(action: ComputedBoundsAction): boolean;
    protected applyBounds(element: SModelElementSchema, newBounds: Bounds): void;
    protected applyAlignment(element: SModelElementSchema, newAlignment: Point): void;
    protected handleExportSvgAction(action: ExportSvgAction): boolean;
    protected handleServerStateAction(action: ServerStatusAction): boolean;
}
//# sourceMappingURL=diagram-server.d.ts.map