import { SModelRoot, SModelRootSchema, SChildElement, SModelElementSchema } from "../base/model/smodel";
import { Point, Dimension, Bounds } from "../utils/geometry";
import { BoundsAware, Alignable } from "../features/bounds/model";
import { Locateable } from "../features/move/model";
import { Selectable } from "../features/select/model";
import { SNode, SPort } from '../graph/sgraph';
/**
 * A node that is represented by a circle.
 */
export declare class CircularNode extends SNode {
    strokeWidth: number;
    protected readonly radius: number;
    getAnchor(refPoint: Point, offset?: number): Point;
}
/**
 * A node that is represented by a rectangle.
 */
export declare class RectangularNode extends SNode {
    strokeWidth: number;
    getAnchor(refPoint: Point, offset?: number): Point;
}
/**
 * A node that is represented by a diamond.
 */
export declare class DiamondNode extends SNode {
    strokeWidth: number;
    getAnchor(refPoint: Point, offset?: number): Point;
}
/**
 * A port that is represented by a circle.
 */
export declare class CircularPort extends SPort {
    strokeWidth: number;
    protected readonly radius: number;
    getAnchor(refPoint: Point, offset?: number): Point;
}
/**
 * A port that is represented by a rectangle.
 */
export declare class RectangularPort extends SPort {
    strokeWidth: number;
    getAnchor(refPoint: Point, offset?: number): Point;
}
/**
 * Serializable schema for HtmlRoot.
 */
export interface HtmlRootSchema extends SModelRootSchema {
    classes?: string[];
}
/**
 * Root model element class for HTML content. Usually this is rendered with a `div` DOM element.
 */
export declare class HtmlRoot extends SModelRoot {
    classes: string[];
}
/**
 * Serializable schema for PreRenderedElement.
 */
export interface PreRenderedElementSchema extends SModelElementSchema {
    code: string;
}
/**
 * Pre-rendered elements contain HTML or SVG code to be transferred to the DOM. This can be useful to
 * render complex figures or to compute the view on the server instead of the client code.
 */
export declare class PreRenderedElement extends SChildElement {
    code: string;
}
/**
 * Serializable schema for ShapedPreRenderedElement.
 */
export interface ShapedPreRenderedElementSchema extends PreRenderedElementSchema {
    position?: Point;
    size?: Dimension;
}
/**
 * Same as PreRenderedElement, but with a position and a size.
 */
export declare class ShapedPreRenderedElement extends PreRenderedElement implements BoundsAware, Locateable, Selectable, Alignable {
    position: Point;
    size: Dimension;
    selected: boolean;
    alignment: Point;
    bounds: Bounds;
    hasFeature(feature: symbol): boolean;
}
//# sourceMappingURL=model.d.ts.map