"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2018 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var messageReader_1 = require("vscode-jsonrpc/lib/messageReader");
var WebSocketMessageReader = /** @class */ (function (_super) {
    __extends(WebSocketMessageReader, _super);
    function WebSocketMessageReader(socket) {
        var _this = _super.call(this) || this;
        _this.socket = socket;
        _this.state = 'initial';
        _this.events = [];
        _this.socket.onMessage(function (message) {
            return _this.readMessage(message);
        });
        _this.socket.onError(function (error) {
            return _this.fireError(error);
        });
        _this.socket.onClose(function (code, reason) {
            if (code !== 1000) {
                var error = {
                    name: '' + code,
                    message: "Error during socket reconnect: code = " + code + ", reason = " + reason
                };
                _this.fireError(error);
            }
            _this.fireClose();
        });
        return _this;
    }
    WebSocketMessageReader.prototype.listen = function (callback) {
        if (this.state === 'initial') {
            this.state = 'listening';
            this.callback = callback;
            while (this.events.length !== 0) {
                var event_1 = this.events.pop();
                if (event_1.message) {
                    this.readMessage(event_1.message);
                }
                else if (event_1.error) {
                    this.fireError(event_1.error);
                }
                else {
                    this.fireClose();
                }
            }
        }
    };
    WebSocketMessageReader.prototype.readMessage = function (message) {
        if (this.state === 'initial') {
            this.events.splice(0, 0, { message: message });
        }
        else if (this.state === 'listening') {
            var data = JSON.parse(message);
            this.callback(data);
        }
    };
    WebSocketMessageReader.prototype.fireError = function (error) {
        if (this.state === 'initial') {
            this.events.splice(0, 0, { error: error });
        }
        else if (this.state === 'listening') {
            _super.prototype.fireError.call(this, error);
        }
    };
    WebSocketMessageReader.prototype.fireClose = function () {
        if (this.state === 'initial') {
            this.events.splice(0, 0, {});
        }
        else if (this.state === 'listening') {
            _super.prototype.fireClose.call(this);
        }
        this.state = 'closed';
    };
    return WebSocketMessageReader;
}(messageReader_1.AbstractMessageReader));
exports.WebSocketMessageReader = WebSocketMessageReader;
//# sourceMappingURL=reader.js.map