"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var cpp_build_configurations_1 = require("./cpp-build-configurations");
var cpp_build_configurations_ui_1 = require("./cpp-build-configurations-ui");
var CppBuildConfigurationsStatusBarElement = /** @class */ (function () {
    function CppBuildConfigurationsStatusBarElement() {
        this.cppIdentifier = 'cpp-configurator';
    }
    /**
     * Display the cpp build configurations status bar element,
     * and listen to any changes in the active build configuration
     */
    CppBuildConfigurationsStatusBarElement.prototype.show = function () {
        var _this = this;
        this.setCppBuildConfigElement();
        this.cppManager.onActiveConfigChange(function (e) { _this.setCppBuildConfigElement(); });
    };
    /**
     * Set the cpp build configurations status bar element
     * used to set the workspace's active build configuration
     */
    CppBuildConfigurationsStatusBarElement.prototype.setCppBuildConfigElement = function () {
        var activeConfig = this.cppManager.getActiveConfig();
        this.statusBar.setElement(this.cppIdentifier, {
            text: "$(wrench) C/C++ Build Config " + ((activeConfig) ? activeConfig.name : ''),
            alignment: browser_1.StatusBarAlignment.RIGHT,
            command: cpp_build_configurations_ui_1.CPP_CHANGE_BUILD_CONFIGURATION.id,
            priority: 0.5,
        });
    };
    __decorate([
        inversify_1.inject(cpp_build_configurations_1.CppBuildConfigurationManager),
        __metadata("design:type", Object)
    ], CppBuildConfigurationsStatusBarElement.prototype, "cppManager", void 0);
    __decorate([
        inversify_1.inject(browser_1.StatusBar),
        __metadata("design:type", Object)
    ], CppBuildConfigurationsStatusBarElement.prototype, "statusBar", void 0);
    CppBuildConfigurationsStatusBarElement = __decorate([
        inversify_1.injectable()
    ], CppBuildConfigurationsStatusBarElement);
    return CppBuildConfigurationsStatusBarElement;
}());
exports.CppBuildConfigurationsStatusBarElement = CppBuildConfigurationsStatusBarElement;
//# sourceMappingURL=cpp-build-configurations-statusbar-element.js.map