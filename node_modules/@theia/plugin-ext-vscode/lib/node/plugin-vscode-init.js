"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_ext_1 = require("@theia/plugin-ext");
var pluginsApiImpl = new Map();
var plugins = new Array();
var defaultApi;
var isLoadOverride = false;
var pluginApiFactory;
exports.doInitialization = function (apiFactory, plugin) {
    var vscode = apiFactory(plugin);
    // register the commands that are in the package.json file
    var contributes = plugin.rawModel.contributes;
    if (contributes && contributes.commands) {
        contributes.commands.forEach(function (commandItem) {
            var commandLabel;
            if (commandItem.category) { // if VS Code command has category we will add it before title, so label will looks like 'category: title'
                commandLabel = commandItem.category + ': ' + commandItem.title;
            }
            else {
                commandLabel = commandItem.title;
            }
            vscode.commands.registerCommand({ id: commandItem.command, label: commandLabel });
        });
    }
    // replace command API as it will send only the ID as a string parameter
    var registerCommand = vscode.commands.registerCommand;
    vscode.commands.registerCommand = function (command, handler) {
        // use of the ID when registering commands
        if (typeof command === 'string' && handler) {
            return vscode.commands.registerHandler(command, handler);
        }
        return registerCommand(command, handler);
    };
    // replace createWebviewPanel API for override html setter
    var createWebviewPanel = vscode.window.createWebviewPanel;
    vscode.window.createWebviewPanel = function (viewType, title, showOptions, options) {
        var panel = createWebviewPanel(viewType, title, showOptions, options);
        // redefine property
        Object.defineProperty(panel.webview, 'html', {
            set: function (html) {
                var newHtml = html.replace('vscode-resource:/', '/webview/');
                this.checkIsDisposed();
                if (this._html !== newHtml) {
                    this._html = newHtml;
                    this.proxy.$setHtml(this.viewId, newHtml);
                }
            }
        });
        return panel;
    };
    // use Theia plugin api instead vscode extensions
    vscode.extensions = {
        get all() {
            return vscode.plugins.all;
        },
        getExtension: function (pluginId) {
            return vscode.plugins.getPlugin(pluginId);
        }
    };
    // override the version for vscode to be a VSCode version
    vscode.version = '1.27.2';
    pluginsApiImpl.set(plugin.model.id, vscode);
    plugins.push(plugin);
    if (!isLoadOverride) {
        overrideInternalLoad();
        isLoadOverride = true;
        pluginApiFactory = apiFactory;
    }
};
function overrideInternalLoad() {
    var module = require('module');
    var vscodeModuleName = 'vscode';
    // save original load method
    var internalLoad = module._load;
    // if we try to resolve theia module, return the filename entry to use cache.
    // tslint:disable-next-line:no-any
    module._load = function (request, parent, isMain) {
        if (request !== vscodeModuleName) {
            return internalLoad.apply(this, arguments);
        }
        var plugin = findPlugin(parent.filename);
        if (plugin) {
            var apiImpl = pluginsApiImpl.get(plugin.model.id);
            return apiImpl;
        }
        if (!defaultApi) {
            console.warn("Could not identify plugin for 'Theia' require call from " + parent.filename);
            defaultApi = pluginApiFactory(plugin_ext_1.emptyPlugin);
        }
        return defaultApi;
    };
}
function findPlugin(filePath) {
    return plugins.find(function (plugin) { return filePath.startsWith(plugin.pluginFolder); });
}
//# sourceMappingURL=plugin-vscode-init.js.map