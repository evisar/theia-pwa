"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var file_tree_1 = require("./file-tree");
var file_tree_model_1 = require("./file-tree-model");
var common_1 = require("@theia/core/lib/common");
var selection_1 = require("@theia/core/lib/common/selection");
var React = require("react");
exports.FILE_TREE_CLASS = 'theia-FileTree';
exports.FILE_STAT_NODE_CLASS = 'theia-FileStatNode';
exports.DIR_NODE_CLASS = 'theia-DirNode';
exports.FILE_STAT_ICON_CLASS = 'theia-FileStatIcon';
var FileTreeWidget = /** @class */ (function (_super) {
    __extends(FileTreeWidget, _super);
    function FileTreeWidget(props, model, contextMenuRenderer) {
        var _this = _super.call(this, props, model, contextMenuRenderer) || this;
        _this.props = props;
        _this.model = model;
        _this.toCancelNodeExpansion = new common_1.DisposableCollection();
        _this.addClass(exports.FILE_TREE_CLASS);
        _this.toDispose.push(_this.toCancelNodeExpansion);
        return _this;
    }
    FileTreeWidget.prototype.createNodeClassNames = function (node, props) {
        var classNames = _super.prototype.createNodeClassNames.call(this, node, props);
        if (file_tree_1.FileStatNode.is(node)) {
            classNames.push(exports.FILE_STAT_NODE_CLASS);
        }
        if (file_tree_1.DirNode.is(node)) {
            classNames.push(exports.DIR_NODE_CLASS);
        }
        return classNames;
    };
    FileTreeWidget.prototype.renderIcon = function (node, props) {
        if (file_tree_1.FileStatNode.is(node)) {
            return React.createElement("div", { className: (node.icon || '') + ' file-icon' });
        }
        // tslint:disable-next-line:no-null-keyword
        return null;
    };
    FileTreeWidget.prototype.createContainerAttributes = function () {
        var _this = this;
        var attrs = _super.prototype.createContainerAttributes.call(this);
        return __assign({}, attrs, { onDragEnter: function (event) { return _this.handleDragEnterEvent(_this.model.root, event); }, onDragOver: function (event) { return _this.handleDragOverEvent(_this.model.root, event); }, onDragLeave: function (event) { return _this.handleDragLeaveEvent(_this.model.root, event); }, onDrop: function (event) { return _this.handleDropEvent(_this.model.root, event); } });
    };
    FileTreeWidget.prototype.createNodeAttributes = function (node, props) {
        var _this = this;
        var elementAttrs = _super.prototype.createNodeAttributes.call(this, node, props);
        return __assign({}, elementAttrs, { draggable: file_tree_1.FileStatNode.is(node), onDragStart: function (event) { return _this.handleDragStartEvent(node, event); }, onDragEnter: function (event) { return _this.handleDragEnterEvent(node, event); }, onDragOver: function (event) { return _this.handleDragOverEvent(node, event); }, onDragLeave: function (event) { return _this.handleDragLeaveEvent(node, event); }, onDrop: function (event) { return _this.handleDropEvent(node, event); }, title: this.getNodeTooltip(node) });
    };
    FileTreeWidget.prototype.getNodeTooltip = function (node) {
        var uri = selection_1.UriSelection.getUri(node);
        return uri ? uri.path.toString() : undefined;
    };
    FileTreeWidget.prototype.handleDragStartEvent = function (node, event) {
        event.stopPropagation();
        this.setTreeNodeAsData(event.dataTransfer, node);
    };
    FileTreeWidget.prototype.handleDragEnterEvent = function (node, event) {
        event.preventDefault();
        event.stopPropagation();
        this.toCancelNodeExpansion.dispose();
        var containing = file_tree_1.DirNode.getContainingDir(node);
        if (!!containing && !containing.selected) {
            this.model.selectNode(containing);
        }
    };
    FileTreeWidget.prototype.handleDragOverEvent = function (node, event) {
        var _this = this;
        event.preventDefault();
        event.stopPropagation();
        if (!this.toCancelNodeExpansion.disposed) {
            return;
        }
        var timer = setTimeout(function () {
            var containing = file_tree_1.DirNode.getContainingDir(node);
            if (!!containing && !containing.expanded) {
                _this.model.expandNode(containing);
            }
        }, 500);
        this.toCancelNodeExpansion.push(common_1.Disposable.create(function () { return clearTimeout(timer); }));
    };
    FileTreeWidget.prototype.handleDragLeaveEvent = function (node, event) {
        event.preventDefault();
        event.stopPropagation();
        this.toCancelNodeExpansion.dispose();
    };
    FileTreeWidget.prototype.handleDropEvent = function (node, event) {
        event.preventDefault();
        event.stopPropagation();
        event.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
        var containing = file_tree_1.DirNode.getContainingDir(node);
        if (containing) {
            var source = this.getTreeNodeFromData(event.dataTransfer);
            if (source) {
                this.model.move(source, containing);
            }
            else {
                this.model.upload(containing, event.dataTransfer.items);
            }
        }
    };
    FileTreeWidget.prototype.setTreeNodeAsData = function (data, node) {
        data.setData('tree-node', node.id);
    };
    FileTreeWidget.prototype.getTreeNodeFromData = function (data) {
        var id = data.getData('tree-node');
        return this.model.getNode(id);
    };
    FileTreeWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.TreeProps)),
        __param(1, inversify_1.inject(file_tree_model_1.FileTreeModel)),
        __param(2, inversify_1.inject(browser_1.ContextMenuRenderer)),
        __metadata("design:paramtypes", [Object, file_tree_model_1.FileTreeModel, Object])
    ], FileTreeWidget);
    return FileTreeWidget;
}(browser_1.TreeWidget));
exports.FileTreeWidget = FileTreeWidget;
//# sourceMappingURL=file-tree-widget.js.map