"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var file_change_collection_1 = require("./file-change-collection");
var filesystem_watcher_protocol_1 = require("../common/filesystem-watcher-protocol");
describe('FileChangeCollection', function () {
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        second: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        expected: filesystem_watcher_protocol_1.FileChangeType.ADDED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        second: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        expected: filesystem_watcher_protocol_1.FileChangeType.ADDED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        second: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        expected: undefined
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        second: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        expected: filesystem_watcher_protocol_1.FileChangeType.UPDATED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        second: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        expected: filesystem_watcher_protocol_1.FileChangeType.UPDATED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        second: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        expected: filesystem_watcher_protocol_1.FileChangeType.DELETED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        second: filesystem_watcher_protocol_1.FileChangeType.ADDED,
        expected: filesystem_watcher_protocol_1.FileChangeType.UPDATED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        second: filesystem_watcher_protocol_1.FileChangeType.UPDATED,
        expected: filesystem_watcher_protocol_1.FileChangeType.UPDATED
    });
    assertChanges({
        first: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        second: filesystem_watcher_protocol_1.FileChangeType.DELETED,
        expected: filesystem_watcher_protocol_1.FileChangeType.DELETED
    });
    function assertChanges(_a) {
        var first = _a.first, second = _a.second, expected = _a.expected;
        it(filesystem_watcher_protocol_1.FileChangeType[first] + " + " + filesystem_watcher_protocol_1.FileChangeType[second] + " => " + (expected !== undefined ? filesystem_watcher_protocol_1.FileChangeType[expected] : 'NONE'), function () {
            var collection = new file_change_collection_1.FileChangeCollection();
            var uri = file_uri_1.FileUri.create('/root/foo/bar.txt').toString();
            collection.push({
                uri: uri,
                type: first
            });
            collection.push({
                uri: uri,
                type: second
            });
            assert.deepEqual(expected !== undefined ? [{
                    uri: uri,
                    type: expected
                }] : [], collection.values());
        });
    }
});
//# sourceMappingURL=file-change-collection.spec.js.map