"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var filesystem_watcher_protocol_1 = require("../common/filesystem-watcher-protocol");
/**
 * A file change collection guarantees that only one change is reported for each URI.
 *
 * Changes are normalized according following rules:
 * - ADDED + ADDED => ADDED
 * - ADDED + UPDATED => ADDED
 * - ADDED + DELETED => NONE
 * - UPDATED + ADDED => UPDATED
 * - UPDATED + UPDATED => UPDATED
 * - UPDATED + DELETED => DELETED
 * - DELETED + ADDED => UPDATED
 * - DELETED + UPDATED => UPDATED
 * - DELETED + DELETED => DELETED
 */
var FileChangeCollection = /** @class */ (function () {
    function FileChangeCollection() {
        this.changes = new Map();
    }
    FileChangeCollection.prototype.push = function (change) {
        var current = this.changes.get(change.uri);
        if (current) {
            if (this.isDeleted(current, change)) {
                this.changes.delete(change.uri);
            }
            else if (this.isUpdated(current, change)) {
                current.type = filesystem_watcher_protocol_1.FileChangeType.UPDATED;
            }
            else if (!this.shouldSkip(current, change)) {
                current.type = change.type;
            }
        }
        else {
            this.changes.set(change.uri, change);
        }
    };
    FileChangeCollection.prototype.isDeleted = function (current, change) {
        return current.type === filesystem_watcher_protocol_1.FileChangeType.ADDED && change.type === filesystem_watcher_protocol_1.FileChangeType.DELETED;
    };
    FileChangeCollection.prototype.isUpdated = function (current, change) {
        return current.type === filesystem_watcher_protocol_1.FileChangeType.DELETED && change.type === filesystem_watcher_protocol_1.FileChangeType.ADDED;
    };
    FileChangeCollection.prototype.shouldSkip = function (current, change) {
        return (current.type === filesystem_watcher_protocol_1.FileChangeType.ADDED && change.type === filesystem_watcher_protocol_1.FileChangeType.UPDATED) ||
            (current.type === filesystem_watcher_protocol_1.FileChangeType.UPDATED && change.type === filesystem_watcher_protocol_1.FileChangeType.ADDED);
    };
    FileChangeCollection.prototype.values = function () {
        return Array.from(this.changes.values());
    };
    return FileChangeCollection;
}());
exports.FileChangeCollection = FileChangeCollection;
//# sourceMappingURL=file-change-collection.js.map