"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var fs = require("fs-extra");
var path = require("path");
var rimraf = require("rimraf");
var uuid_1 = require("uuid");
var mime_types_1 = require("mime-types");
var inversify_1 = require("inversify");
var http_status_codes_1 = require("http-status-codes");
var uri_1 = require("@theia/core/lib/common/uri");
var objects_1 = require("@theia/core/lib/common/objects");
var logger_1 = require("@theia/core/lib/common/logger");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var filesystem_1 = require("../../common/filesystem");
var directory_archiver_1 = require("./directory-archiver");
var file_download_data_1 = require("../../common/download/file-download-data");
var FileDownloadHandler = /** @class */ (function () {
    function FileDownloadHandler() {
    }
    FileDownloadHandler.prototype.download = function (filePath, request, response) {
        return __awaiter(this, void 0, void 0, function () {
            var name, mimeType, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        name = path.basename(filePath);
                        mimeType = mime_types_1.lookup(filePath);
                        if (mimeType) {
                            response.contentType(mimeType);
                        }
                        else {
                            this.logger.debug("Cannot determine the content-type for file: " + filePath + ". Skipping the 'Content-type' header from the HTTP response.");
                        }
                        response.setHeader('Content-Disposition', "attachment; filename=" + name);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs.access(filePath, fs.constants.R_OK)];
                    case 2:
                        _a.sent();
                        fs.readFile(filePath, function (error, data) {
                            if (error) {
                                _this.handleError(response, error, http_status_codes_1.INTERNAL_SERVER_ERROR);
                                return;
                            }
                            response.status(http_status_codes_1.OK).send(data).end();
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.handleError(response, e_1, http_status_codes_1.INTERNAL_SERVER_ERROR);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FileDownloadHandler.prototype.archive = function (inputPath, outputPath, entries) {
        if (outputPath === void 0) { outputPath = path.join(os.tmpdir(), uuid_1.v4()); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.directoryArchiver.archive(inputPath, outputPath, entries)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, outputPath];
                }
            });
        });
    };
    FileDownloadHandler.prototype.deleteRecursively = function (pathToDelete) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                rimraf(pathToDelete, function (error) {
                    if (error) {
                        _this.logger.warn("An error occurred while deleting the temporary data from the disk. Cannot clean up: " + pathToDelete + ".", error);
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    FileDownloadHandler.prototype.createTempDir = function () {
        return __awaiter(this, void 0, void 0, function () {
            var outputPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        outputPath = path.join(os.tmpdir(), uuid_1.v4());
                        return [4 /*yield*/, fs.mkdir(outputPath)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, outputPath];
                }
            });
        });
    };
    FileDownloadHandler.prototype.handleError = function (response, reason, status) {
        if (status === void 0) { status = http_status_codes_1.INTERNAL_SERVER_ERROR; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.logger.error(reason);
                response.status(status).send(reason).end();
                return [2 /*return*/];
            });
        });
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], FileDownloadHandler.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(filesystem_1.FileSystem),
        __metadata("design:type", Object)
    ], FileDownloadHandler.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(directory_archiver_1.DirectoryArchiver),
        __metadata("design:type", directory_archiver_1.DirectoryArchiver)
    ], FileDownloadHandler.prototype, "directoryArchiver", void 0);
    FileDownloadHandler = __decorate([
        inversify_1.injectable()
    ], FileDownloadHandler);
    return FileDownloadHandler;
}());
exports.FileDownloadHandler = FileDownloadHandler;
(function (FileDownloadHandler) {
    FileDownloadHandler.SINGLE = Symbol('single');
    FileDownloadHandler.MULTI = Symbol('multi');
})(FileDownloadHandler = exports.FileDownloadHandler || (exports.FileDownloadHandler = {}));
exports.FileDownloadHandler = FileDownloadHandler;
var SingleFileDownloadHandler = /** @class */ (function (_super) {
    __extends(SingleFileDownloadHandler, _super);
    function SingleFileDownloadHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingleFileDownloadHandler.prototype.handle = function (request, response) {
        return __awaiter(this, void 0, void 0, function () {
            var method, body, query, uri, stat, filePath, outputRootPath, outputPath, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        method = request.method, body = request.body, query = request.query;
                        if (method !== 'GET') {
                            this.handleError(response, "Unexpected HTTP method. Expected GET got '" + method + "' instead.", http_status_codes_1.METHOD_NOT_ALLOWED);
                            return [2 /*return*/];
                        }
                        if (body !== undefined && !objects_1.isEmpty(body)) {
                            this.handleError(response, "The request body must either undefined or empty when downloading a single file. The body was: " + JSON.stringify(body) + ".", http_status_codes_1.BAD_REQUEST);
                            return [2 /*return*/];
                        }
                        if (query === undefined || query.uri === undefined || typeof query.uri !== 'string') {
                            this.handleError(response, "Cannot access the 'uri' query from the request. The query was: " + JSON.stringify(query) + ".", http_status_codes_1.BAD_REQUEST);
                            return [2 /*return*/];
                        }
                        uri = new uri_1.default(query.uri).toString(true);
                        return [4 /*yield*/, this.fileSystem.getFileStat(uri)];
                    case 1:
                        stat = _a.sent();
                        if (stat === undefined) {
                            this.handleError(response, "The file does not exist. URI: " + uri + ".", http_status_codes_1.NOT_FOUND);
                            return [2 /*return*/];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 9, , 10]);
                        filePath = file_uri_1.FileUri.fsPath(uri);
                        if (!!stat.isDirectory) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.download(filePath, request, response)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 4:
                        outputRootPath = path.join(os.tmpdir(), uuid_1.v4());
                        return [4 /*yield*/, fs.mkdir(outputRootPath)];
                    case 5:
                        _a.sent();
                        outputPath = path.join(outputRootPath, path.basename(filePath) + ".tar");
                        return [4 /*yield*/, this.archive(filePath, outputPath)];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.download(outputPath, request, response)];
                    case 7:
                        _a.sent();
                        this.deleteRecursively(outputPath);
                        _a.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_2 = _a.sent();
                        this.handleError(response, e_2, http_status_codes_1.INTERNAL_SERVER_ERROR);
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    SingleFileDownloadHandler = __decorate([
        inversify_1.injectable()
    ], SingleFileDownloadHandler);
    return SingleFileDownloadHandler;
}(FileDownloadHandler));
exports.SingleFileDownloadHandler = SingleFileDownloadHandler;
var MultiFileDownloadHandler = /** @class */ (function (_super) {
    __extends(MultiFileDownloadHandler, _super);
    function MultiFileDownloadHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MultiFileDownloadHandler.prototype.handle = function (request, response) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3, _a, e_4, _b, method, body, _c, _d, uri, stat, e_3_1, outputRootPath_1, distinctUris, tarPaths, _loop_1, this_1, _e, _f, _g, rootUri, uris, e_4_1, _h, outputPath, outputPath, e_5;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        method = request.method, body = request.body;
                        if (method !== 'PUT') {
                            this.handleError(response, "Unexpected HTTP method. Expected PUT got '" + method + "' instead.", http_status_codes_1.METHOD_NOT_ALLOWED);
                            return [2 /*return*/];
                        }
                        if (body === undefined) {
                            this.handleError(response, 'The request body must be defined when downloading multiple files.', http_status_codes_1.BAD_REQUEST);
                            return [2 /*return*/];
                        }
                        if (!file_download_data_1.FileDownloadData.is(body)) {
                            this.handleError(response, "Unexpected body format. Cannot extract the URIs from the request body. Body was: " + JSON.stringify(body) + ".", http_status_codes_1.BAD_REQUEST);
                            return [2 /*return*/];
                        }
                        if (body.uris.length === 0) {
                            this.handleError(response, "Insufficient body format. No URIs were defined by the request body. Body was: " + JSON.stringify(body) + ".", http_status_codes_1.BAD_REQUEST);
                            return [2 /*return*/];
                        }
                        _j.label = 1;
                    case 1:
                        _j.trys.push([1, 6, 7, 8]);
                        _c = __values(body.uris), _d = _c.next();
                        _j.label = 2;
                    case 2:
                        if (!!_d.done) return [3 /*break*/, 5];
                        uri = _d.value;
                        return [4 /*yield*/, this.fileSystem.getFileStat(uri)];
                    case 3:
                        stat = _j.sent();
                        if (stat === undefined) {
                            this.handleError(response, "The file does not exist. URI: " + uri + ".", http_status_codes_1.NOT_FOUND);
                            return [2 /*return*/];
                        }
                        _j.label = 4;
                    case 4:
                        _d = _c.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_3_1 = _j.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        _j.trys.push([8, 24, , 25]);
                        outputRootPath_1 = path.join(os.tmpdir(), uuid_1.v4());
                        return [4 /*yield*/, fs.mkdir(outputRootPath_1)];
                    case 9:
                        _j.sent();
                        distinctUris = Array.from(new Set(body.uris.map(function (uri) { return new uri_1.default(uri); })));
                        tarPaths = [];
                        _loop_1 = function (rootUri, uris) {
                            var rootPath, entries, outputPath;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        rootPath = file_uri_1.FileUri.fsPath(rootUri);
                                        entries = uris.map(file_uri_1.FileUri.fsPath).map(function (p) { return path.relative(rootPath, p); });
                                        outputPath = path.join(outputRootPath_1, path.basename(rootPath) + ".tar");
                                        return [4 /*yield*/, this_1.archive(rootPath, outputPath, entries)];
                                    case 1:
                                        _a.sent();
                                        tarPaths.push(outputPath);
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _j.label = 10;
                    case 10:
                        _j.trys.push([10, 16, 17, 18]);
                        return [4 /*yield*/, this.directoryArchiver.findCommonParents(distinctUris)];
                    case 11:
                        _e = __values.apply(void 0, [(_j.sent()).entries()]), _f = _e.next();
                        _j.label = 12;
                    case 12:
                        if (!!_f.done) return [3 /*break*/, 15];
                        _g = __read(_f.value, 2), rootUri = _g[0], uris = _g[1];
                        return [5 /*yield**/, _loop_1(rootUri, uris)];
                    case 13:
                        _j.sent();
                        _j.label = 14;
                    case 14:
                        _f = _e.next();
                        return [3 /*break*/, 12];
                    case 15: return [3 /*break*/, 18];
                    case 16:
                        e_4_1 = _j.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 18];
                    case 17:
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 18:
                        if (!(tarPaths.length === 1)) return [3 /*break*/, 20];
                        _h = __read(tarPaths, 1), outputPath = _h[0];
                        return [4 /*yield*/, this.download(outputPath, request, response)];
                    case 19:
                        _j.sent();
                        this.deleteRecursively(outputRootPath_1);
                        return [3 /*break*/, 23];
                    case 20:
                        outputPath = path.join(outputRootPath_1, "theia-archive-" + Date.now() + ".tar");
                        return [4 /*yield*/, this.archive(outputRootPath_1, outputPath, tarPaths.map(function (p) { return path.relative(outputRootPath_1, p); }))];
                    case 21:
                        _j.sent();
                        return [4 /*yield*/, this.download(outputPath, request, response)];
                    case 22:
                        _j.sent();
                        this.deleteRecursively(outputRootPath_1);
                        _j.label = 23;
                    case 23: return [3 /*break*/, 25];
                    case 24:
                        e_5 = _j.sent();
                        this.handleError(response, e_5, http_status_codes_1.INTERNAL_SERVER_ERROR);
                        return [3 /*break*/, 25];
                    case 25: return [2 /*return*/];
                }
            });
        });
    };
    MultiFileDownloadHandler = __decorate([
        inversify_1.injectable()
    ], MultiFileDownloadHandler);
    return MultiFileDownloadHandler;
}(FileDownloadHandler));
exports.MultiFileDownloadHandler = MultiFileDownloadHandler;
//# sourceMappingURL=file-download-handler.js.map