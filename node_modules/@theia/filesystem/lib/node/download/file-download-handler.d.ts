/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Request, Response } from 'express';
import { ILogger } from '@theia/core/lib/common/logger';
import { FileSystem } from '../../common/filesystem';
import { DirectoryArchiver } from './directory-archiver';
export declare abstract class FileDownloadHandler {
    protected readonly logger: ILogger;
    protected readonly fileSystem: FileSystem;
    protected readonly directoryArchiver: DirectoryArchiver;
    abstract handle(request: Request, response: Response): Promise<void>;
    protected download(filePath: string, request: Request, response: Response): Promise<void>;
    protected archive(inputPath: string, outputPath?: string, entries?: string[]): Promise<string>;
    protected deleteRecursively(pathToDelete: string): Promise<void>;
    protected createTempDir(): Promise<string>;
    protected handleError(response: Response, reason: string | Error, status?: number): Promise<void>;
}
export declare namespace FileDownloadHandler {
    const SINGLE: symbol;
    const MULTI: symbol;
}
export declare class SingleFileDownloadHandler extends FileDownloadHandler {
    handle(request: Request, response: Response): Promise<void>;
}
export declare class MultiFileDownloadHandler extends FileDownloadHandler {
    handle(request: Request, response: Response): Promise<void>;
}
//# sourceMappingURL=file-download-handler.d.ts.map