/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import * as React from 'react';
import { DebugProtocol } from 'vscode-debugprotocol/lib/debugProtocol';
import URI from '@theia/core/lib/common/uri';
import { EditorManager } from '@theia/editor/lib/browser';
import { LabelProvider, WidgetOpenerOptions } from '@theia/core/lib/browser';
import { TreeElement } from '@theia/core/lib/browser/source-tree';
import { DebugSession } from '../debug-session';
import { SourceBreakpoint } from '../breakpoint/breakpoint-marker';
import { DebugSource } from './debug-source';
import { BreakpointManager } from '../breakpoint/breakpoint-manager';
export declare class DebugBreakpointData {
    readonly raw?: DebugProtocol.Breakpoint;
    readonly origins: SourceBreakpoint[];
}
export declare class DebugBreakpoint extends DebugBreakpointData implements TreeElement {
    protected readonly labelProvider: LabelProvider;
    protected readonly breakpoints: BreakpointManager;
    protected readonly editorManager: EditorManager;
    protected readonly session?: DebugSession | undefined;
    readonly uri: URI;
    constructor(origin: SourceBreakpoint, labelProvider: LabelProvider, breakpoints: BreakpointManager, editorManager: EditorManager, session?: DebugSession | undefined);
    update(data: Partial<DebugBreakpointData>): void;
    readonly origin: SourceBreakpoint;
    readonly id: number | undefined;
    readonly enabled: boolean;
    setEnabled(enabled: boolean): void;
    readonly installed: boolean;
    readonly verified: boolean;
    readonly message: string;
    /** 1-based */
    readonly line: number;
    readonly column: number | undefined;
    readonly endLine: number | undefined;
    readonly endColumn: number | undefined;
    readonly source: DebugSource | undefined;
    open(options?: WidgetOpenerOptions): Promise<void>;
    protected readonly setBreakpointEnabled: (event: React.ChangeEvent<HTMLInputElement>) => void;
    render(): React.ReactNode;
    remove(): void;
    protected doRemove(origins: SourceBreakpoint[]): SourceBreakpoint[] | undefined;
}
//# sourceMappingURL=debug-breakpoint.d.ts.map