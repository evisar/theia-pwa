"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var marker_manager_1 = require("@theia/markers/lib/browser/marker-manager");
var uri_1 = require("@theia/core/lib/common/uri");
var breakpoint_marker_1 = require("./breakpoint-marker");
var BreakpointManager = /** @class */ (function (_super) {
    __extends(BreakpointManager, _super);
    function BreakpointManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.owner = 'breakpoint';
        _this._breakpointsEnabled = true;
        return _this;
    }
    BreakpointManager.prototype.getKind = function () {
        return breakpoint_marker_1.BREAKPOINT_KIND;
    };
    BreakpointManager.prototype.getBreakpoint = function (uri, line) {
        var marker = this.findMarkers({
            uri: uri,
            dataFilter: function (breakpoint) { return breakpoint.raw.line === line; }
        })[0];
        return marker && marker.data;
    };
    BreakpointManager.prototype.getBreakpoints = function (uri) {
        return this.findMarkers({ uri: uri }).map(function (marker) { return marker.data; });
    };
    BreakpointManager.prototype.setBreakpoints = function (uri, breakpoints) {
        this.setMarkers(uri, this.owner, breakpoints.sort(function (a, b) { return a.raw.line - b.raw.line; }));
    };
    BreakpointManager.prototype.addBreakpoint = function (uri, line, column) {
        var breakpoints = this.getBreakpoints(uri);
        var newBreakpoints = breakpoints.filter(function (_a) {
            var raw = _a.raw;
            return raw.line !== line;
        });
        if (breakpoints.length === newBreakpoints.length) {
            newBreakpoints.push({
                uri: uri.toString(),
                enabled: true,
                raw: {
                    line: line,
                    column: column
                }
            });
            this.setBreakpoints(uri, newBreakpoints);
        }
    };
    BreakpointManager.prototype.deleteBreakpoint = function (uri, line, column) {
        var breakpoints = this.getBreakpoints(uri);
        var newBreakpoints = breakpoints.filter(function (_a) {
            var raw = _a.raw;
            return raw.line !== line;
        });
        this.setBreakpoints(uri, newBreakpoints);
    };
    BreakpointManager.prototype.enableAllBreakpoints = function (enabled) {
        var e_1, _a, e_2, _b;
        try {
            for (var _c = __values(this.getUris()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var uriString = _d.value;
                var didChange = false;
                var uri = new uri_1.default(uriString);
                var markers = this.findMarkers({ uri: uri });
                try {
                    for (var markers_1 = __values(markers), markers_1_1 = markers_1.next(); !markers_1_1.done; markers_1_1 = markers_1.next()) {
                        var marker = markers_1_1.value;
                        if (marker.data.enabled !== enabled) {
                            marker.data.enabled = enabled;
                            didChange = true;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (markers_1_1 && !markers_1_1.done && (_b = markers_1.return)) _b.call(markers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                if (didChange) {
                    this.fireOnDidChangeMarkers(uri);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    Object.defineProperty(BreakpointManager.prototype, "breakpointsEnabled", {
        get: function () {
            return this._breakpointsEnabled;
        },
        set: function (breakpointsEnabled) {
            var e_3, _a;
            if (this._breakpointsEnabled !== breakpointsEnabled) {
                this._breakpointsEnabled = breakpointsEnabled;
                try {
                    for (var _b = __values(this.getUris()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var uri = _c.value;
                        this.fireOnDidChangeMarkers(new uri_1.default(uri));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    BreakpointManager.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, uri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.storage.getData('breakpoints', {
                            breakpointsEnabled: true,
                            breakpoints: {}
                        })];
                    case 1:
                        data = _a.sent();
                        this._breakpointsEnabled = data.breakpointsEnabled;
                        // tslint:disable-next-line:forin
                        for (uri in data.breakpoints) {
                            this.setBreakpoints(new uri_1.default(uri), data.breakpoints[uri]);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BreakpointManager.prototype.save = function () {
        var e_4, _a;
        var data = {
            breakpointsEnabled: this._breakpointsEnabled,
            breakpoints: {}
        };
        var uris = this.getUris();
        try {
            for (var uris_1 = __values(uris), uris_1_1 = uris_1.next(); !uris_1_1.done; uris_1_1 = uris_1.next()) {
                var uri = uris_1_1.value;
                data.breakpoints[uri] = this.findMarkers({ uri: new uri_1.default(uri) }).map(function (marker) { return marker.data; });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (uris_1_1 && !uris_1_1.done && (_a = uris_1.return)) _a.call(uris_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.storage.setData('breakpoints', data);
    };
    __decorate([
        inversify_1.inject(browser_1.StorageService),
        __metadata("design:type", Object)
    ], BreakpointManager.prototype, "storage", void 0);
    BreakpointManager = __decorate([
        inversify_1.injectable()
    ], BreakpointManager);
    return BreakpointManager;
}(marker_manager_1.MarkerManager));
exports.BreakpointManager = BreakpointManager;
//# sourceMappingURL=breakpoint-manager.js.map