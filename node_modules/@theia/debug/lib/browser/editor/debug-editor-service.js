"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/editor/lib/browser");
var browser_2 = require("@theia/core/lib/browser");
var monaco_editor_1 = require("@theia/monaco/lib/browser/monaco-editor");
var debug_session_manager_1 = require("../debug-session-manager");
var debug_editor_model_1 = require("./debug-editor-model");
var breakpoint_manager_1 = require("../breakpoint/breakpoint-manager");
var DebugEditorService = /** @class */ (function () {
    function DebugEditorService() {
        this.models = new Map();
    }
    DebugEditorService.prototype.init = function () {
        var _this = this;
        this.editors.all.forEach(function (widget) { return _this.push(widget); });
        this.editors.onCreated(function (widget) { return _this.push(widget); });
        this.sessionManager.onDidChangeBreakpoints(function (_a) {
            var session = _a.session, uri = _a.uri;
            if (!session || session === _this.sessionManager.currentSession) {
                _this.render(uri);
            }
        });
    };
    DebugEditorService.prototype.push = function (widget) {
        var _this = this;
        var editor = widget.editor;
        if (!(editor instanceof monaco_editor_1.MonacoEditor)) {
            return;
        }
        var uri = editor.getControl().getModel().uri.toString();
        var debugModel = this.factory(editor.getControl());
        this.models.set(uri, debugModel);
        editor.getControl().onDidDispose(function () {
            debugModel.dispose();
            _this.models.delete(uri);
        });
    };
    DebugEditorService.prototype.render = function (uri) {
        var model = this.models.get(uri.toString());
        if (model) {
            model.render();
        }
    };
    Object.defineProperty(DebugEditorService.prototype, "model", {
        get: function () {
            var currentEditor = this.editors.currentEditor;
            var uri = currentEditor && currentEditor.getResourceUri();
            return uri && this.models.get(uri.toString());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugEditorService.prototype, "breakpoint", {
        get: function () {
            var model = this.model;
            return model && model.breakpoint;
        },
        enumerable: true,
        configurable: true
    });
    DebugEditorService.prototype.toggleBreakpoint = function () {
        var model = this.model;
        if (model) {
            model.toggleBreakpoint();
        }
    };
    Object.defineProperty(DebugEditorService.prototype, "breakpointEnabled", {
        get: function () {
            var breakpoint = this.breakpoint;
            return breakpoint && breakpoint.enabled;
        },
        enumerable: true,
        configurable: true
    });
    DebugEditorService.prototype.setBreakpointEnabled = function (enabled) {
        var breakpoint = this.breakpoint;
        if (breakpoint) {
            breakpoint.setEnabled(enabled);
        }
    };
    DebugEditorService.prototype.showHover = function () {
        var model = this.model;
        if (model) {
            var selection = model.editor.getSelection();
            model.hover.show({ selection: selection, focus: true });
        }
    };
    DebugEditorService.prototype.canShowHover = function () {
        var model = this.model;
        if (model) {
            var selection = model.editor.getSelection();
            return !!model.editor.getModel().getWordAtPosition(selection.getStartPosition());
        }
        return false;
    };
    __decorate([
        inversify_1.inject(browser_1.EditorManager),
        __metadata("design:type", browser_1.EditorManager)
    ], DebugEditorService.prototype, "editors", void 0);
    __decorate([
        inversify_1.inject(breakpoint_manager_1.BreakpointManager),
        __metadata("design:type", breakpoint_manager_1.BreakpointManager)
    ], DebugEditorService.prototype, "breakpoints", void 0);
    __decorate([
        inversify_1.inject(debug_session_manager_1.DebugSessionManager),
        __metadata("design:type", debug_session_manager_1.DebugSessionManager)
    ], DebugEditorService.prototype, "sessionManager", void 0);
    __decorate([
        inversify_1.inject(browser_2.ContextMenuRenderer),
        __metadata("design:type", Object)
    ], DebugEditorService.prototype, "contextMenu", void 0);
    __decorate([
        inversify_1.inject(debug_editor_model_1.DebugEditorModelFactory),
        __metadata("design:type", Function)
    ], DebugEditorService.prototype, "factory", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DebugEditorService.prototype, "init", null);
    DebugEditorService = __decorate([
        inversify_1.injectable()
    ], DebugEditorService);
    return DebugEditorService;
}());
exports.DebugEditorService = DebugEditorService;
//# sourceMappingURL=debug-editor-service.js.map