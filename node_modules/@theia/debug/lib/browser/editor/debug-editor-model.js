"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var debounce = require("p-debounce");
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var breakpoint_manager_1 = require("../breakpoint/breakpoint-manager");
var debug_session_manager_1 = require("../debug-session-manager");
var debug_editor_1 = require("./debug-editor");
var debug_hover_widget_1 = require("./debug-hover-widget");
exports.DebugEditorModelFactory = Symbol('DebugEditorModelFactory');
var DebugEditorModel = /** @class */ (function () {
    function DebugEditorModel() {
        var _this = this;
        this.toDispose = new core_1.DisposableCollection();
        this.breakpointDecorations = [];
        this.breakpointRanges = new Map();
        this.currentBreakpointDecorations = [];
        this.frameDecorations = [];
        this.updatingDecorations = false;
        this.renderFrames = debounce(function () {
            var decorations = _this.createFrameDecorations();
            _this.frameDecorations = _this.deltaDecorations(_this.frameDecorations, decorations);
        }, 100);
        this.hintDecorations = [];
    }
    DebugEditorModel_1 = DebugEditorModel;
    DebugEditorModel.createContainer = function (parent, editor) {
        var child = debug_hover_widget_1.createDebugHoverWidgetContainer(parent, editor);
        child.bind(DebugEditorModel_1).toSelf();
        return child;
    };
    DebugEditorModel.createModel = function (parent, editor) {
        return DebugEditorModel_1.createContainer(parent, editor).get(DebugEditorModel_1);
    };
    DebugEditorModel.prototype.init = function () {
        var _this = this;
        this.uri = new uri_1.default(this.editor.getModel().uri.toString());
        this.toDispose.pushAll([
            this.hover,
            this.editor.onMouseDown(function (event) { return _this.handleMouseDown(event); }),
            this.editor.onMouseMove(function (event) { return _this.handleMouseMove(event); }),
            this.editor.onMouseLeave(function (event) { return _this.handleMouseLeave(event); }),
            this.editor.onKeyDown(function () { return _this.hover.hide({ immediate: false }); }),
            this.editor.getModel().onDidChangeDecorations(function () { return _this.updateBreakpoints(); }),
            this.sessions.onDidChange(function () { return _this.renderFrames(); })
        ]);
        this.renderFrames();
        this.render();
    };
    DebugEditorModel.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    DebugEditorModel.prototype.createFrameDecorations = function () {
        var decorations = [];
        var _a = this.sessions, currentFrame = _a.currentFrame, topFrame = _a.topFrame;
        if (!currentFrame || !currentFrame.source || currentFrame.source.uri.toString() !== this.uri.toString()) {
            return decorations;
        }
        var columnUntilEOLRange = new monaco.Range(currentFrame.raw.line, currentFrame.raw.column, currentFrame.raw.line, 1 << 30);
        var range = new monaco.Range(currentFrame.raw.line, currentFrame.raw.column, currentFrame.raw.line, currentFrame.raw.column + 1);
        if (topFrame === currentFrame) {
            decorations.push({
                options: DebugEditorModel_1.TOP_STACK_FRAME_MARGIN,
                range: range
            });
            if (currentFrame.thread.stoppedDetails && currentFrame.thread.stoppedDetails.reason === 'exception') {
                decorations.push({
                    options: DebugEditorModel_1.TOP_STACK_FRAME_EXCEPTION_DECORATION,
                    range: columnUntilEOLRange
                });
            }
            else {
                decorations.push({
                    options: DebugEditorModel_1.TOP_STACK_FRAME_DECORATION,
                    range: columnUntilEOLRange
                });
                var topFrameRange = this.topFrameRange;
                if (topFrameRange && topFrameRange.startLineNumber === currentFrame.raw.line && topFrameRange.startColumn !== currentFrame.raw.column) {
                    decorations.push({
                        options: DebugEditorModel_1.TOP_STACK_FRAME_INLINE_DECORATION,
                        range: columnUntilEOLRange
                    });
                }
                this.topFrameRange = columnUntilEOLRange;
            }
        }
        else {
            decorations.push({
                options: DebugEditorModel_1.FOCUSED_STACK_FRAME_MARGIN,
                range: range
            });
            decorations.push({
                options: DebugEditorModel_1.FOCUSED_STACK_FRAME_DECORATION,
                range: columnUntilEOLRange
            });
        }
        return decorations;
    };
    DebugEditorModel.prototype.render = function () {
        this.renderBreakpoints();
        this.renderCurrentBreakpoints();
    };
    DebugEditorModel.prototype.renderBreakpoints = function () {
        var decorations = this.createBreakpointDecorations();
        this.breakpointDecorations = this.deltaDecorations(this.breakpointDecorations, decorations);
        this.updateBreakpointRanges();
    };
    DebugEditorModel.prototype.createBreakpointDecorations = function () {
        var _this = this;
        var breakpoints = this.breakpoints.getBreakpoints(this.uri);
        return breakpoints.map(function (breakpoint) { return _this.createBreakpointDecoration(breakpoint); });
    };
    DebugEditorModel.prototype.createBreakpointDecoration = function (breakpoint) {
        var lineNumber = breakpoint.raw.line;
        var range = new monaco.Range(lineNumber, 1, lineNumber, 2);
        return {
            range: range,
            options: {
                stickiness: DebugEditorModel_1.STICKINESS
            }
        };
    };
    DebugEditorModel.prototype.updateBreakpointRanges = function () {
        var e_1, _a;
        this.breakpointRanges.clear();
        try {
            for (var _b = __values(this.breakpointDecorations), _c = _b.next(); !_c.done; _c = _b.next()) {
                var decoration = _c.value;
                var range = this.editor.getModel().getDecorationRange(decoration);
                this.breakpointRanges.set(decoration, range);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    DebugEditorModel.prototype.renderCurrentBreakpoints = function () {
        var decorations = this.createCurrentBreakpointDecorations();
        this.currentBreakpointDecorations = this.deltaDecorations(this.currentBreakpointDecorations, decorations);
    };
    DebugEditorModel.prototype.createCurrentBreakpointDecorations = function () {
        var _this = this;
        var breakpoints = this.sessions.getBreakpoints(this.uri);
        return breakpoints.map(function (breakpoint) { return _this.createCurrentBreakpointDecoration(breakpoint); });
    };
    DebugEditorModel.prototype.createCurrentBreakpointDecoration = function (breakpoint) {
        var lineNumber = breakpoint.line;
        var range = new monaco.Range(lineNumber, 1, lineNumber, 1);
        var options = this.createCurrentBreakpointDecorationOptions(breakpoint);
        return { range: range, options: options };
    };
    DebugEditorModel.prototype.createCurrentBreakpointDecorationOptions = function (breakpoint) {
        if (breakpoint.installed) {
            var decoration = breakpoint.verified ? DebugEditorModel_1.BREAKPOINT_DECORATION : DebugEditorModel_1.BREAKPOINT_UNVERIFIED_DECORATION;
            if (breakpoint.message) {
                return __assign({}, decoration, { glyphMarginHoverMessage: {
                        value: breakpoint.message
                    } });
            }
            return decoration;
        }
        if (breakpoint.enabled) {
            return DebugEditorModel_1.BREAKPOINT_DECORATION;
        }
        return DebugEditorModel_1.BREAKPOINT_DISABLED_DECORATION;
    };
    DebugEditorModel.prototype.updateBreakpoints = function () {
        if (this.areBreakpointsAffected()) {
            var breakpoints = this.createBreakpoints();
            this.breakpoints.setBreakpoints(this.uri, breakpoints);
        }
    };
    DebugEditorModel.prototype.areBreakpointsAffected = function () {
        var e_2, _a;
        if (this.updatingDecorations || !this.editor.getModel()) {
            return false;
        }
        try {
            for (var _b = __values(this.breakpointDecorations), _c = _b.next(); !_c.done; _c = _b.next()) {
                var decoration = _c.value;
                var range = this.editor.getModel().getDecorationRange(decoration);
                var oldRange = this.breakpointRanges.get(decoration);
                if (!range || !range.equalsRange(oldRange)) {
                    return true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return false;
    };
    DebugEditorModel.prototype.createBreakpoints = function () {
        var e_3, _a;
        var uri = this.uri;
        var uriString = uri.toString();
        var breakpoints = new Map();
        try {
            for (var _b = __values(this.breakpointDecorations), _c = _b.next(); !_c.done; _c = _b.next()) {
                var decoration = _c.value;
                var range = this.editor.getModel().getDecorationRange(decoration);
                if (range && !breakpoints.has(range.startLineNumber)) {
                    var line = range.startLineNumber;
                    var oldRange = this.breakpointRanges.get(decoration);
                    var oldBreakpoint = oldRange && this.breakpoints.getBreakpoint(uri, oldRange.startLineNumber);
                    breakpoints.set(line, {
                        uri: uriString,
                        enabled: oldBreakpoint ? oldBreakpoint.enabled : true,
                        raw: {
                            line: line,
                            column: range.startColumn
                        }
                    });
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return __spread(breakpoints.values());
    };
    Object.defineProperty(DebugEditorModel.prototype, "position", {
        get: function () {
            return this._position || this.editor.getPosition();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugEditorModel.prototype, "breakpoint", {
        get: function () {
            return this.getBreakpoint();
        },
        enumerable: true,
        configurable: true
    });
    DebugEditorModel.prototype.getBreakpoint = function (position) {
        if (position === void 0) { position = this.position; }
        return this.sessions.getBreakpoint(this.uri, position.lineNumber);
    };
    DebugEditorModel.prototype.toggleBreakpoint = function () {
        this.doToggleBreakpoint();
    };
    DebugEditorModel.prototype.doToggleBreakpoint = function (position) {
        if (position === void 0) { position = this.position; }
        var breakpoint = this.getBreakpoint(position);
        if (breakpoint) {
            breakpoint.remove();
        }
        else {
            this.breakpoints.addBreakpoint(this.uri, position.lineNumber, position.column);
        }
    };
    DebugEditorModel.prototype.handleMouseDown = function (event) {
        var _this = this;
        if (event.target && event.target.type === monaco.editor.MouseTargetType.GUTTER_GLYPH_MARGIN) {
            if (event.event.rightButton) {
                this._position = event.target.position;
                this.contextMenu.render(DebugEditorModel_1.CONTEXT_MENU, event.event.browserEvent, function () {
                    return setTimeout(function () { return _this._position = undefined; });
                });
            }
            else {
                this.doToggleBreakpoint(event.target.position);
            }
        }
        this.hintBreakpoint(event);
    };
    DebugEditorModel.prototype.handleMouseMove = function (event) {
        this.showHover(event);
        this.hintBreakpoint(event);
    };
    DebugEditorModel.prototype.handleMouseLeave = function (event) {
        this.hideHover(event);
        this.deltaHintDecorations([]);
    };
    DebugEditorModel.prototype.hintBreakpoint = function (event) {
        var hintDecorations = this.createHintDecorations(event);
        this.deltaHintDecorations(hintDecorations);
    };
    DebugEditorModel.prototype.deltaHintDecorations = function (hintDecorations) {
        this.hintDecorations = this.deltaDecorations(this.hintDecorations, hintDecorations);
    };
    DebugEditorModel.prototype.createHintDecorations = function (event) {
        if (event.target && event.target.type === monaco.editor.MouseTargetType.GUTTER_GLYPH_MARGIN) {
            var lineNumber = event.target.position.lineNumber;
            if (!!this.sessions.getBreakpoint(this.uri, lineNumber)) {
                return [];
            }
            return [{
                    range: new monaco.Range(lineNumber, 1, lineNumber, 1),
                    options: DebugEditorModel_1.BREAKPOINT_HINT_DECORATION
                }];
        }
        return [];
    };
    DebugEditorModel.prototype.showHover = function (mouseEvent) {
        var targetType = mouseEvent.target.type;
        var stopKey = core_1.isOSX ? 'metaKey' : 'ctrlKey';
        // tslint:disable-next-line:no-any
        if (targetType === monaco.editor.MouseTargetType.CONTENT_WIDGET && mouseEvent.target.detail === this.hover.getId() && !mouseEvent.event[stopKey]) {
            // mouse moved on top of debug hover widget
            return;
        }
        if (targetType === monaco.editor.MouseTargetType.CONTENT_TEXT) {
            this.hover.show({
                selection: mouseEvent.target.range,
                immediate: false
            });
        }
        else {
            this.hover.hide({ immediate: false });
        }
    };
    DebugEditorModel.prototype.hideHover = function (_a) {
        var event = _a.event;
        var rect = this.hover.getDomNode().getBoundingClientRect();
        if (event.posx < rect.left || event.posx > rect.right || event.posy < rect.top || event.posy > rect.bottom) {
            this.hover.hide({ immediate: false });
        }
    };
    DebugEditorModel.prototype.deltaDecorations = function (oldDecorations, newDecorations) {
        this.updatingDecorations = true;
        try {
            return this.editor.getModel().deltaDecorations(oldDecorations, newDecorations);
        }
        finally {
            this.updatingDecorations = false;
        }
    };
    var DebugEditorModel_1;
    DebugEditorModel.CONTEXT_MENU = ['debug-editor-context-menu'];
    DebugEditorModel.STICKINESS = monaco.editor.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;
    DebugEditorModel.BREAKPOINT_DECORATION = {
        glyphMarginClassName: 'theia-debug-breakpoint',
        glyphMarginHoverMessage: {
            value: 'Breakpoint'
        },
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.BREAKPOINT_DISABLED_DECORATION = {
        glyphMarginClassName: 'theia-debug-breakpoint-disabled',
        glyphMarginHoverMessage: {
            value: 'Disabled Breakpoint'
        },
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.BREAKPOINT_UNVERIFIED_DECORATION = {
        glyphMarginClassName: 'theia-debug-breakpoint-unverified',
        glyphMarginHoverMessage: {
            value: 'Unverified Breakpoint'
        },
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.BREAKPOINT_HINT_DECORATION = {
        glyphMarginClassName: 'theia-debug-breakpoint-hint',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.TOP_STACK_FRAME_MARGIN = {
        glyphMarginClassName: 'theia-debug-top-stack-frame',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.FOCUSED_STACK_FRAME_MARGIN = {
        glyphMarginClassName: 'theia-debug-focused-stack-frame',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.TOP_STACK_FRAME_DECORATION = {
        isWholeLine: true,
        className: 'theia-debug-top-stack-frame-line',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.TOP_STACK_FRAME_EXCEPTION_DECORATION = {
        isWholeLine: true,
        className: 'theia-debug-top-stack-frame-exception-line',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    DebugEditorModel.TOP_STACK_FRAME_INLINE_DECORATION = {
        beforeContentClassName: 'theia-debug-top-stack-frame-column'
    };
    DebugEditorModel.FOCUSED_STACK_FRAME_DECORATION = {
        isWholeLine: true,
        className: 'theia-debug-focused-stack-frame-line',
        stickiness: DebugEditorModel_1.STICKINESS
    };
    __decorate([
        inversify_1.inject(debug_hover_widget_1.DebugHoverWidget),
        __metadata("design:type", debug_hover_widget_1.DebugHoverWidget)
    ], DebugEditorModel.prototype, "hover", void 0);
    __decorate([
        inversify_1.inject(debug_editor_1.DebugEditor),
        __metadata("design:type", Object)
    ], DebugEditorModel.prototype, "editor", void 0);
    __decorate([
        inversify_1.inject(breakpoint_manager_1.BreakpointManager),
        __metadata("design:type", breakpoint_manager_1.BreakpointManager)
    ], DebugEditorModel.prototype, "breakpoints", void 0);
    __decorate([
        inversify_1.inject(debug_session_manager_1.DebugSessionManager),
        __metadata("design:type", debug_session_manager_1.DebugSessionManager)
    ], DebugEditorModel.prototype, "sessions", void 0);
    __decorate([
        inversify_1.inject(browser_1.ContextMenuRenderer),
        __metadata("design:type", Object)
    ], DebugEditorModel.prototype, "contextMenu", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DebugEditorModel.prototype, "init", null);
    DebugEditorModel = DebugEditorModel_1 = __decorate([
        inversify_1.injectable()
    ], DebugEditorModel);
    return DebugEditorModel;
}());
exports.DebugEditorModel = DebugEditorModel;
//# sourceMappingURL=debug-editor-model.js.map