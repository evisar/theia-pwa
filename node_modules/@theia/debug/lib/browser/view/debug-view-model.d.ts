/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Disposable, DisposableCollection, Event, Emitter } from '@theia/core/lib/common';
import URI from '@theia/core/lib/common/uri';
import { DebugSession, DebugState } from '../debug-session';
import { DebugSessionManager } from '../debug-session-manager';
import { DebugThread } from '../model/debug-thread';
import { DebugStackFrame } from '../model/debug-stack-frame';
import { DebugBreakpoint } from '../model/debug-breakpoint';
export declare const DebugViewOptions: unique symbol;
export interface DebugViewOptions {
    session?: DebugSession;
}
export declare class DebugViewModel implements Disposable {
    protected readonly onDidChangeEmitter: Emitter<void>;
    readonly onDidChange: Event<void>;
    protected fireDidChange(): void;
    protected readonly onDidChangeBreakpointsEmitter: Emitter<URI>;
    readonly onDidChangeBreakpoints: Event<URI>;
    protected fireDidChangeBreakpoints(uri: URI): void;
    protected readonly toDispose: DisposableCollection;
    protected readonly options: DebugViewOptions;
    protected readonly manager: DebugSessionManager;
    protected readonly _sessions: Set<DebugSession>;
    readonly sessions: IterableIterator<DebugSession>;
    readonly sessionCount: number;
    push(session: DebugSession): void;
    delete(session: DebugSession): boolean;
    readonly session: DebugSession | undefined;
    readonly id: string;
    readonly label: string;
    has(session: DebugSession | undefined): session is DebugSession;
    protected init(): void;
    dispose(): void;
    currentSession: DebugSession | undefined;
    readonly state: DebugState;
    readonly currentThread: DebugThread | undefined;
    readonly currentFrame: DebugStackFrame | undefined;
    readonly breakpoints: DebugBreakpoint[];
    start(): Promise<void>;
    restart(): Promise<void>;
}
//# sourceMappingURL=debug-view-model.d.ts.map