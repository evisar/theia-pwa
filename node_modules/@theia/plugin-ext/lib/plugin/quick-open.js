"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var plugin_api_1 = require("../api/plugin-api");
var cancellation_1 = require("@theia/core/lib/common/cancellation");
var async_util_1 = require("../api/async-util");
var async_util_2 = require("../api/async-util");
var QuickOpenExtImpl = /** @class */ (function () {
    function QuickOpenExtImpl(rpc) {
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.QUICK_OPEN_MAIN);
    }
    QuickOpenExtImpl.prototype.$onItemSelected = function (handle) {
        if (this.selectItemHandler) {
            this.selectItemHandler(handle);
        }
    };
    QuickOpenExtImpl.prototype.$validateInput = function (input) {
        if (this.validateInputHandler) {
            return Promise.resolve(this.validateInputHandler(input));
        }
        return undefined;
    };
    // tslint:disable-next-line:max-line-length
    QuickOpenExtImpl.prototype.showQuickPick = function (promiseOrItems, options, token) {
        var _this = this;
        if (token === void 0) { token = cancellation_1.CancellationToken.None; }
        this.selectItemHandler = undefined;
        var itemPromise = Promise.resolve(promiseOrItems);
        var widgetPromise = this.proxy.$show({
            canSelectMany: options && options.canPickMany,
            placeHolder: options && options.placeHolder,
            autoFocus: { autoFocusFirstEntry: true },
            matchOnDescription: options && options.machOnDescription,
            matchOnDetail: options && options.machOnDetail,
            ignoreFocusLost: options && options.ignoreFocusOut
        });
        var promise = async_util_1.anyPromise([widgetPromise, itemPromise]).then(function (values) {
            if (values.key === 0) {
                return undefined;
            }
            return itemPromise.then(function (items) {
                var pickItems = [];
                for (var handle = 0; handle < items.length; handle++) {
                    var item = items[handle];
                    var label = void 0;
                    var description = void 0;
                    var detail = void 0;
                    var picked = void 0;
                    if (typeof item === 'string') {
                        label = item;
                    }
                    else {
                        (label = item.label, description = item.description, detail = item.detail, picked = item.picked);
                    }
                    pickItems.push({
                        label: label,
                        description: description,
                        handle: handle,
                        detail: detail,
                        picked: picked
                    });
                }
                if (options && typeof options.onDidSelectItem === 'function') {
                    _this.selectItemHandler = function (handle) {
                        options.onDidSelectItem(items[handle]);
                    };
                }
                _this.proxy.$setItems(pickItems);
                return widgetPromise.then(function (handle) {
                    if (typeof handle === 'number') {
                        return items[handle];
                    }
                    else if (Array.isArray(handle)) {
                        return handle.map(function (h) { return items[h]; });
                    }
                    return undefined;
                });
            }, function (err) {
                _this.proxy.$setError(err);
                return Promise.reject(err);
            });
        });
        return async_util_2.hookCancellationToken(token, promise);
    };
    QuickOpenExtImpl.prototype.showInput = function (options, token) {
        if (token === void 0) { token = cancellation_1.CancellationToken.None; }
        this.validateInputHandler = options && options.validateInput;
        if (!options) {
            options = {
                placeHolder: ''
            };
        }
        var promise = this.proxy.$input(options, typeof this.validateInputHandler === 'function');
        return async_util_2.hookCancellationToken(token, promise);
    };
    return QuickOpenExtImpl;
}());
exports.QuickOpenExtImpl = QuickOpenExtImpl;
//# sourceMappingURL=quick-open.js.map