"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var event_1 = require("@theia/core/lib/common/event");
var types_impl_1 = require("../types-impl");
var plugin_api_1 = require("../../api/plugin-api");
var TreeViewsExtImpl = /** @class */ (function () {
    function TreeViewsExtImpl(rpc, commandRegistry) {
        this.commandRegistry = commandRegistry;
        this.treeViews = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.TREE_VIEWS_MAIN);
    }
    TreeViewsExtImpl.prototype.registerTreeDataProvider = function (treeViewId, treeDataProvider) {
        var _this = this;
        var treeView = this.createTreeView(treeViewId, { treeDataProvider: treeDataProvider });
        return types_impl_1.Disposable.create(function () {
            _this.treeViews.delete(treeViewId);
            treeView.dispose();
        });
    };
    TreeViewsExtImpl.prototype.createTreeView = function (treeViewId, options) {
        var _this = this;
        if (!options || !options.treeDataProvider) {
            throw new Error('Options with treeDataProvider is mandatory');
        }
        var treeView = new TreeViewExtImpl(treeViewId, options.treeDataProvider, this.proxy, this.commandRegistry);
        this.treeViews.set(treeViewId, treeView);
        return {
            get onDidExpandElement() {
                return treeView.onDidExpandElement;
            },
            get onDidCollapseElement() {
                return treeView.onDidCollapseElement;
            },
            get selection() {
                return treeView.selectedElements;
            },
            reveal: function (element, selectionOptions) {
                return treeView.reveal(element, selectionOptions);
            },
            dispose: function () {
                _this.treeViews.delete(treeViewId);
                treeView.dispose();
            }
        };
    };
    TreeViewsExtImpl.prototype.$getChildren = function (treeViewId, treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var treeView;
            return __generator(this, function (_a) {
                treeView = this.treeViews.get(treeViewId);
                if (!treeView) {
                    throw new Error('No tree view with id' + treeViewId);
                }
                return [2 /*return*/, treeView.getChildren(treeItemId)];
            });
        });
    };
    TreeViewsExtImpl.prototype.$setExpanded = function (treeViewId, treeItemId, expanded) {
        return __awaiter(this, void 0, void 0, function () {
            var treeView;
            return __generator(this, function (_a) {
                treeView = this.treeViews.get(treeViewId);
                if (!treeView) {
                    throw new Error('No tree view with id' + treeViewId);
                }
                if (expanded) {
                    return [2 /*return*/, treeView.onExpanded(treeItemId)];
                }
                else {
                    return [2 /*return*/, treeView.onCollapsed(treeItemId)];
                }
                return [2 /*return*/];
            });
        });
    };
    TreeViewsExtImpl.prototype.$setSelection = function (treeViewId, treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var treeView;
            return __generator(this, function (_a) {
                treeView = this.treeViews.get(treeViewId);
                if (!treeView) {
                    throw new Error('No tree view with id' + treeViewId);
                }
                treeView.onSelectionChanged(treeItemId);
                return [2 /*return*/];
            });
        });
    };
    return TreeViewsExtImpl;
}());
exports.TreeViewsExtImpl = TreeViewsExtImpl;
var TreeViewExtImpl = /** @class */ (function (_super) {
    __extends(TreeViewExtImpl, _super);
    function TreeViewExtImpl(treeViewId, treeDataProvider, proxy, commandRegistry) {
        var _this = _super.call(this, function () {
            _this.dispose();
        }) || this;
        _this.treeViewId = treeViewId;
        _this.treeDataProvider = treeDataProvider;
        _this.proxy = proxy;
        _this.commandRegistry = commandRegistry;
        _this.onDidExpandElementEmmiter = new event_1.Emitter();
        _this.onDidExpandElement = _this.onDidExpandElementEmmiter.event;
        _this.onDidCollapseElementEmmiter = new event_1.Emitter();
        _this.onDidCollapseElement = _this.onDidCollapseElementEmmiter.event;
        _this.selection = [];
        _this.cache = new Map();
        _this.idCounter = 0;
        proxy.$registerTreeDataProvider(treeViewId);
        if (treeDataProvider.onDidChangeTreeData) {
            treeDataProvider.onDidChangeTreeData(function (e) {
                proxy.$refresh(treeViewId);
            });
        }
        return _this;
    }
    Object.defineProperty(TreeViewExtImpl.prototype, "selectedElements", {
        get: function () { return this.selection; },
        enumerable: true,
        configurable: true
    });
    TreeViewExtImpl.prototype.dispose = function () {
    };
    TreeViewExtImpl.prototype.reveal = function (element, selectionOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var elementId;
            return __generator(this, function (_a) {
                this.cache.forEach(function (el, id) {
                    if (Object.is(el, element)) {
                        elementId = id;
                    }
                });
                if (elementId) {
                    return [2 /*return*/, this.proxy.$reveal(this.treeViewId, elementId)];
                }
                return [2 /*return*/];
            });
        });
    };
    /** Note, the generated ID must include the item's `contextValue`. */
    TreeViewExtImpl.prototype.generateId = function (item) {
        return "item-" + this.idCounter++ + "/" + (item.contextValue || '');
    };
    TreeViewExtImpl.prototype.getChildren = function (treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedElement, result, treeItems_1, promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedElement = this.cache.get(treeItemId);
                        return [4 /*yield*/, this.treeDataProvider.getChildren(cachedElement)];
                    case 1:
                        result = _a.sent();
                        if (!result) return [3 /*break*/, 3];
                        treeItems_1 = [];
                        promises = result.map(function (value) { return __awaiter(_this, void 0, void 0, function () {
                            var treeItem, id, label, icon, treeViewItem;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.treeDataProvider.getTreeItem(value)];
                                    case 1:
                                        treeItem = _a.sent();
                                        id = this.generateId(treeItem);
                                        // Add element to the cache
                                        this.cache.set(id, value);
                                        label = treeItem.label;
                                        // Use resource URI if label is not set
                                        if (!label && treeItem.resourceUri) {
                                            label = treeItem.resourceUri.path.toString();
                                            label = decodeURIComponent(label);
                                            if (label.indexOf('/') >= 0) {
                                                label = label.substring(label.lastIndexOf('/') + 1);
                                            }
                                        }
                                        // Use item ID if item label is still not set
                                        if (!label) {
                                            label = id;
                                        }
                                        icon = undefined;
                                        if (typeof treeItem.iconPath === 'string') {
                                            icon = treeItem.iconPath;
                                        }
                                        treeViewItem = {
                                            id: id,
                                            label: label,
                                            icon: icon,
                                            tooltip: treeItem.tooltip,
                                            collapsibleState: treeItem.collapsibleState
                                        };
                                        treeItems_1.push(treeViewItem);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, treeItems_1];
                    case 3: return [2 /*return*/, undefined];
                }
            });
        });
    };
    TreeViewExtImpl.prototype.onExpanded = function (treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedElement;
            return __generator(this, function (_a) {
                cachedElement = this.cache.get(treeItemId);
                // fire an event
                if (cachedElement) {
                    this.onDidExpandElementEmmiter.fire({
                        element: cachedElement
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    TreeViewExtImpl.prototype.onCollapsed = function (treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedElement;
            return __generator(this, function (_a) {
                cachedElement = this.cache.get(treeItemId);
                // fire an event
                if (cachedElement) {
                    this.onDidCollapseElementEmmiter.fire({
                        element: cachedElement
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    TreeViewExtImpl.prototype.onSelectionChanged = function (treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedElement, treeItem;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedElement = this.cache.get(treeItemId);
                        if (!cachedElement) return [3 /*break*/, 2];
                        this.selection = [cachedElement];
                        return [4 /*yield*/, this.treeDataProvider.getTreeItem(cachedElement)];
                    case 1:
                        treeItem = _a.sent();
                        if (treeItem.command) {
                            this.commandRegistry.executeCommand(treeItem.command.id, treeItem.command.arguments ?
                                treeItem.command.arguments : []);
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return TreeViewExtImpl;
}(types_impl_1.Disposable));
//# sourceMappingURL=tree-views.js.map