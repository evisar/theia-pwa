"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var types_impl_1 = require("../types-impl");
var Converter = require("../type-converters");
var types_1 = require("../../common/types");
var token_provider_1 = require("../token-provider");
var CompletionAdapter = /** @class */ (function () {
    function CompletionAdapter(delegate, documents) {
        this.delegate = delegate;
        this.documents = documents;
        this.cacheId = 0;
        this.cache = new Map();
    }
    CompletionAdapter.prototype.provideCompletionItems = function (resource, position, context) {
        var _this = this;
        var document = this.documents.getDocumentData(resource);
        if (!document) {
            return Promise.reject(new Error("There are no document for  " + resource));
        }
        var doc = document.document;
        var pos = Converter.toPosition(position);
        return Promise.resolve(this.delegate.provideCompletionItems(doc, pos, token_provider_1.createToken(), context)).then(function (value) {
            var id = _this.cacheId++;
            var result = {
                id: id,
                completions: [],
            };
            var list;
            if (!value) {
                return undefined;
            }
            else if (Array.isArray(value)) {
                list = new types_impl_1.CompletionList(value);
            }
            else {
                list = value;
                result.incomplete = list.isIncomplete;
            }
            var wordRangeBeforePos = (doc.getWordRangeAtPosition(pos) || new types_impl_1.Range(pos, pos))
                .with({ end: pos });
            for (var i = 0; i < list.items.length; i++) {
                var suggestion = _this.convertCompletionItem(list.items[i], pos, wordRangeBeforePos, i, id);
                if (suggestion) {
                    result.completions.push(suggestion);
                }
            }
            _this.cache.set(id, list.items);
            return result;
        });
    };
    CompletionAdapter.prototype.resolveCompletionItem = function (resource, position, completion) {
        var _this = this;
        if (typeof this.delegate.resolveCompletionItem !== 'function') {
            return Promise.resolve(completion);
        }
        var _a = completion, parentId = _a.parentId, id = _a.id;
        var item = this.cache.has(parentId) && this.cache.get(parentId)[id];
        if (!item) {
            return Promise.resolve(completion);
        }
        return Promise.resolve(this.delegate.resolveCompletionItem(item, undefined)).then(function (resolvedItem) {
            if (!resolvedItem) {
                return completion;
            }
            var doc = _this.documents.getDocumentData(resource).document;
            var pos = Converter.toPosition(position);
            var wordRangeBeforePos = (doc.getWordRangeAtPosition(pos) || new types_impl_1.Range(pos, pos)).with({ end: pos });
            var newCompletion = _this.convertCompletionItem(resolvedItem, pos, wordRangeBeforePos, id, parentId);
            if (newCompletion) {
                types_1.mixin(completion, newCompletion, true);
            }
            return completion;
        });
    };
    CompletionAdapter.prototype.releaseCompletionItems = function (id) {
        this.cache.delete(id);
        return Promise.resolve();
    };
    CompletionAdapter.prototype.convertCompletionItem = function (item, position, defaultRange, id, parentId) {
        if (typeof item.label !== 'string' || item.label.length === 0) {
            console.warn('Invalid Completion Item -> must have at least a label');
            return undefined;
        }
        var result = {
            id: id,
            parentId: parentId,
            label: item.label,
            type: Converter.fromCompletionItemKind(item.kind),
            detail: item.detail,
            documentation: item.documentation,
            filterText: item.filterText,
            sortText: item.sortText,
            preselect: item.preselect,
            insertText: '',
            additionalTextEdits: item.additionalTextEdits && item.additionalTextEdits.map(Converter.fromTextEdit),
            command: undefined,
            commitCharacters: item.commitCharacters
        };
        if (typeof item.insertText === 'string') {
            result.insertText = item.insertText;
            result.snippetType = 'internal';
        }
        else if (item.insertText instanceof types_impl_1.SnippetString) {
            result.insertText = item.insertText.value;
            result.snippetType = 'textmate';
        }
        else {
            result.insertText = item.label;
            result.snippetType = 'internal';
        }
        var range;
        if (item.range) {
            range = item.range;
        }
        else {
            range = defaultRange;
        }
        result.overwriteBefore = position.character - range.start.character;
        result.overwriteAfter = range.end.character - position.character;
        if (!range.isSingleLine || range.start.line !== position.line) {
            console.warn('Invalid Completion Item -> must be single line and on the same line');
            return undefined;
        }
        return result;
    };
    CompletionAdapter.hasResolveSupport = function (provider) {
        return typeof provider.resolveCompletionItem === 'function';
    };
    return CompletionAdapter;
}());
exports.CompletionAdapter = CompletionAdapter;
//# sourceMappingURL=completion.js.map