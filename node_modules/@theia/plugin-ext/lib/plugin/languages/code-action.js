"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Converter = require("../type-converters");
var token_provider_1 = require("../token-provider");
var types_impl_1 = require("../types-impl");
var CodeActionAdapter = /** @class */ (function () {
    function CodeActionAdapter(provider, document, diagnostics, pluginId) {
        this.provider = provider;
        this.document = document;
        this.diagnostics = diagnostics;
        this.pluginId = pluginId;
    }
    CodeActionAdapter.prototype.provideCodeAction = function (resource, rangeOrSelection, context) {
        var _this = this;
        var e_1, _a;
        var document = this.document.getDocumentData(resource);
        if (!document) {
            return Promise.reject(new Error("There are no document for " + resource));
        }
        var doc = document.document;
        var ran = CodeActionAdapter._isSelection(rangeOrSelection)
            ? Converter.toSelection(rangeOrSelection)
            : Converter.toRange(rangeOrSelection);
        var allDiagnostics = [];
        try {
            for (var _b = __values(this.diagnostics.getDiagnostics(resource)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var diagnostic = _c.value;
                if (ran.intersection(diagnostic.range)) {
                    allDiagnostics.push(diagnostic);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var codeActionContext = {
            diagnostics: allDiagnostics,
            only: context.only ? new types_impl_1.CodeActionKind(context.only) : undefined
        };
        return Promise.resolve(this.provider.provideCodeActions(doc, ran, codeActionContext, token_provider_1.createToken())).then(function (commandsOrActions) {
            var e_2, _a;
            if (!Array.isArray(commandsOrActions) || commandsOrActions.length === 0) {
                return undefined;
            }
            var result = [];
            try {
                for (var commandsOrActions_1 = __values(commandsOrActions), commandsOrActions_1_1 = commandsOrActions_1.next(); !commandsOrActions_1_1.done; commandsOrActions_1_1 = commandsOrActions_1.next()) {
                    var candidate = commandsOrActions_1_1.value;
                    if (!candidate) {
                        continue;
                    }
                    if (CodeActionAdapter._isCommand(candidate)) {
                        result.push({
                            title: candidate.label || '',
                            command: Converter.toInternalCommand(candidate)
                        });
                    }
                    else {
                        if (codeActionContext.only) {
                            if (!candidate.kind) {
                                /* tslint:disable-next-line:max-line-length */
                                console.warn(_this.pluginId + " - Code actions of kind '" + codeActionContext.only.value + "' requested but returned code action does not have a 'kind'. Code action will be dropped. Please set 'CodeAction.kind'.");
                            }
                            else if (!codeActionContext.only.contains(candidate.kind)) {
                                /* tslint:disable-next-line:max-line-length */
                                console.warn(_this.pluginId + " - Code actions of kind '" + codeActionContext.only.value + "' requested but returned code action is of kind '" + candidate.kind.value + "'. Code action will be dropped. Please check 'CodeActionContext.only' to only return requested code action.");
                            }
                        }
                        result.push({
                            title: candidate.title,
                            command: candidate.command && Converter.toInternalCommand(candidate.command),
                            diagnostics: candidate.diagnostics && candidate.diagnostics.map(Converter.convertDiagnosticToMarkerData),
                            edit: candidate.edit && Converter.fromWorkspaceEdit(candidate.edit),
                            kind: candidate.kind && candidate.kind.value
                        });
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (commandsOrActions_1_1 && !commandsOrActions_1_1.done && (_a = commandsOrActions_1.return)) _a.call(commandsOrActions_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return result;
        });
    };
    // tslint:disable-next-line:no-any
    CodeActionAdapter._isCommand = function (smth) {
        return typeof smth.id === 'string';
    };
    // tslint:disable-next-line:no-any
    CodeActionAdapter._isSelection = function (obj) {
        return (obj
            && (typeof obj.selectionStartLineNumber === 'number')
            && (typeof obj.selectionStartColumn === 'number')
            && (typeof obj.positionLineNumber === 'number')
            && (typeof obj.positionColumn === 'number'));
    };
    return CodeActionAdapter;
}());
exports.CodeActionAdapter = CodeActionAdapter;
//# sourceMappingURL=code-action.js.map