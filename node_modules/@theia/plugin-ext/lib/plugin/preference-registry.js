"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-any */
var event_1 = require("@theia/core/lib/common/event");
var plugin_api_1 = require("../api/plugin-api");
var types_1 = require("../common/types");
var cloneDeep = require("lodash.clonedeep");
// tslint:disable-next-line:no-any
function lookUp(tree, key) {
    if (!key) {
        return;
    }
    var parts = key.split('.');
    var node = tree;
    for (var i = 0; node && i < parts.length; i++) {
        node = node[parts[i]];
    }
    return node;
}
var PreferenceRegistryExtImpl = /** @class */ (function () {
    function PreferenceRegistryExtImpl(rpc) {
        this._onDidChangeConfiguration = new event_1.Emitter();
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.PREFERENCE_REGISTRY_MAIN);
    }
    // tslint:disable-next-line:no-any
    PreferenceRegistryExtImpl.prototype.init = function (data) {
        this._preferences = this.parse(data);
    };
    // tslint:disable-next-line:no-any
    PreferenceRegistryExtImpl.prototype.$acceptConfigurationChanged = function (data, eventData) {
        this.init(data);
        this._onDidChangeConfiguration.fire(this.toConfigurationChangeEvent(eventData));
    };
    PreferenceRegistryExtImpl.prototype.getConfiguration = function (section, resource, extensionId) {
        var _this = this;
        var preferences = this.toReadonlyValue(section
            ? lookUp(this._preferences, section)
            : this._preferences);
        var configuration = {
            has: function (key) {
                return typeof lookUp(preferences, key) !== 'undefined';
            },
            get: function (key, defaultValue) {
                var result = lookUp(preferences, key);
                if (typeof result === 'undefined') {
                    return defaultValue;
                }
                else {
                    var clonedConfig_1 = undefined;
                    var cloneOnWriteProxy_1 = function (target, accessor) {
                        var clonedTarget = undefined;
                        var cloneTarget = function () {
                            clonedConfig_1 = clonedConfig_1 ? clonedConfig_1 : cloneDeep(preferences);
                            clonedTarget = clonedTarget ? cloneTarget : lookUp(clonedConfig_1, accessor);
                        };
                        if (!types_1.isObject(target)) {
                            return target;
                        }
                        return new Proxy(target, {
                            get: function (targ, prop) {
                                if (typeof prop === 'string' && prop.toLowerCase() === 'tojson') {
                                    cloneTarget();
                                    return function () { return clonedTarget; };
                                }
                                if (clonedConfig_1) {
                                    clonedTarget = cloneTarget ? cloneTarget : lookUp(clonedConfig_1, accessor);
                                    return clonedTarget[prop];
                                }
                                var res = targ[prop];
                                if (typeof prop === 'string') {
                                    return cloneOnWriteProxy_1(res, accessor + "." + prop);
                                }
                                return res;
                            },
                            set: function (targ, prop, val) {
                                cloneTarget();
                                clonedTarget[prop] = val;
                                return true;
                            },
                            deleteProperty: function (targ, prop) {
                                cloneTarget();
                                delete clonedTarget[prop];
                                return true;
                            },
                            defineProperty: function (targ, prop, descr) {
                                cloneTarget();
                                Object.defineProperty(clonedTarget, prop, descr);
                                return true;
                            }
                        });
                    };
                    return cloneOnWriteProxy_1(result, key);
                }
            },
            update: function (key, value, arg) {
                key = section ? section + "." + key : key;
                if (typeof value !== 'undefined') {
                    return _this.proxy.$updateConfigurationOption(arg, key, value, resource);
                }
                else {
                    return _this.proxy.$removeConfigurationOption(arg, key, resource);
                }
            },
            inspect: function (key) {
                throw new Error('Not implemented yet.');
            }
        };
        return configuration;
    };
    PreferenceRegistryExtImpl.prototype.toReadonlyValue = function (data) {
        var readonlyProxy = function (target) { return types_1.isObject(target)
            ? new Proxy(target, {
                get: function (targ, prop) { return readonlyProxy(targ[prop]); },
                set: function (targ, prop, val) {
                    throw new Error("TypeError: Cannot assign to read only property '" + prop + "' of object");
                },
                deleteProperty: function (targ, prop) {
                    throw new Error("TypeError: Cannot delete read only property '" + prop + "' of object");
                },
                defineProperty: function (targ, prop) {
                    throw new Error("TypeError: Cannot define property '" + prop + "' of a readonly object");
                },
                setPrototypeOf: function (targ) {
                    throw new Error('TypeError: Cannot set prototype for a readonly object');
                },
                isExtensible: function () { return false; },
                preventExtensions: function () { return true; }
            })
            : target; };
        return readonlyProxy(data);
    };
    PreferenceRegistryExtImpl.prototype.parse = function (data) {
        return Object.keys(data).reduce(function (result, key) {
            var parts = key.split('.');
            var branch = result;
            for (var i = 0; i < parts.length; i++) {
                if (i === parts.length - 1) {
                    branch[parts[i]] = data[key];
                    continue;
                }
                if (!branch[parts[i]]) {
                    branch[parts[i]] = {};
                }
                branch = branch[parts[i]];
            }
            return result;
        }, {});
    };
    PreferenceRegistryExtImpl.prototype.toConfigurationChangeEvent = function (eventData) {
        return Object.freeze({
            affectsConfiguration: function (section, uri) {
                var tree = eventData.preferenceName
                    .split('.')
                    .reverse()
                    .reduce(function (prevValue, curValue) {
                    var _a;
                    return (_a = {}, _a[curValue] = prevValue, _a);
                }, eventData.newValue);
                return !!lookUp(tree, section);
            }
        });
    };
    return PreferenceRegistryExtImpl;
}());
exports.PreferenceRegistryExtImpl = PreferenceRegistryExtImpl;
//# sourceMappingURL=preference-registry.js.map