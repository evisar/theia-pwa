import { Disposable } from '../../types-impl';
import { Breakpoint } from '../../../api/model';
import { RPCProtocol } from '../../../api/rpc-protocol';
import { DebugExt } from '../../../api/plugin-api';
import * as theia from '@theia/plugin';
import { ConnectionExtImpl } from '../../connection-ext';
import { CommandRegistryImpl } from '../../command-registry';
import { DebuggerContribution } from '../../../common';
import { IJSONSchema, IJSONSchemaSnippet } from '@theia/core/lib/common/json-schema';
/**
 * It is supposed to work at node only.
 */
export declare class DebugExtImpl implements DebugExt {
    private sessions;
    private configurationProviders;
    private debuggersContributions;
    private connectionExt;
    private commandRegistryExt;
    private proxy;
    private pluginFolder;
    private readonly onDidChangeBreakpointsEmitter;
    private readonly onDidChangeActiveDebugSessionEmitter;
    private readonly onDidTerminateDebugSessionEmitter;
    private readonly onDidStartDebugSessionEmitter;
    private readonly onDidReceiveDebugSessionCustomEmitter;
    activeDebugSession: theia.DebugSession | undefined;
    activeDebugConsole: theia.DebugConsole;
    breakpoints: theia.Breakpoint[];
    constructor(rpc: RPCProtocol);
    /**
     * Sets dependencies.
     */
    assistedInject(connectionExt: ConnectionExtImpl, commandRegistryExt: CommandRegistryImpl): void;
    /**
     * Registers contributions.
     * @param pluginFolder plugin folder path
     * @param contributions available debuggers contributions
     */
    registerDebuggersContributions(pluginFolder: string, contributions: DebuggerContribution[]): void;
    readonly onDidReceiveDebugSessionCustomEvent: theia.Event<theia.DebugSessionCustomEvent>;
    readonly onDidChangeActiveDebugSession: theia.Event<theia.DebugSession | undefined>;
    readonly onDidTerminateDebugSession: theia.Event<theia.DebugSession>;
    readonly onDidStartDebugSession: theia.Event<theia.DebugSession>;
    readonly onDidChangeBreakpoints: theia.Event<theia.BreakpointsChangeEvent>;
    addBreakpoints(breakpoints: theia.Breakpoint[]): void;
    removeBreakpoints(breakpoints: theia.Breakpoint[]): void;
    startDebugging(folder: theia.WorkspaceFolder | undefined, nameOrConfiguration: string | theia.DebugConfiguration): PromiseLike<boolean>;
    registerDebugConfigurationProvider(debugType: string, provider: theia.DebugConfigurationProvider): Disposable;
    $onSessionCustomEvent(sessionId: string, event: string, body?: any): Promise<void>;
    $sessionDidCreate(sessionId: string): Promise<void>;
    $sessionDidDestroy(sessionId: string): Promise<void>;
    $sessionDidChange(sessionId: string | undefined): Promise<void>;
    $breakpointsDidChange(all: Breakpoint[], added: Breakpoint[], removed: Breakpoint[], changed: Breakpoint[]): Promise<void>;
    $createDebugSession(debugConfiguration: theia.DebugConfiguration): Promise<string>;
    $terminateDebugSession(sessionId: string): Promise<void>;
    $getSupportedLanguages(debugType: string): Promise<string[]>;
    $getSchemaAttributes(debugType: string): Promise<IJSONSchema[]>;
    $getConfigurationSnippets(debugType: string): Promise<IJSONSchemaSnippet[]>;
    $provideDebugConfigurations(debugType: string, workspaceFolderUri: string | undefined): Promise<theia.DebugConfiguration[]>;
    $resolveDebugConfigurations(debugConfiguration: theia.DebugConfiguration, workspaceFolderUri: string | undefined): Promise<theia.DebugConfiguration | undefined>;
    private getExecutable;
    private toWorkspaceFolder;
}
//# sourceMappingURL=debug.d.ts.map