"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../api/plugin-api");
var umd_1 = require("vscode-uri/lib/umd");
var event_1 = require("@theia/core/lib/common/event");
var type_converters_1 = require("./type-converters");
var id_generator_1 = require("../common/id-generator");
var types_impl_1 = require("./types-impl");
var WebviewsExtImpl = /** @class */ (function () {
    function WebviewsExtImpl(rpc) {
        this.idGenerator = new id_generator_1.IdGenerator('v');
        this.webviewPanels = new Map();
        this.serializers = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.WEBVIEWS_MAIN);
    }
    // tslint:disable-next-line:no-any
    WebviewsExtImpl.prototype.$onMessage = function (handle, message) {
        var panel = this.getWebviewPanel(handle);
        if (panel) {
            panel.webview.onMessageEmitter.fire(message);
        }
    };
    WebviewsExtImpl.prototype.$onDidChangeWebviewPanelViewState = function (handle, newState) {
        var panel = this.getWebviewPanel(handle);
        if (panel) {
            var viewColumn = type_converters_1.toViewColumn(newState.position);
            if (panel.active !== newState.active || panel.visible !== newState.visible || panel.viewColumn !== viewColumn) {
                panel.setActive(newState.active);
                panel.setVisible(newState.visible);
                panel.setViewColumn(viewColumn);
                panel.onDidChangeViewStateEmitter.fire({ webviewPanel: panel });
            }
        }
    };
    WebviewsExtImpl.prototype.$onDidDisposeWebviewPanel = function (handle) {
        var panel = this.getWebviewPanel(handle);
        if (panel) {
            panel.dispose();
            this.webviewPanels.delete(handle);
        }
        return Promise.resolve();
    };
    WebviewsExtImpl.prototype.$deserializeWebviewPanel = function (viewId, viewType, title, 
    // tslint:disable-next-line:no-any
    state, position, options) {
        var serializer = this.serializers.get(viewType);
        if (!serializer) {
            return Promise.reject(new Error("No serializer found for '" + viewType + "'"));
        }
        var webview = new WebviewImpl(viewId, this.proxy, options);
        var revivedPanel = new WebviewPanelImpl(viewId, this.proxy, viewType, title, type_converters_1.toViewColumn(position), options, webview);
        this.webviewPanels.set(viewId, revivedPanel);
        return serializer.deserializeWebviewPanel(revivedPanel, state);
    };
    WebviewsExtImpl.prototype.createWebview = function (viewType, title, showOptions, options, extensionLocation) {
        var viewColumn = typeof showOptions === 'object' ? showOptions.viewColumn : showOptions;
        var webviewShowOptions = {
            viewColumn: type_converters_1.fromViewColumn(viewColumn),
            preserveFocus: typeof showOptions === 'object' && !!showOptions.preserveFocus
        };
        var viewId = this.idGenerator.nextId();
        this.proxy.$createWebviewPanel(viewId, viewType, title, webviewShowOptions, options, extensionLocation);
        var webview = new WebviewImpl(viewId, this.proxy, options);
        var panel = new WebviewPanelImpl(viewId, this.proxy, viewType, title, viewColumn, options, webview);
        this.webviewPanels.set(viewId, panel);
        return panel;
    };
    WebviewsExtImpl.prototype.registerWebviewPanelSerializer = function (viewType, serializer) {
        var _this = this;
        if (this.serializers.has(viewType)) {
            throw new Error("Serializer for '" + viewType + "' already registered");
        }
        this.serializers.set(viewType, serializer);
        this.proxy.$registerSerializer(viewType);
        return new types_impl_1.Disposable(function () {
            _this.serializers.delete(viewType);
            _this.proxy.$unregisterSerializer(viewType);
        });
    };
    WebviewsExtImpl.prototype.getWebviewPanel = function (viewId) {
        return this.webviewPanels.get(viewId);
    };
    return WebviewsExtImpl;
}());
exports.WebviewsExtImpl = WebviewsExtImpl;
var WebviewImpl = /** @class */ (function () {
    function WebviewImpl(viewId, proxy, options) {
        this.viewId = viewId;
        this.proxy = proxy;
        this.isDisposed = false;
        // tslint:disable-next-line:no-any
        this.onMessageEmitter = new event_1.Emitter();
        // tslint:disable-next-line:no-any
        this.onDidReceiveMessage = this.onMessageEmitter.event;
        this._options = options;
    }
    WebviewImpl.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this.isDisposed = true;
        this.onMessageEmitter.dispose();
    };
    // tslint:disable-next-line:no-any
    WebviewImpl.prototype.postMessage = function (message) {
        this.checkIsDisposed();
        return this.proxy.$postMessage(this.viewId, message);
    };
    Object.defineProperty(WebviewImpl.prototype, "options", {
        get: function () {
            this.checkIsDisposed();
            return this._options;
        },
        set: function (newOptions) {
            this.checkIsDisposed();
            this.proxy.$setOptions(this.viewId, newOptions);
            this._options = newOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewImpl.prototype, "html", {
        get: function () {
            this.checkIsDisposed();
            return this._html;
        },
        set: function (newHtml) {
            this.checkIsDisposed();
            if (this._html !== newHtml) {
                this._html = newHtml;
                this.proxy.$setHtml(this.viewId, newHtml);
            }
        },
        enumerable: true,
        configurable: true
    });
    WebviewImpl.prototype.checkIsDisposed = function () {
        if (this.isDisposed) {
            throw new Error('This Webview is disposed!');
        }
    };
    return WebviewImpl;
}());
exports.WebviewImpl = WebviewImpl;
var WebviewPanelImpl = /** @class */ (function () {
    function WebviewPanelImpl(viewId, proxy, _viewType, _title, _viewColumn, _options, _webview) {
        this.viewId = viewId;
        this.proxy = proxy;
        this._viewType = _viewType;
        this._title = _title;
        this._viewColumn = _viewColumn;
        this._options = _options;
        this._webview = _webview;
        this.isDisposed = false;
        this._active = true;
        this._visible = true;
        this.onDisposeEmitter = new event_1.Emitter();
        this.onDidDispose = this.onDisposeEmitter.event;
        this.onDidChangeViewStateEmitter = new event_1.Emitter();
        this.onDidChangeViewState = this.onDidChangeViewStateEmitter.event;
    }
    WebviewPanelImpl.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this.isDisposed = true;
        this.onDisposeEmitter.fire(void 0);
        this.proxy.$disposeWebview(this.viewId);
        this._webview.dispose();
        this.onDisposeEmitter.dispose();
        this.onDidChangeViewStateEmitter.dispose();
    };
    Object.defineProperty(WebviewPanelImpl.prototype, "viewType", {
        get: function () {
            this.checkIsDisposed();
            return this._viewType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewPanelImpl.prototype, "title", {
        get: function () {
            this.checkIsDisposed();
            return this._title;
        },
        set: function (newTitle) {
            this.checkIsDisposed();
            if (this._title !== newTitle) {
                this._title = newTitle;
                this.proxy.$setTitle(this.viewId, newTitle);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewPanelImpl.prototype, "iconPath", {
        set: function (iconPath) {
            this.checkIsDisposed();
            if (umd_1.default.isUri(iconPath)) {
                this.proxy.$setIconPath(this.viewId, iconPath.path);
            }
            else {
                this.proxy.$setIconPath(this.viewId, {
                    light: iconPath.light.path,
                    dark: iconPath.dark.path
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewPanelImpl.prototype, "webview", {
        get: function () {
            this.checkIsDisposed();
            return this._webview;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewPanelImpl.prototype, "options", {
        get: function () {
            this.checkIsDisposed();
            return this._options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WebviewPanelImpl.prototype, "viewColumn", {
        get: function () {
            this.checkIsDisposed();
            return this._viewColumn;
        },
        enumerable: true,
        configurable: true
    });
    WebviewPanelImpl.prototype.setViewColumn = function (value) {
        this.checkIsDisposed();
        this._viewColumn = value;
    };
    Object.defineProperty(WebviewPanelImpl.prototype, "active", {
        get: function () {
            this.checkIsDisposed();
            return this._active;
        },
        enumerable: true,
        configurable: true
    });
    WebviewPanelImpl.prototype.setActive = function (value) {
        this.checkIsDisposed();
        this._active = value;
    };
    Object.defineProperty(WebviewPanelImpl.prototype, "visible", {
        get: function () {
            this.checkIsDisposed();
            return this._visible;
        },
        enumerable: true,
        configurable: true
    });
    WebviewPanelImpl.prototype.setVisible = function (value) {
        this.checkIsDisposed();
        this._visible = value;
    };
    WebviewPanelImpl.prototype.reveal = function (viewColumn, preserveFocus) {
        this.checkIsDisposed();
        this.proxy.$reveal(this.viewId, {
            viewColumn: viewColumn ? type_converters_1.fromViewColumn(viewColumn) : undefined,
            preserveFocus: !!preserveFocus
        });
    };
    // tslint:disable-next-line:no-any
    WebviewPanelImpl.prototype.postMessage = function (message) {
        this.checkIsDisposed();
        return this.proxy.$postMessage(this.viewId, message);
    };
    WebviewPanelImpl.prototype.checkIsDisposed = function () {
        if (this.isDisposed) {
            throw new Error('This WebviewPanel is disposed!');
        }
    };
    return WebviewPanelImpl;
}());
exports.WebviewPanelImpl = WebviewPanelImpl;
//# sourceMappingURL=webviews.js.map