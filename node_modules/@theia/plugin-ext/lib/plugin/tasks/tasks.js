"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../../api/plugin-api");
var converter = require("../type-converters");
var types_impl_1 = require("../types-impl");
var task_provider_1 = require("./task-provider");
var event_1 = require("@theia/core/lib/common/event");
var TasksExtImpl = /** @class */ (function () {
    function TasksExtImpl(rpc) {
        this.callId = 0;
        this.adaptersMap = new Map();
        this.taskExecutions = new Map();
        this.onDidExecuteTask = new event_1.Emitter();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.TASKS_MAIN);
    }
    Object.defineProperty(TasksExtImpl.prototype, "onDidStartTask", {
        get: function () {
            return this.onDidExecuteTask.event;
        },
        enumerable: true,
        configurable: true
    });
    TasksExtImpl.prototype.$onDidStartTask = function (execution) {
        this.onDidExecuteTask.fire({
            execution: this.getTaskExecution(execution)
        });
    };
    TasksExtImpl.prototype.registerTaskProvider = function (type, provider) {
        var callId = this.addNewAdapter(new task_provider_1.TaskProviderAdapter(provider));
        this.proxy.$registerTaskProvider(callId, type);
        return this.createDisposable(callId);
    };
    TasksExtImpl.prototype.$provideTasks = function (handle) {
        var adapter = this.adaptersMap.get(handle);
        if (adapter) {
            return adapter.provideTasks();
        }
        else {
            return Promise.reject(new Error('No adapter found to provide tasks'));
        }
    };
    TasksExtImpl.prototype.$resolveTask = function (handle, task) {
        var adapter = this.adaptersMap.get(handle);
        if (adapter) {
            return adapter.resolveTask(task);
        }
        else {
            return Promise.reject(new Error('No adapter found to resolve task'));
        }
    };
    TasksExtImpl.prototype.addNewAdapter = function (adapter) {
        var callId = this.nextCallId();
        this.adaptersMap.set(callId, adapter);
        return callId;
    };
    TasksExtImpl.prototype.nextCallId = function () {
        return this.callId++;
    };
    TasksExtImpl.prototype.createDisposable = function (callId) {
        var _this = this;
        return new types_impl_1.Disposable(function () {
            _this.adaptersMap.delete(callId);
            _this.proxy.$unregister(callId);
        });
    };
    TasksExtImpl.prototype.getTaskExecution = function (execution) {
        var _this = this;
        var executionId = execution.id;
        var result = this.taskExecutions.get(executionId);
        if (result) {
            return result;
        }
        result = {
            task: converter.toTask(execution.task),
            terminate: function () {
                _this.proxy.$terminateTask(executionId);
            }
        };
        this.taskExecutions.set(executionId, result);
        return result;
    };
    return TasksExtImpl;
}());
exports.TasksExtImpl = TasksExtImpl;
//# sourceMappingURL=tasks.js.map