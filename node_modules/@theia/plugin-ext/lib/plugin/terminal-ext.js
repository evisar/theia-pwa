"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../api/plugin-api");
var event_1 = require("@theia/core/lib/common/event");
/**
 * Provides high level terminal plugin api to use in the Theia plugins.
 * This service allow(with help proxy) create and use terminal emulator.
 */
var TerminalServiceExtImpl = /** @class */ (function () {
    function TerminalServiceExtImpl(rpc) {
        this.terminals = new Map();
        this.onDidCloseTerminalEmitter = new event_1.Emitter();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.TERMINAL_MAIN);
    }
    TerminalServiceExtImpl.prototype.createTerminal = function (nameOrOptions, shellPath, shellArgs) {
        var _this = this;
        var options;
        if (typeof nameOrOptions === 'object') {
            options = nameOrOptions;
        }
        else {
            options = {
                name: nameOrOptions,
                shellPath: shellPath,
                shellArgs: shellArgs
            };
        }
        var terminal = new TerminalExtImpl(this.proxy, options.name || 'Terminal');
        terminal.create(options, shellPath, shellArgs);
        terminal.processId.then(function (id) {
            _this.terminals.set(id, terminal);
        });
        return terminal;
    };
    TerminalServiceExtImpl.prototype.$terminalClosed = function (id) {
        var terminal = this.terminals.get(id);
        if (terminal) {
            this.onDidCloseTerminalEmitter.fire(terminal);
        }
    };
    Object.defineProperty(TerminalServiceExtImpl.prototype, "onDidCloseTerminal", {
        get: function () {
            return this.onDidCloseTerminalEmitter.event;
        },
        set: function (event) {
            this.onDidCloseTerminalEmitter.event.apply(event);
        },
        enumerable: true,
        configurable: true
    });
    return TerminalServiceExtImpl;
}());
exports.TerminalServiceExtImpl = TerminalServiceExtImpl;
var TerminalExtImpl = /** @class */ (function () {
    function TerminalExtImpl(proxy, name) {
        this.proxy = proxy;
        this.name = name;
    }
    TerminalExtImpl.prototype.create = function (nameOrOptions, shellPath, shellArgs) {
        this.termProcessId = this.proxy.$createTerminal(nameOrOptions);
    };
    TerminalExtImpl.prototype.sendText = function (text, addNewLine) {
        var _this = this;
        if (addNewLine === void 0) { addNewLine = true; }
        this.termProcessId.then(function (id) { return _this.proxy.$sendText(id, text, addNewLine); });
    };
    TerminalExtImpl.prototype.show = function (preserveFocus) {
        var _this = this;
        this.termProcessId.then(function (id) { return _this.proxy.$show(id); });
    };
    TerminalExtImpl.prototype.hide = function () {
        var _this = this;
        this.termProcessId.then(function (id) { return _this.proxy.$hide(id); });
    };
    TerminalExtImpl.prototype.dispose = function () {
        var _this = this;
        this.termProcessId.then(function (id) { return _this.proxy.$dispose(id); });
    };
    Object.defineProperty(TerminalExtImpl.prototype, "processId", {
        get: function () {
            return this.termProcessId;
        },
        enumerable: true,
        configurable: true
    });
    return TerminalExtImpl;
}());
exports.TerminalExtImpl = TerminalExtImpl;
//# sourceMappingURL=terminal-ext.js.map