"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_impl_1 = require("../types-impl");
var vscolor_const_1 = require("./vscolor-const");
var StatusBarItemImpl = /** @class */ (function () {
    function StatusBarItemImpl(_proxy, alignment, priority) {
        if (alignment === void 0) { alignment = types_impl_1.StatusBarAlignment.Left; }
        if (priority === void 0) { priority = 0; }
        this._proxy = _proxy;
        this._alignment = alignment;
        this._priority = priority;
    }
    Object.defineProperty(StatusBarItemImpl.prototype, "alignment", {
        get: function () {
            return this._alignment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusBarItemImpl.prototype, "priority", {
        get: function () {
            return this._priority;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusBarItemImpl.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (text) {
            this._text = text;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusBarItemImpl.prototype, "tooltip", {
        get: function () {
            return this._tooltip;
        },
        set: function (tooltip) {
            this._tooltip = tooltip;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusBarItemImpl.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (color) {
            this._color = color;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatusBarItemImpl.prototype, "command", {
        get: function () {
            return this._command;
        },
        set: function (command) {
            this._command = command;
            this.update();
        },
        enumerable: true,
        configurable: true
    });
    StatusBarItemImpl.prototype.show = function () {
        this._isVisible = true;
        this.update();
    };
    StatusBarItemImpl.prototype.hide = function () {
        if (this._timeoutHandle) {
            clearTimeout(this._timeoutHandle);
        }
        if (this._messageId) {
            this._proxy.$dispose(this._messageId);
        }
        this._isVisible = false;
    };
    StatusBarItemImpl.prototype.update = function () {
        var _this = this;
        if (!this._isVisible) {
            return;
        }
        if (this._messageId) {
            this._proxy.$dispose(this._messageId);
        }
        if (this._timeoutHandle) {
            clearTimeout(this._timeoutHandle);
        }
        // Defer the update so that multiple changes to setters don't cause a redraw each
        this._timeoutHandle = setTimeout(function () {
            _this._timeoutHandle = undefined;
            // Set to status bar
            _this._proxy.$setMessage(_this.text, _this.priority, _this.alignment, _this.getColor(), _this.tooltip, _this.command).then(function (id) {
                _this._messageId = id;
            });
        }, 0);
    };
    StatusBarItemImpl.prototype.getColor = function () {
        if (typeof this.color !== 'string' && typeof this.color !== 'undefined') {
            var colorId = this.color.id;
            return "var(" + (vscolor_const_1.VS_COLORS[colorId] ? vscolor_const_1.VS_COLORS[colorId] : colorId) + ")";
        }
        return this.color;
    };
    StatusBarItemImpl.prototype.dispose = function () {
        this.hide();
    };
    return StatusBarItemImpl;
}());
exports.StatusBarItemImpl = StatusBarItemImpl;
//# sourceMappingURL=status-bar-item.js.map