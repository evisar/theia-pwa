"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../api/plugin-api");
var types_impl_1 = require("./types-impl");
var umd_1 = require("vscode-uri/lib/umd");
var glob_1 = require("../common/glob");
var completion_1 = require("./languages/completion");
var diagnostics_1 = require("./languages/diagnostics");
var signature_1 = require("./languages/signature");
var hover_1 = require("./languages/hover");
var document_highlight_1 = require("./languages/document-highlight");
var document_formatting_1 = require("./languages/document-formatting");
var range_formatting_1 = require("./languages/range-formatting");
var on_type_formatting_1 = require("./languages/on-type-formatting");
var definition_1 = require("./languages/definition");
var implementation_1 = require("./languages/implementation");
var type_definition_1 = require("./languages/type-definition");
var code_action_1 = require("./languages/code-action");
var link_provider_1 = require("./languages/link-provider");
var lens_1 = require("./languages/lens");
var outline_1 = require("./languages/outline");
var reference_1 = require("./languages/reference");
var workspace_symbol_1 = require("./languages/workspace-symbol");
var folding_1 = require("./languages/folding");
var color_1 = require("./languages/color");
var LanguagesExtImpl = /** @class */ (function () {
    function LanguagesExtImpl(rpc, documents, commands) {
        this.documents = documents;
        this.commands = commands;
        this.callId = 0;
        this.adaptersMap = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.LANGUAGES_MAIN);
        this.diagnostics = new diagnostics_1.Diagnostics(rpc);
    }
    Object.defineProperty(LanguagesExtImpl.prototype, "onDidChangeDiagnostics", {
        get: function () {
            return this.diagnostics.onDidChangeDiagnostics;
        },
        enumerable: true,
        configurable: true
    });
    LanguagesExtImpl.prototype.getLanguages = function () {
        return this.proxy.$getLanguages();
    };
    LanguagesExtImpl.prototype.setLanguageConfiguration = function (language, configuration) {
        var wordPattern = configuration.wordPattern;
        if (wordPattern) {
            this.documents.setWordDefinitionFor(language, wordPattern);
        }
        else {
            // tslint:disable-next-line:no-null-keyword
            this.documents.setWordDefinitionFor(language, null);
        }
        var callId = this.nextCallId();
        var config = {
            brackets: configuration.brackets,
            comments: configuration.comments,
            onEnterRules: serializeEnterRules(configuration.onEnterRules),
            wordPattern: serializeRegExp(configuration.wordPattern),
            indentationRules: serializeIndentation(configuration.indentationRules)
        };
        this.proxy.$setLanguageConfiguration(callId, language, config);
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.nextCallId = function () {
        return this.callId++;
    };
    LanguagesExtImpl.prototype.createDisposable = function (callId) {
        var _this = this;
        return new types_impl_1.Disposable(function () {
            _this.adaptersMap.delete(callId);
            _this.proxy.$unregister(callId);
        });
    };
    LanguagesExtImpl.prototype.addNewAdapter = function (adapter) {
        var callId = this.nextCallId();
        this.adaptersMap.set(callId, adapter);
        return callId;
    };
    // tslint:disable-next-line:no-any
    LanguagesExtImpl.prototype.withAdapter = function (handle, ctor, callback) {
        var adapter = this.adaptersMap.get(handle);
        if (!(adapter instanceof ctor)) {
            return Promise.reject(new Error('no adapter found'));
        }
        return callback(adapter);
    };
    LanguagesExtImpl.prototype.transformDocumentSelector = function (selector) {
        var _this = this;
        if (Array.isArray(selector)) {
            return selector.map(function (sel) { return _this.doTransformDocumentSelector(sel); });
        }
        return [this.doTransformDocumentSelector(selector)];
    };
    LanguagesExtImpl.prototype.doTransformDocumentSelector = function (selector) {
        if (typeof selector === 'string') {
            return {
                $serialized: true,
                language: selector
            };
        }
        if (selector) {
            return {
                $serialized: true,
                language: selector.language,
                scheme: selector.scheme,
                pattern: selector.pattern
            };
        }
        return undefined;
    };
    // ### Completion begin
    LanguagesExtImpl.prototype.$provideCompletionItems = function (handle, resource, position, context) {
        return this.withAdapter(handle, completion_1.CompletionAdapter, function (adapter) { return adapter.provideCompletionItems(umd_1.default.revive(resource), position, context); });
    };
    LanguagesExtImpl.prototype.$resolveCompletionItem = function (handle, resource, position, completion) {
        return this.withAdapter(handle, completion_1.CompletionAdapter, function (adapter) { return adapter.resolveCompletionItem(umd_1.default.revive(resource), position, completion); });
    };
    LanguagesExtImpl.prototype.$releaseCompletionItems = function (handle, id) {
        this.withAdapter(handle, completion_1.CompletionAdapter, function (adapter) { return adapter.releaseCompletionItems(id); });
    };
    LanguagesExtImpl.prototype.registerCompletionItemProvider = function (selector, provider, triggerCharacters) {
        var callId = this.addNewAdapter(new completion_1.CompletionAdapter(provider, this.documents));
        this.proxy.$registerCompletionSupport(callId, this.transformDocumentSelector(selector), triggerCharacters, completion_1.CompletionAdapter.hasResolveSupport(provider));
        return this.createDisposable(callId);
    };
    // ### Completion end
    // ### Definition provider begin
    LanguagesExtImpl.prototype.$provideDefinition = function (handle, resource, position) {
        return this.withAdapter(handle, definition_1.DefinitionAdapter, function (adapter) { return adapter.provideDefinition(umd_1.default.revive(resource), position); });
    };
    LanguagesExtImpl.prototype.registerDefinitionProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new definition_1.DefinitionAdapter(provider, this.documents));
        this.proxy.$registerDefinitionProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    // ### Definition provider end
    // ### Signature help begin
    LanguagesExtImpl.prototype.$provideSignatureHelp = function (handle, resource, position) {
        return this.withAdapter(handle, signature_1.SignatureHelpAdapter, function (adapter) { return adapter.provideSignatureHelp(umd_1.default.revive(resource), position); });
    };
    LanguagesExtImpl.prototype.registerSignatureHelpProvider = function (selector, provider) {
        var triggerCharacters = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            triggerCharacters[_i - 2] = arguments[_i];
        }
        var callId = this.addNewAdapter(new signature_1.SignatureHelpAdapter(provider, this.documents));
        this.proxy.$registerSignatureHelpProvider(callId, this.transformDocumentSelector(selector), triggerCharacters);
        return this.createDisposable(callId);
    };
    // ### Signature help end
    // ### Diagnostics begin
    LanguagesExtImpl.prototype.getDiagnostics = function (resource) {
        return this.diagnostics.getDiagnostics(resource);
    };
    LanguagesExtImpl.prototype.createDiagnosticCollection = function (name) {
        return this.diagnostics.createDiagnosticCollection(name);
    };
    // ### Diagnostics end
    // ### Implementation provider begin
    LanguagesExtImpl.prototype.$provideImplementation = function (handle, resource, position) {
        return this.withAdapter(handle, implementation_1.ImplementationAdapter, function (adapter) { return adapter.provideImplementation(umd_1.default.revive(resource), position); });
    };
    LanguagesExtImpl.prototype.registerImplementationProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new implementation_1.ImplementationAdapter(provider, this.documents));
        this.proxy.$registerImplementationProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    // ### Implementation provider end
    // ### Type Definition provider begin
    LanguagesExtImpl.prototype.$provideTypeDefinition = function (handle, resource, position) {
        return this.withAdapter(handle, type_definition_1.TypeDefinitionAdapter, function (adapter) { return adapter.provideTypeDefinition(umd_1.default.revive(resource), position); });
    };
    LanguagesExtImpl.prototype.registerTypeDefinitionProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new type_definition_1.TypeDefinitionAdapter(provider, this.documents));
        this.proxy.$registerTypeDefinitionProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    // ### Type Definition provider end
    // ### Hover Provider begin
    LanguagesExtImpl.prototype.registerHoverProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new hover_1.HoverAdapter(provider, this.documents));
        this.proxy.$registerHoverProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideHover = function (handle, resource, position) {
        return this.withAdapter(handle, hover_1.HoverAdapter, function (adapter) { return adapter.provideHover(umd_1.default.revive(resource), position); });
    };
    // ### Hover Provider end
    // ### Document Highlight Provider begin
    LanguagesExtImpl.prototype.registerDocumentHighlightProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new document_highlight_1.DocumentHighlightAdapter(provider, this.documents));
        this.proxy.$registerDocumentHighlightProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideDocumentHighlights = function (handle, resource, position) {
        return this.withAdapter(handle, document_highlight_1.DocumentHighlightAdapter, function (adapter) { return adapter.provideDocumentHighlights(umd_1.default.revive(resource), position); });
    };
    // ### Document Highlight Provider end
    // ### WorkspaceSymbol Provider begin
    LanguagesExtImpl.prototype.registerWorkspaceSymbolProvider = function (provider) {
        var callId = this.addNewAdapter(new workspace_symbol_1.WorkspaceSymbolAdapter(provider));
        this.proxy.$registerWorkspaceSymbolProvider(callId);
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideWorkspaceSymbols = function (handle, query) {
        return this.withAdapter(handle, workspace_symbol_1.WorkspaceSymbolAdapter, function (adapter) { return adapter.provideWorkspaceSymbols(query); });
    };
    LanguagesExtImpl.prototype.$resolveWorkspaceSymbol = function (handle, symbol) {
        return this.withAdapter(handle, workspace_symbol_1.WorkspaceSymbolAdapter, function (adapter) { return adapter.resolveWorkspaceSymbol(symbol); });
    };
    // ### WorkspaceSymbol Provider end
    // ### Document Formatting Edit begin
    LanguagesExtImpl.prototype.registerDocumentFormattingEditProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new document_formatting_1.DocumentFormattingAdapter(provider, this.documents));
        this.proxy.$registerDocumentFormattingSupport(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideDocumentFormattingEdits = function (handle, resource, options) {
        return this.withAdapter(handle, document_formatting_1.DocumentFormattingAdapter, function (adapter) { return adapter.provideDocumentFormattingEdits(umd_1.default.revive(resource), options); });
    };
    // ### Document Formatting Edit end
    // ### Document Range Formatting Edit begin
    LanguagesExtImpl.prototype.registerDocumentRangeFormattingEditProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new range_formatting_1.RangeFormattingAdapter(provider, this.documents));
        this.proxy.$registerRangeFormattingProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideDocumentRangeFormattingEdits = function (handle, resource, range, options) {
        return this.withAdapter(handle, range_formatting_1.RangeFormattingAdapter, function (adapter) { return adapter.provideDocumentRangeFormattingEdits(umd_1.default.revive(resource), range, options); });
    };
    // ### Document Range Formatting Edit end
    // ### On Type Formatting Edit begin
    LanguagesExtImpl.prototype.registerOnTypeFormattingEditProvider = function (selector, provider, triggerCharacters) {
        var callId = this.addNewAdapter(new on_type_formatting_1.OnTypeFormattingAdapter(provider, this.documents));
        this.proxy.$registerOnTypeFormattingProvider(callId, this.transformDocumentSelector(selector), triggerCharacters);
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideOnTypeFormattingEdits = function (handle, resource, position, ch, options) {
        return this.withAdapter(handle, on_type_formatting_1.OnTypeFormattingAdapter, function (adapter) { return adapter.provideOnTypeFormattingEdits(umd_1.default.revive(resource), position, ch, options); });
    };
    // ### On Type Formatting Edit end
    // ### Document Link Provider begin
    LanguagesExtImpl.prototype.$provideDocumentLinks = function (handle, resource) {
        return this.withAdapter(handle, link_provider_1.LinkProviderAdapter, function (adapter) { return adapter.provideLinks(umd_1.default.revive(resource)); });
    };
    LanguagesExtImpl.prototype.$resolveDocumentLink = function (handle, link) {
        return this.withAdapter(handle, link_provider_1.LinkProviderAdapter, function (adapter) { return adapter.resolveLink(link); });
    };
    LanguagesExtImpl.prototype.registerLinkProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new link_provider_1.LinkProviderAdapter(provider, this.documents));
        this.proxy.$registerDocumentLinkProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    // ### Document Link Provider end
    // ### Code Actions Provider begin
    LanguagesExtImpl.prototype.registerCodeActionsProvider = function (selector, provider, pluginModel, metadata) {
        var callId = this.addNewAdapter(new code_action_1.CodeActionAdapter(provider, this.documents, this.diagnostics, pluginModel ? pluginModel.id : ''));
        this.proxy.$registerQuickFixProvider(callId, this.transformDocumentSelector(selector), metadata && metadata.providedCodeActionKinds ? metadata.providedCodeActionKinds.map(function (kind) { return kind.value; }) : undefined);
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideCodeActions = function (handle, resource, rangeOrSelection, context) {
        return this.withAdapter(handle, code_action_1.CodeActionAdapter, function (adapter) { return adapter.provideCodeAction(umd_1.default.revive(resource), rangeOrSelection, context); });
    };
    // ### Code Actions Provider end
    // ### Code Lens Provider begin
    LanguagesExtImpl.prototype.registerCodeLensProvider = function (selector, provider) {
        var _this = this;
        var callId = this.addNewAdapter(new lens_1.CodeLensAdapter(provider, this.documents, this.commands.getConverter()));
        var eventHandle = typeof provider.onDidChangeCodeLenses === 'function' ? this.nextCallId() : undefined;
        this.proxy.$registerCodeLensSupport(callId, this.transformDocumentSelector(selector), eventHandle);
        var result = this.createDisposable(callId);
        if (eventHandle !== undefined && provider.onDidChangeCodeLenses) {
            var subscription = provider.onDidChangeCodeLenses(function (e) { return _this.proxy.$emitCodeLensEvent(eventHandle); });
            result = types_impl_1.Disposable.from(result, subscription);
        }
        return result;
    };
    LanguagesExtImpl.prototype.$provideCodeLenses = function (handle, resource) {
        return this.withAdapter(handle, lens_1.CodeLensAdapter, function (adapter) { return adapter.provideCodeLenses(umd_1.default.revive(resource)); });
    };
    LanguagesExtImpl.prototype.$resolveCodeLens = function (handle, resource, symbol) {
        return this.withAdapter(handle, lens_1.CodeLensAdapter, function (adapter) { return adapter.resolveCodeLens(umd_1.default.revive(resource), symbol); });
    };
    // ### Code Lens Provider end
    // ### Code Reference Provider begin
    LanguagesExtImpl.prototype.$provideReferences = function (handle, resource, position, context) {
        return this.withAdapter(handle, reference_1.ReferenceAdapter, function (adapter) { return adapter.provideReferences(umd_1.default.revive(resource), position, context); });
    };
    LanguagesExtImpl.prototype.registerReferenceProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new reference_1.ReferenceAdapter(provider, this.documents));
        this.proxy.$registeReferenceProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    // ### Code Reference Provider end
    // ### Document Symbol Provider begin
    LanguagesExtImpl.prototype.registerDocumentSymbolProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new outline_1.OutlineAdapter(this.documents, provider));
        this.proxy.$registerOutlineSupport(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideDocumentSymbols = function (handle, resource) {
        return this.withAdapter(handle, outline_1.OutlineAdapter, function (adapter) { return adapter.provideDocumentSymbols(umd_1.default.revive(resource)); });
    };
    // ### Document Symbol Provider end
    // ### Color Provider begin
    LanguagesExtImpl.prototype.registerColorProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new color_1.ColorProviderAdapter(this.documents, provider));
        this.proxy.$registerDocumentColorProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideDocumentColors = function (handle, resource) {
        return this.withAdapter(handle, color_1.ColorProviderAdapter, function (adapter) { return adapter.provideColors(umd_1.default.revive(resource)); });
    };
    LanguagesExtImpl.prototype.$provideColorPresentations = function (handle, resource, colorInfo) {
        return this.withAdapter(handle, color_1.ColorProviderAdapter, function (adapter) { return adapter.provideColorPresentations(umd_1.default.revive(resource), colorInfo); });
    };
    // ### Color Provider end
    // ### Folding Range Provider begin
    LanguagesExtImpl.prototype.registerFoldingRangeProvider = function (selector, provider) {
        var callId = this.addNewAdapter(new folding_1.FoldingProviderAdapter(provider, this.documents));
        this.proxy.$registerFoldingRangeProvider(callId, this.transformDocumentSelector(selector));
        return this.createDisposable(callId);
    };
    LanguagesExtImpl.prototype.$provideFoldingRange = function (callId, resource, context) {
        return this.withAdapter(callId, folding_1.FoldingProviderAdapter, function (adapter) { return adapter.provideFoldingRanges(umd_1.default.revive(resource), context); });
    };
    return LanguagesExtImpl;
}());
exports.LanguagesExtImpl = LanguagesExtImpl;
function serializeEnterRules(rules) {
    if (typeof rules === 'undefined' || rules === null) {
        return undefined;
    }
    return rules.map(function (r) {
        return ({
            action: r.action,
            beforeText: serializeRegExp(r.beforeText),
            afterText: serializeRegExp(r.afterText)
        });
    });
}
function serializeRegExp(regexp) {
    if (typeof regexp === 'undefined' || regexp === null) {
        return undefined;
    }
    return {
        pattern: regexp.source,
        flags: (regexp.global ? 'g' : '') + (regexp.ignoreCase ? 'i' : '') + (regexp.multiline ? 'm' : '')
    };
}
function serializeIndentation(indentationRules) {
    if (typeof indentationRules === 'undefined' || indentationRules === null) {
        return undefined;
    }
    return {
        increaseIndentPattern: serializeRegExp(indentationRules.increaseIndentPattern),
        decreaseIndentPattern: serializeRegExp(indentationRules.decreaseIndentPattern),
        indentNextLinePattern: serializeRegExp(indentationRules.indentNextLinePattern),
        unIndentedLinePattern: serializeRegExp(indentationRules.unIndentedLinePattern)
    };
}
function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized) {
    var e_1, _a;
    if (Array.isArray(selector)) {
        var ret = 0;
        try {
            for (var selector_1 = __values(selector), selector_1_1 = selector_1.next(); !selector_1_1.done; selector_1_1 = selector_1.next()) {
                var filter = selector_1_1.value;
                var value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized);
                if (value === 10) {
                    return value;
                }
                if (value > ret) {
                    ret = value;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (selector_1_1 && !selector_1_1.done && (_a = selector_1.return)) _a.call(selector_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return ret;
    }
    else if (typeof selector === 'string') {
        if (!candidateIsSynchronized) {
            return 0;
        }
        if (selector === '*') {
            return 5;
        }
        else if (selector === candidateLanguage) {
            return 10;
        }
        else {
            return 0;
        }
    }
    else if (selector) {
        var language = selector.language, pattern = selector.pattern, scheme = selector.scheme, hasAccessToAllModels = selector.hasAccessToAllModels;
        if (!candidateIsSynchronized && !hasAccessToAllModels) {
            return 0;
        }
        var result = 0;
        if (scheme) {
            if (scheme === candidateUri.scheme) {
                result = 10;
            }
            else if (scheme === '*') {
                result = 5;
            }
            else {
                return 0;
            }
        }
        if (language) {
            if (language === candidateLanguage) {
                result = 10;
            }
            else if (language === '*') {
                result = Math.max(result, 5);
            }
            else {
                return 0;
            }
        }
        if (pattern) {
            if (pattern === candidateUri.fsPath || glob_1.match(pattern, candidateUri.fsPath)) {
                result = 10;
            }
            else {
                return 0;
            }
        }
        return result;
    }
    else {
        return 0;
    }
}
exports.score = score;
//# sourceMappingURL=languages.js.map