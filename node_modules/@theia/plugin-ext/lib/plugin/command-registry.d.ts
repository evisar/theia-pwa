/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import * as theia from '@theia/plugin';
import { CommandRegistryExt } from '../api/plugin-api';
import { RPCProtocol } from '../api/rpc-protocol';
import { Disposable } from './types-impl';
import { Command } from '../api/model';
export declare type Handler = <T>(...args: any[]) => T | PromiseLike<T>;
export declare class CommandRegistryImpl implements CommandRegistryExt {
    private proxy;
    private commands;
    private readonly converter;
    private static EMPTY_HANDLER;
    constructor(rpc: RPCProtocol);
    getConverter(): CommandsConverter;
    registerCommand(command: theia.Command, handler?: Handler): Disposable;
    registerHandler(commandId: string, handler: Handler): Disposable;
    dispose(): void;
    $executeCommand<T>(id: string, args: any[]): PromiseLike<T>;
    executeCommand<T>(id: string, args: any[]): PromiseLike<T | undefined>;
    private executeLocalCommand;
}
/** Converter between internal and api commands. */
export declare class CommandsConverter {
    private readonly commands;
    private readonly delegatingCommandId;
    private cacheId;
    private cache;
    constructor(commands: CommandRegistryImpl);
    toInternal(command: theia.Command | undefined): Command | undefined;
    fromInternal(command: Command | undefined): theia.Command | undefined;
    private executeConvertedCommand;
    /**
     * @returns `false` if the provided object is an array and not empty.
     */
    private static isFalsyOrEmpty;
}
//# sourceMappingURL=command-registry.d.ts.map