"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../api/plugin-api");
var path_1 = require("path");
var disposable_util_1 = require("../common/disposable-util");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var plugin_storage_1 = require("./plugin-storage");
var ActivatedPlugin = /** @class */ (function () {
    function ActivatedPlugin(pluginContext, exports, stopFn) {
        this.pluginContext = pluginContext;
        this.exports = exports;
        this.stopFn = stopFn;
    }
    return ActivatedPlugin;
}());
var PluginManagerExtImpl = /** @class */ (function () {
    function PluginManagerExtImpl(host, envExt, preferencesManager, rpc) {
        this.host = host;
        this.envExt = envExt;
        this.preferencesManager = preferencesManager;
        this.rpc = rpc;
        this.registry = new Map();
        this.activatedPlugins = new Map();
        this.pluginActivationPromises = new Map();
        this.pluginContextsMap = new Map();
    }
    PluginManagerExtImpl.prototype.$stopPlugin = function (contextPath) {
        this.activatedPlugins.forEach(function (plugin) {
            if (plugin.stopFn) {
                plugin.stopFn();
            }
            // dispose any objects
            var pluginContext = plugin.pluginContext;
            if (pluginContext) {
                disposable_util_1.dispose(pluginContext.subscriptions);
            }
        });
        return Promise.resolve();
    };
    PluginManagerExtImpl.prototype.$init = function (pluginInit, configStorage) {
        var e_1, _a, e_2, _b, e_3, _c;
        this.storageProxy = this.rpc.set(plugin_api_1.MAIN_RPC_CONTEXT.STORAGE_EXT, new plugin_storage_1.KeyValueStorageProxy(this.rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.STORAGE_MAIN), pluginInit.globalState, pluginInit.workspaceState));
        // init query parameters
        this.envExt.setQueryParameters(pluginInit.env.queryParams);
        this.preferencesManager.init(pluginInit.preferences);
        if (pluginInit.extApi) {
            this.host.initExtApi(pluginInit.extApi);
        }
        var _d = __read(this.host.init(pluginInit.plugins), 2), plugins = _d[0], foreignPlugins = _d[1];
        try {
            // add foreign plugins
            for (var foreignPlugins_1 = __values(foreignPlugins), foreignPlugins_1_1 = foreignPlugins_1.next(); !foreignPlugins_1_1.done; foreignPlugins_1_1 = foreignPlugins_1.next()) {
                var plugin = foreignPlugins_1_1.value;
                this.registry.set(plugin.model.id, plugin);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (foreignPlugins_1_1 && !foreignPlugins_1_1.done && (_a = foreignPlugins_1.return)) _a.call(foreignPlugins_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // add own plugins, before initialization
            for (var plugins_1 = __values(plugins), plugins_1_1 = plugins_1.next(); !plugins_1_1.done; plugins_1_1 = plugins_1.next()) {
                var plugin = plugins_1_1.value;
                this.registry.set(plugin.model.id, plugin);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (plugins_1_1 && !plugins_1_1.done && (_b = plugins_1.return)) _b.call(plugins_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            // run plugins
            for (var plugins_2 = __values(plugins), plugins_2_1 = plugins_2.next(); !plugins_2_1.done; plugins_2_1 = plugins_2.next()) {
                var plugin = plugins_2_1.value;
                var pluginMain = this.host.loadPlugin(plugin);
                // able to load the plug-in ?
                if (pluginMain !== undefined) {
                    this.startPlugin(plugin, configStorage, pluginMain);
                }
                else {
                    return Promise.reject(new Error('Unable to load the given plugin'));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (plugins_2_1 && !plugins_2_1.done && (_c = plugins_2.return)) _c.call(plugins_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return Promise.resolve();
    };
    PluginManagerExtImpl.prototype.$updateStoragePath = function (path) {
        this.pluginContextsMap.forEach(function (pluginContext, pluginId) {
            pluginContext.storagePath = path ? path_1.join(path, pluginId) : undefined;
        });
        return Promise.resolve();
    };
    // tslint:disable-next-line:no-any
    PluginManagerExtImpl.prototype.startPlugin = function (plugin, configStorage, pluginMain) {
        var subscriptions = [];
        var asAbsolutePath = function (relativePath) { return path_1.join(plugin.pluginFolder, relativePath); };
        var logPath = path_1.join(configStorage.hostLogPath, plugin.model.id); // todo check format
        var storagePath = path_1.join(configStorage.hostStoragePath, plugin.model.id);
        var pluginContext = {
            extensionPath: plugin.pluginFolder,
            globalState: new plugin_storage_1.Memento(plugin.model.id, true, this.storageProxy),
            workspaceState: new plugin_storage_1.Memento(plugin.model.id, false, this.storageProxy),
            subscriptions: subscriptions,
            asAbsolutePath: asAbsolutePath,
            logPath: logPath,
            storagePath: storagePath,
        };
        this.pluginContextsMap.set(plugin.model.id, pluginContext);
        var stopFn = undefined;
        if (typeof pluginMain[plugin.lifecycle.stopMethod] === 'function') {
            stopFn = pluginMain[plugin.lifecycle.stopMethod];
        }
        if (typeof pluginMain[plugin.lifecycle.startMethod] === 'function') {
            var pluginExport = pluginMain[plugin.lifecycle.startMethod].apply(getGlobal(), [pluginContext]);
            this.activatedPlugins.set(plugin.model.id, new ActivatedPlugin(pluginContext, pluginExport, stopFn));
            // resolve activation promise
            if (this.pluginActivationPromises.has(plugin.model.id)) {
                this.pluginActivationPromises.get(plugin.model.id).resolve();
                this.pluginActivationPromises.delete(plugin.model.id);
            }
        }
        else {
            console.log("There is no " + plugin.lifecycle.startMethod + " method on plugin");
        }
    };
    PluginManagerExtImpl.prototype.getAllPlugins = function () {
        return Array.from(this.registry.values());
    };
    PluginManagerExtImpl.prototype.getPluginExport = function (pluginId) {
        var activePlugin = this.activatedPlugins.get(pluginId);
        if (activePlugin) {
            return activePlugin.exports;
        }
        return undefined;
    };
    PluginManagerExtImpl.prototype.getPluginById = function (pluginId) {
        return this.registry.get(pluginId);
    };
    PluginManagerExtImpl.prototype.isRunning = function (pluginId) {
        return this.registry.has(pluginId);
    };
    PluginManagerExtImpl.prototype.activatePlugin = function (pluginId) {
        if (this.pluginActivationPromises.has(pluginId)) {
            return this.pluginActivationPromises.get(pluginId).promise;
        }
        var deferred = new promise_util_1.Deferred();
        this.pluginActivationPromises.set(pluginId, deferred);
        return deferred.promise;
    };
    return PluginManagerExtImpl;
}());
exports.PluginManagerExtImpl = PluginManagerExtImpl;
// for electron
function getGlobal() {
    // tslint:disable-next-line:no-null-keyword
    return typeof self === 'undefined' ? typeof global === 'undefined' ? null : global : self;
}
//# sourceMappingURL=plugin-manager.js.map