/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { PluginManagerExt, PluginInitData, PluginManager, Plugin, PluginAPI, ConfigStorage } from '../api/plugin-api';
import { PluginMetadata } from '../common/plugin-protocol';
import { EnvExtImpl } from './env';
import { PreferenceRegistryExtImpl } from './preference-registry';
import { ExtPluginApi } from '../common/plugin-ext-api-contribution';
import { RPCProtocol } from '../api/rpc-protocol';
export interface PluginHost {
    loadPlugin(plugin: Plugin): any;
    init(data: PluginMetadata[]): [Plugin[], Plugin[]];
    initExtApi(extApi: ExtPluginApi[]): void;
}
export declare class PluginManagerExtImpl implements PluginManagerExt, PluginManager {
    private readonly host;
    private readonly envExt;
    private readonly preferencesManager;
    private readonly rpc;
    private registry;
    private activatedPlugins;
    private pluginActivationPromises;
    private pluginContextsMap;
    private storageProxy;
    constructor(host: PluginHost, envExt: EnvExtImpl, preferencesManager: PreferenceRegistryExtImpl, rpc: RPCProtocol);
    $stopPlugin(contextPath: string): PromiseLike<void>;
    $init(pluginInit: PluginInitData, configStorage: ConfigStorage): PromiseLike<void>;
    $updateStoragePath(path: string | undefined): PromiseLike<void>;
    private startPlugin;
    getAllPlugins(): Plugin[];
    getPluginExport(pluginId: string): PluginAPI | undefined;
    getPluginById(pluginId: string): Plugin | undefined;
    isRunning(pluginId: string): boolean;
    activatePlugin(pluginId: string): PromiseLike<void>;
}
//# sourceMappingURL=plugin-manager.d.ts.map