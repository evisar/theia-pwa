"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../api/plugin-api");
var types_impl_1 = require("./types-impl");
var object_identifier_1 = require("../common/object-identifier");
var CommandRegistryImpl = /** @class */ (function () {
    function CommandRegistryImpl(rpc) {
        this.commands = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.PLUGIN_RPC_CONTEXT.COMMAND_REGISTRY_MAIN);
        this.converter = new CommandsConverter(this);
        // register internal VS Code commands
        this.registerHandler('vscode.previewHtml', CommandRegistryImpl.EMPTY_HANDLER);
    }
    // tslint:disable-next-line:no-any
    CommandRegistryImpl.EMPTY_HANDLER = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return Promise.resolve(undefined);
    };
    CommandRegistryImpl.prototype.getConverter = function () {
        return this.converter;
    };
    CommandRegistryImpl.prototype.registerCommand = function (command, handler) {
        var _this = this;
        if (this.commands.has(command.id)) {
            throw new Error("Command " + command.id + " already exist");
        }
        if (handler) {
            this.commands.set(command.id, handler);
        }
        this.proxy.$registerCommand(command);
        return types_impl_1.Disposable.create(function () {
            _this.commands.delete(command.id);
            _this.proxy.$unregisterCommand(command.id);
        });
    };
    CommandRegistryImpl.prototype.registerHandler = function (commandId, handler) {
        var _this = this;
        if (this.commands.has(commandId)) {
            throw new Error("Command " + commandId + " already has handler");
        }
        this.commands.set(commandId, handler);
        return types_impl_1.Disposable.create(function () {
            _this.commands.delete(commandId);
            _this.proxy.$unregisterCommand(commandId);
        });
    };
    CommandRegistryImpl.prototype.dispose = function () {
        throw new Error('Method not implemented.');
    };
    // tslint:disable-next-line:no-any
    CommandRegistryImpl.prototype.$executeCommand = function (id, args) {
        if (this.commands.has(id)) {
            return this.executeLocalCommand(id, args);
        }
        else {
            return Promise.reject("Command: " + id + " does not exist.");
        }
    };
    // tslint:disable-next-line:no-any
    CommandRegistryImpl.prototype.executeCommand = function (id, args) {
        if (this.commands.has(id)) {
            return this.executeLocalCommand(id, args);
        }
        else {
            return this.proxy.$executeCommand(id, args);
        }
    };
    // tslint:disable-next-line:no-any
    CommandRegistryImpl.prototype.executeLocalCommand = function (id, args) {
        var handler = this.commands.get(id);
        if (handler) {
            return Promise.resolve(handler(args));
        }
        else {
            return Promise.reject(new Error("Command " + id + " doesn't exist"));
        }
    };
    return CommandRegistryImpl;
}());
exports.CommandRegistryImpl = CommandRegistryImpl;
/** Converter between internal and api commands. */
var CommandsConverter = /** @class */ (function () {
    function CommandsConverter(commands) {
        this.commands = commands;
        this.cacheId = 0;
        this.cache = new Map();
        this.delegatingCommandId = "_internal_command_delegation_" + Date.now();
        this.commands.registerHandler(this.delegatingCommandId, this.executeConvertedCommand);
    }
    CommandsConverter.prototype.toInternal = function (command) {
        if (!command || !command.label) {
            return undefined;
        }
        var result = {
            id: command.id,
            title: command.label
        };
        if (command.id && !CommandsConverter.isFalsyOrEmpty(command.arguments)) {
            var id = this.cacheId++;
            object_identifier_1.ObjectIdentifier.mixin(result, id);
            this.cache.set(id, command);
            result.id = this.delegatingCommandId;
            result.arguments = [id];
        }
        if (command.tooltip) {
            result.tooltip = command.tooltip;
        }
        return result;
    };
    CommandsConverter.prototype.fromInternal = function (command) {
        if (!command) {
            return undefined;
        }
        var id = object_identifier_1.ObjectIdentifier.of(command);
        if (typeof id === 'number') {
            return this.cache.get(id);
        }
        else {
            return {
                id: command.id,
                label: command.title,
                arguments: command.arguments
            };
        }
    };
    // tslint:disable-next-line:no-any
    CommandsConverter.prototype.executeConvertedCommand = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var actualCmd = this.cache.get(args[0]);
        if (!actualCmd) {
            return Promise.resolve(undefined);
        }
        return this.commands.executeCommand(actualCmd.id, actualCmd.arguments || []);
    };
    /**
     * @returns `false` if the provided object is an array and not empty.
     */
    // tslint:disable-next-line:no-any
    CommandsConverter.isFalsyOrEmpty = function (obj) {
        // tslint:disable-next-line:no-any
        return !Array.isArray(obj) || obj.length === 0;
    };
    return CommandsConverter;
}());
exports.CommandsConverter = CommandsConverter;
//# sourceMappingURL=command-registry.js.map