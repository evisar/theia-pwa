/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { interfaces } from 'inversify';
import { PluginMetadata } from '../../common/plugin-protocol';
import { ILogger, ContributionProvider } from '@theia/core';
import { PreferenceServiceImpl } from '@theia/core/lib/browser';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { ExtPluginApi, MainPluginApiProvider } from '../../common/plugin-ext-api-contribution';
import { PluginPathsService } from '../../main/common/plugin-paths-protocol';
import { StoragePathService } from '../../main/browser/storage-path-service';
import { PluginServer } from '../../common/plugin-protocol';
import { KeysToKeysToAnyValue } from '../../common/types';
export declare class HostedPluginSupport {
    private readonly preferenceServiceImpl;
    private readonly pluginPathsService;
    private readonly storagePathService;
    container: interfaces.Container;
    protected readonly logger: ILogger;
    private readonly server;
    private readonly watcher;
    private readonly contributionHandler;
    protected readonly mainPluginApiProviders: ContributionProvider<MainPluginApiProvider>;
    protected readonly pluginServer: PluginServer;
    protected readonly workspaceService: WorkspaceService;
    private theiaReadyPromise;
    private frontendExtManagerProxy;
    private backendExtManagerProxy;
    constructor(preferenceServiceImpl: PreferenceServiceImpl, pluginPathsService: PluginPathsService, storagePathService: StoragePathService);
    checkAndLoadPlugin(container: interfaces.Container): void;
    initPlugins(): void;
    loadPlugins(initData: PluginsInitializationData, container: interfaces.Container): void;
    private initContributions;
    private createServerRpc;
    private updateStoragePath;
}
interface PluginsInitializationData {
    plugins: PluginMetadata[];
    hostedPlugin: PluginMetadata | undefined;
    logPath: string;
    storagePath: string | undefined;
    pluginAPIs: ExtPluginApi[];
    globalStates: KeysToKeysToAnyValue;
    workspaceStates: KeysToKeysToAnyValue;
}
export {};
//# sourceMappingURL=hosted-plugin.d.ts.map