"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var inversify_1 = require("inversify");
var plugin_worker_1 = require("../../main/browser/plugin-worker");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var hosted_plugin_watcher_1 = require("./hosted-plugin-watcher");
var plugin_api_1 = require("../../api/plugin-api");
var main_context_1 = require("../../main/browser/main-context");
var rpc_protocol_1 = require("../../api/rpc-protocol");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/workspace/lib/browser");
var plugin_contribution_handler_1 = require("../../main/browser/plugin-contribution-handler");
var env_main_1 = require("../../main/browser/env-main");
var plugin_ext_api_contribution_1 = require("../../common/plugin-ext-api-contribution");
var plugin_paths_protocol_1 = require("../../main/common/plugin-paths-protocol");
var storage_path_service_1 = require("../../main/browser/storage-path-service");
var plugin_protocol_2 = require("../../common/plugin-protocol");
var HostedPluginSupport = /** @class */ (function () {
    function HostedPluginSupport(preferenceServiceImpl, pluginPathsService, storagePathService) {
        var _this = this;
        this.preferenceServiceImpl = preferenceServiceImpl;
        this.pluginPathsService = pluginPathsService;
        this.storagePathService = storagePathService;
        this.theiaReadyPromise = Promise.all([this.preferenceServiceImpl.ready]);
        this.storagePathService.onStoragePathChanged(function (path) {
            _this.updateStoragePath(path);
        });
    }
    HostedPluginSupport.prototype.checkAndLoadPlugin = function (container) {
        this.container = container;
        this.initPlugins();
    };
    HostedPluginSupport.prototype.initPlugins = function () {
        var _this = this;
        Promise.all([
            this.server.getDeployedMetadata(),
            this.server.getHostedPlugin(),
            this.pluginPathsService.provideHostLogPath(),
            this.storagePathService.provideHostStoragePath(),
            this.server.getExtPluginAPI(),
            this.pluginServer.keyValueStorageGetAll(true),
            this.pluginServer.keyValueStorageGetAll(false),
        ]).then(function (metadata) {
            var pluginsInitData = {
                plugins: metadata['0'],
                hostedPlugin: metadata['1'],
                logPath: metadata['2'],
                storagePath: metadata['3'],
                pluginAPIs: metadata['4'],
                globalStates: metadata['5'],
                workspaceStates: metadata['6']
            };
            _this.loadPlugins(pluginsInitData, _this.container);
        }).catch(function (e) { return console.error(e); });
    };
    HostedPluginSupport.prototype.loadPlugins = function (initData, container) {
        var _this = this;
        if (initData.hostedPlugin) {
            initData.plugins.push(initData.hostedPlugin);
        }
        var confStorage = {
            hostLogPath: initData.logPath,
            hostStoragePath: initData.storagePath || ''
        };
        var _a = __read(this.initContributions(initData.plugins), 2), frontend = _a[0], backend = _a[1];
        this.theiaReadyPromise.then(function () {
            if (frontend) {
                var worker_1 = new plugin_worker_1.PluginWorker();
                var hostedExtManager = worker_1.rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.HOSTED_PLUGIN_MANAGER_EXT);
                hostedExtManager.$init({
                    plugins: initData.plugins,
                    preferences: _this.preferenceServiceImpl.getPreferences(),
                    globalState: initData.globalStates,
                    workspaceState: initData.workspaceStates,
                    env: { queryParams: env_main_1.getQueryParameters() },
                    extApi: initData.pluginAPIs
                }, confStorage);
                main_context_1.setUpPluginApi(worker_1.rpc, container);
                _this.mainPluginApiProviders.getContributions().forEach(function (p) { return p.initialize(worker_1.rpc, container); });
                _this.frontendExtManagerProxy = hostedExtManager;
            }
            if (backend) {
                // sort plugins per host
                var pluginsPerHost_1 = initData.plugins.reduce(function (map, pluginMetadata) {
                    var host = pluginMetadata.host;
                    if (!map[host]) {
                        map[host] = [pluginMetadata];
                    }
                    else {
                        map[host].push(pluginMetadata);
                    }
                    return map;
                }, {});
                // create one RPC per host and init.
                Object.keys(pluginsPerHost_1).forEach(function (hostKey) {
                    var plugins = pluginsPerHost_1[hostKey];
                    var pluginID = hostKey;
                    if (plugins.length === 1) {
                        pluginID = plugin_protocol_1.getPluginId(plugins[0].model);
                    }
                    var rpc = _this.createServerRpc(pluginID, hostKey);
                    var hostedExtManager = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.HOSTED_PLUGIN_MANAGER_EXT);
                    hostedExtManager.$init({
                        plugins: plugins,
                        preferences: _this.preferenceServiceImpl.getPreferences(),
                        globalState: initData.globalStates,
                        workspaceState: initData.workspaceStates,
                        env: { queryParams: env_main_1.getQueryParameters() },
                        extApi: initData.pluginAPIs
                    }, confStorage);
                    main_context_1.setUpPluginApi(rpc, container);
                    _this.mainPluginApiProviders.getContributions().forEach(function (p) { return p.initialize(rpc, container); });
                    _this.backendExtManagerProxy = hostedExtManager;
                });
            }
        });
    };
    HostedPluginSupport.prototype.initContributions = function (pluginsMetadata) {
        var e_1, _a;
        var result = [false, false];
        try {
            for (var pluginsMetadata_1 = __values(pluginsMetadata), pluginsMetadata_1_1 = pluginsMetadata_1.next(); !pluginsMetadata_1_1.done; pluginsMetadata_1_1 = pluginsMetadata_1.next()) {
                var plugin = pluginsMetadata_1_1.value;
                if (plugin.model.entryPoint.frontend) {
                    result[0] = true;
                }
                if (plugin.model.entryPoint.backend) {
                    result[1] = true;
                }
                if (plugin.model.contributes) {
                    this.contributionHandler.handleContributions(plugin.model.contributes);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (pluginsMetadata_1_1 && !pluginsMetadata_1_1.done && (_a = pluginsMetadata_1.return)) _a.call(pluginsMetadata_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
    };
    HostedPluginSupport.prototype.createServerRpc = function (pluginID, hostID) {
        var _this = this;
        return new rpc_protocol_1.RPCProtocolImpl({
            onMessage: this.watcher.onPostMessageEvent,
            send: function (message) {
                var wrappedMessage = {};
                wrappedMessage['pluginID'] = pluginID;
                wrappedMessage['content'] = message;
                _this.server.onMessage(JSON.stringify(wrappedMessage));
            }
        }, hostID);
    };
    HostedPluginSupport.prototype.updateStoragePath = function (path) {
        if (this.frontendExtManagerProxy) {
            this.frontendExtManagerProxy.$updateStoragePath(path);
        }
        if (this.backendExtManagerProxy) {
            this.backendExtManagerProxy.$updateStoragePath(path);
        }
    };
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], HostedPluginSupport.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(plugin_protocol_1.HostedPluginServer),
        __metadata("design:type", Object)
    ], HostedPluginSupport.prototype, "server", void 0);
    __decorate([
        inversify_1.inject(hosted_plugin_watcher_1.HostedPluginWatcher),
        __metadata("design:type", hosted_plugin_watcher_1.HostedPluginWatcher)
    ], HostedPluginSupport.prototype, "watcher", void 0);
    __decorate([
        inversify_1.inject(plugin_contribution_handler_1.PluginContributionHandler),
        __metadata("design:type", plugin_contribution_handler_1.PluginContributionHandler)
    ], HostedPluginSupport.prototype, "contributionHandler", void 0);
    __decorate([
        inversify_1.inject(core_1.ContributionProvider),
        inversify_1.named(plugin_ext_api_contribution_1.MainPluginApiProvider),
        __metadata("design:type", Object)
    ], HostedPluginSupport.prototype, "mainPluginApiProviders", void 0);
    __decorate([
        inversify_1.inject(plugin_protocol_2.PluginServer),
        __metadata("design:type", Object)
    ], HostedPluginSupport.prototype, "pluginServer", void 0);
    __decorate([
        inversify_1.inject(browser_2.WorkspaceService),
        __metadata("design:type", browser_2.WorkspaceService)
    ], HostedPluginSupport.prototype, "workspaceService", void 0);
    HostedPluginSupport = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.PreferenceServiceImpl)),
        __param(1, inversify_1.inject(plugin_paths_protocol_1.PluginPathsService)),
        __param(2, inversify_1.inject(storage_path_service_1.StoragePathService)),
        __metadata("design:paramtypes", [browser_1.PreferenceServiceImpl, Object, storage_path_service_1.StoragePathService])
    ], HostedPluginSupport);
    return HostedPluginSupport;
}());
exports.HostedPluginSupport = HostedPluginSupport;
//# sourceMappingURL=hosted-plugin.js.map