"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var contribution_provider_1 = require("@theia/core/lib/common/contribution-provider");
var hosted_instance_manager_1 = require("./hosted-instance-manager");
var hosted_plugin_uri_postprocessor_1 = require("./hosted-plugin-uri-postprocessor");
var messaging_1 = require("@theia/core/lib/common/messaging");
var backend_application_1 = require("@theia/core/lib/node/backend-application");
var metadata_scanner_1 = require("./metadata-scanner");
var plugin_service_1 = require("./plugin-service");
var plugin_reader_1 = require("./plugin-reader");
var hosted_plugin_1 = require("./hosted-plugin");
var scanner_theia_1 = require("./scanners/scanner-theia");
var hosted_plugins_manager_1 = require("./hosted-plugins-manager");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var grammars_reader_1 = require("./scanners/grammars-reader");
var hosted_plugin_process_1 = require("./hosted-plugin-process");
var plugin_ext_api_contribution_1 = require("../../common/plugin-ext-api-contribution");
function bindCommonHostedBackend(bind) {
    bind(plugin_reader_1.HostedPluginReader).toSelf().inSingletonScope();
    bind(plugin_protocol_1.HostedPluginServer).to(plugin_service_1.HostedPluginServerImpl).inSingletonScope();
    bind(hosted_plugin_1.HostedPluginSupport).toSelf().inSingletonScope();
    bind(metadata_scanner_1.MetadataScanner).toSelf().inSingletonScope();
    bind(hosted_plugins_manager_1.HostedPluginsManager).to(hosted_plugins_manager_1.HostedPluginsManagerImpl).inSingletonScope();
    bind(hosted_plugin_process_1.HostedPluginProcess).toSelf().inSingletonScope();
    bind(backend_application_1.BackendApplicationContribution).toService(plugin_reader_1.HostedPluginReader);
    bind(messaging_1.ConnectionHandler).toDynamicValue(function (ctx) {
        return new messaging_1.JsonRpcConnectionHandler(plugin_protocol_1.hostedServicePath, function (client) {
            var server = ctx.container.get(plugin_protocol_1.HostedPluginServer);
            server.setClient(client);
            // FIXME: handle multiple remote connections
            /*
            client.onDidCloseConnection(() => server.dispose());*/
            return server;
        });
    }).inSingletonScope();
    bind(grammars_reader_1.GrammarsReader).toSelf().inSingletonScope();
}
exports.bindCommonHostedBackend = bindCommonHostedBackend;
function bindHostedBackend(bind) {
    bindCommonHostedBackend(bind);
    bind(hosted_instance_manager_1.HostedInstanceManager).to(hosted_instance_manager_1.NodeHostedPluginRunner).inSingletonScope();
    bind(plugin_protocol_1.PluginScanner).to(scanner_theia_1.TheiaPluginScanner).inSingletonScope();
    contribution_provider_1.bindContributionProvider(bind, Symbol.for(hosted_plugin_uri_postprocessor_1.HostedPluginUriPostProcessorSymbolName));
    contribution_provider_1.bindContributionProvider(bind, Symbol.for(plugin_ext_api_contribution_1.ExtPluginApiProvider));
}
exports.bindHostedBackend = bindHostedBackend;
//# sourceMappingURL=plugin-ext-hosted-backend-module.js.map