"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_manager_1 = require("../../plugin/plugin-manager");
var plugin_api_1 = require("../../api/plugin-api");
var plugin_context_1 = require("../../plugin/plugin-context");
var env_1 = require("../../plugin/env");
var preference_registry_1 = require("../../plugin/preference-registry");
var debug_1 = require("../../plugin/node/debug/debug");
/**
 * Handle the RPC calls.
 */
var PluginHostRPC = /** @class */ (function () {
    // tslint:disable-next-line:no-any
    function PluginHostRPC(rpc) {
        this.rpc = rpc;
    }
    PluginHostRPC.prototype.initialize = function () {
        var envExt = new env_1.EnvExtImpl(this.rpc);
        var debugExt = new debug_1.DebugExtImpl(this.rpc);
        var preferenceRegistryExt = new preference_registry_1.PreferenceRegistryExtImpl(this.rpc);
        this.pluginManager = this.createPluginManager(envExt, preferenceRegistryExt, this.rpc);
        this.rpc.set(plugin_api_1.MAIN_RPC_CONTEXT.HOSTED_PLUGIN_MANAGER_EXT, this.pluginManager);
        this.rpc.set(plugin_api_1.MAIN_RPC_CONTEXT.PREFERENCE_REGISTRY_EXT, preferenceRegistryExt);
        PluginHostRPC.apiFactory = plugin_context_1.createAPIFactory(this.rpc, this.pluginManager, envExt, debugExt, preferenceRegistryExt);
    };
    // tslint:disable-next-line:no-any
    PluginHostRPC.initialize = function (contextPath, plugin) {
        console.log('PLUGIN_HOST(' + process.pid + '): initializing(' + contextPath + ')');
        try {
            var backendInit = require(contextPath);
            backendInit.doInitialization(PluginHostRPC.apiFactory, plugin);
        }
        catch (e) {
            console.error(e);
        }
    };
    // tslint:disable-next-line:no-any
    PluginHostRPC.prototype.createPluginManager = function (envExt, preferencesManager, rpc) {
        var pluginManager = new plugin_manager_1.PluginManagerExtImpl({
            loadPlugin: function (plugin) {
                console.log('PLUGIN_HOST(' + process.pid + '): PluginManagerExtImpl/loadPlugin(' + plugin.pluginPath + ')');
                try {
                    return require(plugin.pluginPath);
                }
                catch (e) {
                    console.error(e);
                }
            },
            init: function (raw) {
                var e_1, _a;
                console.log('PLUGIN_HOST(' + process.pid + '): PluginManagerExtImpl/init()');
                var result = [];
                var foreign = [];
                try {
                    for (var raw_1 = __values(raw), raw_1_1 = raw_1.next(); !raw_1_1.done; raw_1_1 = raw_1.next()) {
                        var plg = raw_1_1.value;
                        var pluginModel = plg.model;
                        var pluginLifecycle = plg.lifecycle;
                        if (pluginModel.entryPoint.backend) {
                            var backendInitPath = pluginLifecycle.backendInitPath;
                            // if no init path, try to init as regular Theia plugin
                            if (!backendInitPath) {
                                backendInitPath = __dirname + '/scanners/backend-init-theia.js';
                            }
                            var plugin = {
                                pluginPath: pluginModel.entryPoint.backend,
                                pluginFolder: plg.source.packagePath,
                                model: pluginModel,
                                lifecycle: pluginLifecycle,
                                rawModel: plg.source
                            };
                            PluginHostRPC.initialize(backendInitPath, plugin);
                            result.push(plugin);
                        }
                        else {
                            foreign.push({
                                pluginPath: pluginModel.entryPoint.frontend,
                                pluginFolder: plg.source.packagePath,
                                model: pluginModel,
                                lifecycle: pluginLifecycle,
                                rawModel: plg.source
                            });
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (raw_1_1 && !raw_1_1.done && (_a = raw_1.return)) _a.call(raw_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return [result, foreign];
            },
            initExtApi: function (extApi) {
                var e_2, _a;
                try {
                    for (var extApi_1 = __values(extApi), extApi_1_1 = extApi_1.next(); !extApi_1_1.done; extApi_1_1 = extApi_1.next()) {
                        var api = extApi_1_1.value;
                        if (api.backendInitPath) {
                            try {
                                var extApiInit = require(api.backendInitPath);
                                extApiInit.provideApi(rpc, pluginManager);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (extApi_1_1 && !extApi_1_1.done && (_a = extApi_1.return)) _a.call(extApi_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }, envExt, preferencesManager, rpc);
        return pluginManager;
    };
    return PluginHostRPC;
}());
exports.PluginHostRPC = PluginHostRPC;
//# sourceMappingURL=plugin-host-rpc.js.map