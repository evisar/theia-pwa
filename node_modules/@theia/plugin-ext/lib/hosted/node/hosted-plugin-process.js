"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var cp = require("child_process");
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var event_1 = require("@theia/core/lib/common/event");
var ipc_protocol_1 = require("@theia/core/lib/node/messaging/ipc-protocol");
var rpc_protocol_1 = require("../../api/rpc-protocol");
var plugin_api_1 = require("../../api/plugin-api");
var HostedPluginProcess = /** @class */ (function () {
    function HostedPluginProcess() {
    }
    HostedPluginProcess.prototype.setClient = function (client) {
        if (this.client) {
            if (this.childProcess) {
                this.runPluginServer();
            }
        }
        this.client = client;
    };
    HostedPluginProcess.prototype.setDefault = function (defaultRunner) {
    };
    // tslint:disable-next-line:no-any
    HostedPluginProcess.prototype.acceptMessage = function (jsonMessage) {
        return jsonMessage.type !== undefined && jsonMessage.id;
    };
    // tslint:disable-next-line:no-any
    HostedPluginProcess.prototype.onMessage = function (jsonMessage) {
        if (this.childProcess) {
            this.childProcess.send(JSON.stringify(jsonMessage));
        }
    };
    HostedPluginProcess.prototype.terminatePluginServer = function () {
        if (this.childProcess === undefined) {
            return;
        }
        // tslint:disable-next-line:no-shadowed-variable
        var cp = this.childProcess;
        this.childProcess = undefined;
        var emitter = new event_1.Emitter();
        cp.on('message', function (message) {
            emitter.fire(JSON.parse(message));
        });
        var rpc = new rpc_protocol_1.RPCProtocolImpl({
            onMessage: emitter.event,
            send: function (m) {
                if (cp.send) {
                    cp.send(JSON.stringify(m));
                }
            }
        });
        var hostedPluginManager = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.HOSTED_PLUGIN_MANAGER_EXT);
        hostedPluginManager.$stopPlugin('').then(function () {
            emitter.dispose();
            cp.kill();
        });
    };
    HostedPluginProcess.prototype.runPluginServer = function () {
        var _this = this;
        if (this.childProcess) {
            this.terminatePluginServer();
        }
        this.childProcess = this.fork({
            serverName: 'hosted-plugin',
            logger: this.logger,
            args: []
        });
        this.childProcess.on('message', function (message) {
            if (_this.client) {
                _this.client.postMessage(message);
            }
        });
    };
    HostedPluginProcess.prototype.fork = function (options) {
        var _this = this;
        // create env and add PATH to it so any executable from root process is available
        var env = ipc_protocol_1.createIpcEnv();
        env.PATH = process.env.PATH;
        // add HOME to env since some plug-ins need to read files from user's home dir
        env.HOME = process.env.HOME;
        var forkOptions = {
            silent: true,
            env: env,
            execArgv: [],
            stdio: ['pipe', 'pipe', 'pipe', 'ipc']
        };
        var inspectArgPrefix = "--" + options.serverName + "-inspect";
        var inspectArg = process.argv.find(function (v) { return v.startsWith(inspectArgPrefix); });
        if (inspectArg !== undefined) {
            forkOptions.execArgv = ['--nolazy', "--inspect" + inspectArg.substr(inspectArgPrefix.length)];
        }
        var childProcess = cp.fork(path.resolve(__dirname, 'plugin-host.js'), options.args, forkOptions);
        childProcess.stdout.on('data', function (data) { return _this.logger.info("[" + options.serverName + ": " + childProcess.pid + "] " + data.toString()); });
        childProcess.stderr.on('data', function (data) { return _this.logger.error("[" + options.serverName + ": " + childProcess.pid + "] " + data.toString()); });
        this.logger.debug("[" + options.serverName + ": " + childProcess.pid + "] IPC started");
        childProcess.once('exit', function () { return _this.logger.debug("[" + options.serverName + ": " + childProcess.pid + "] IPC exited"); });
        return childProcess;
    };
    __decorate([
        inversify_1.inject(common_1.ILogger),
        __metadata("design:type", Object)
    ], HostedPluginProcess.prototype, "logger", void 0);
    HostedPluginProcess = __decorate([
        inversify_1.injectable()
    ], HostedPluginProcess);
    return HostedPluginProcess;
}());
exports.HostedPluginProcess = HostedPluginProcess;
//# sourceMappingURL=hosted-plugin-process.js.map