"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var plugin_reader_1 = require("./plugin-reader");
var hosted_instance_manager_1 = require("./hosted-instance-manager");
var hosted_plugin_1 = require("./hosted-plugin");
var hosted_plugins_manager_1 = require("./hosted-plugins-manager");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var core_2 = require("@theia/core");
var plugin_ext_api_contribution_1 = require("../../common/plugin-ext-api-contribution");
var HostedPluginServerImpl = /** @class */ (function () {
    function HostedPluginServerImpl(reader, hostedPlugin, hostedInstanceManager) {
        this.reader = reader;
        this.hostedPlugin = hostedPlugin;
        this.hostedInstanceManager = hostedInstanceManager;
        /**
         * Managed plugin metadata backend entries.
         */
        this.currentBackendPluginsMetadata = [];
        /**
         * Managed plugin metadata frontend entries.
         */
        this.currentFrontendPluginsMetadata = [];
    }
    HostedPluginServerImpl.prototype.dispose = function () {
        this.hostedPlugin.clientClosed();
    };
    HostedPluginServerImpl.prototype.setClient = function (client) {
        this.hostedPlugin.setClient(client);
    };
    HostedPluginServerImpl.prototype.getHostedPlugin = function () {
        var pluginMetadata = this.reader.getPlugin();
        if (pluginMetadata) {
            this.hostedPlugin.runPlugin(pluginMetadata.model);
        }
        return Promise.resolve(this.reader.getPlugin());
    };
    HostedPluginServerImpl.prototype.getDeployedFrontendMetadata = function () {
        return Promise.resolve(this.currentFrontendPluginsMetadata);
    };
    HostedPluginServerImpl.prototype.getDeployedMetadata = function () {
        var allMetadata = [];
        allMetadata.push.apply(allMetadata, __spread(this.currentFrontendPluginsMetadata));
        allMetadata.push.apply(allMetadata, __spread(this.currentBackendPluginsMetadata));
        return Promise.resolve(allMetadata);
    };
    // need to run a new node instance with plugin-host for all plugins
    HostedPluginServerImpl.prototype.deployFrontendPlugins = function (frontendPlugins) {
        var _this = this;
        // get metadata
        frontendPlugins.forEach(function (frontendPluginDeployerEntry) {
            var pluginMetadata = _this.reader.getPluginMetadata(frontendPluginDeployerEntry.path());
            if (pluginMetadata) {
                _this.currentFrontendPluginsMetadata.push(pluginMetadata);
                _this.logger.info('HostedPluginServerImpl/ asking to deploy the frontend Plugin', frontendPluginDeployerEntry.path(), 'and model is', pluginMetadata.model);
            }
        });
        return Promise.resolve();
    };
    HostedPluginServerImpl.prototype.getDeployedBackendMetadata = function () {
        return Promise.resolve(this.currentBackendPluginsMetadata);
    };
    // need to run a new node instance with plugin-host for all plugins
    HostedPluginServerImpl.prototype.deployBackendPlugins = function (backendPlugins) {
        var _this = this;
        if (backendPlugins.length > 0) {
            this.hostedPlugin.runPluginServer();
        }
        // get metadata
        backendPlugins.forEach(function (backendPluginDeployerEntry) {
            var pluginMetadata = _this.reader.getPluginMetadata(backendPluginDeployerEntry.path());
            if (pluginMetadata) {
                _this.currentBackendPluginsMetadata.push(pluginMetadata);
                _this.logger.info('HostedPluginServerImpl/ asking to deploy the backend Plugin', backendPluginDeployerEntry.path(), 'and model is', pluginMetadata.model);
            }
        });
        return Promise.resolve();
    };
    HostedPluginServerImpl.prototype.onMessage = function (message) {
        this.hostedPlugin.onMessage(message);
        return Promise.resolve();
    };
    HostedPluginServerImpl.prototype.isPluginValid = function (uri) {
        return Promise.resolve(this.hostedInstanceManager.isPluginValid(new uri_1.default(uri)));
    };
    HostedPluginServerImpl.prototype.runHostedPluginInstance = function (uri) {
        return this.uriToStrPromise(this.hostedInstanceManager.run(new uri_1.default(uri)));
    };
    HostedPluginServerImpl.prototype.runDebugHostedPluginInstance = function (uri, debugConfig) {
        return this.uriToStrPromise(this.hostedInstanceManager.debug(new uri_1.default(uri), debugConfig));
    };
    HostedPluginServerImpl.prototype.terminateHostedPluginInstance = function () {
        return Promise.resolve(this.hostedInstanceManager.terminate());
    };
    HostedPluginServerImpl.prototype.isHostedPluginInstanceRunning = function () {
        return Promise.resolve(this.hostedInstanceManager.isRunning());
    };
    HostedPluginServerImpl.prototype.getHostedPluginInstanceURI = function () {
        return Promise.resolve(this.hostedInstanceManager.getInstanceURI().toString());
    };
    HostedPluginServerImpl.prototype.getHostedPluginURI = function () {
        return Promise.resolve(this.hostedInstanceManager.getPluginURI().toString());
    };
    HostedPluginServerImpl.prototype.uriToStrPromise = function (promise) {
        return new Promise(function (resolve, reject) {
            promise.then(function (uri) {
                resolve(uri.toString());
            }).catch(function (error) { return reject(error); });
        });
    };
    HostedPluginServerImpl.prototype.runWatchCompilation = function (path) {
        return this.hostedPluginsManager.runWatchCompilation(path);
    };
    HostedPluginServerImpl.prototype.stopWatchCompilation = function (path) {
        return this.hostedPluginsManager.stopWatchCompilation(path);
    };
    HostedPluginServerImpl.prototype.isWatchCompilationRunning = function (path) {
        return this.hostedPluginsManager.isWatchCompilationRunning(path);
    };
    HostedPluginServerImpl.prototype.getExtPluginAPI = function () {
        return Promise.resolve(this.extPluginAPIContributions.getContributions().map(function (p) { return p.provideApi(); }));
    };
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], HostedPluginServerImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(hosted_plugins_manager_1.HostedPluginsManager),
        __metadata("design:type", Object)
    ], HostedPluginServerImpl.prototype, "hostedPluginsManager", void 0);
    __decorate([
        inversify_1.inject(core_2.ContributionProvider),
        inversify_1.named(Symbol.for(plugin_ext_api_contribution_1.ExtPluginApiProvider)),
        __metadata("design:type", Object)
    ], HostedPluginServerImpl.prototype, "extPluginAPIContributions", void 0);
    HostedPluginServerImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(plugin_reader_1.HostedPluginReader)),
        __param(1, inversify_1.inject(hosted_plugin_1.HostedPluginSupport)),
        __param(2, inversify_1.inject(hosted_instance_manager_1.HostedInstanceManager)),
        __metadata("design:paramtypes", [plugin_reader_1.HostedPluginReader,
            hosted_plugin_1.HostedPluginSupport, Object])
    ], HostedPluginServerImpl);
    return HostedPluginServerImpl;
}());
exports.HostedPluginServerImpl = HostedPluginServerImpl;
//# sourceMappingURL=plugin-service.js.map