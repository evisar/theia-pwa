"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var fs = require("fs");
var path_1 = require("path");
var metadata_scanner_1 = require("./metadata-scanner");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var core_1 = require("@theia/core");
var HostedPluginReader = /** @class */ (function () {
    function HostedPluginReader() {
        /**
         * Map between a plugin's id and the local storage
         */
        this.pluginsIdsFiles = new Map();
    }
    HostedPluginReader.prototype.initialize = function () {
        if (process.env.HOSTED_PLUGIN) {
            var pluginPath = process.env.HOSTED_PLUGIN;
            if (pluginPath) {
                if (!pluginPath.endsWith('/')) {
                    pluginPath += '/';
                }
                this.plugin = this.getPluginMetadata(pluginPath);
            }
        }
    };
    HostedPluginReader.prototype.configure = function (app) {
        var _this = this;
        app.get('/hostedPlugin/:pluginId/:path(*)', function (req, res) {
            var pluginId = req.params.pluginId;
            var filePath = req.params.path;
            var localPath = _this.pluginsIdsFiles.get(pluginId);
            if (localPath) {
                var fileToServe = localPath + filePath;
                res.sendFile(fileToServe);
            }
            else {
                res.status(404).send("The plugin with id '" + pluginId + "' does not exist.");
            }
        });
    };
    HostedPluginReader.prototype.getPluginMetadata = function (path) {
        if (!path.endsWith('/')) {
            path += '/';
        }
        var packageJsonPath = path + 'package.json';
        if (!fs.existsSync(packageJsonPath)) {
            return undefined;
        }
        var rawData = fs.readFileSync(packageJsonPath).toString();
        rawData = this.localize(rawData, path);
        var plugin = JSON.parse(rawData);
        plugin.packagePath = path;
        var pluginMetadata = this.scanner.getPluginMetadata(plugin);
        if (pluginMetadata.model.entryPoint.backend) {
            pluginMetadata.model.entryPoint.backend = path_1.resolve(path, pluginMetadata.model.entryPoint.backend);
        }
        if (pluginMetadata) {
            // Add post processor
            if (this.metadataProcessors) {
                this.metadataProcessors.forEach(function (metadataProcessor) {
                    metadataProcessor.process(pluginMetadata);
                });
            }
            this.pluginsIdsFiles.set(plugin_protocol_1.getPluginId(pluginMetadata.model), path);
        }
        return pluginMetadata;
    };
    HostedPluginReader.prototype.localize = function (rawData, pluginPath) {
        var e_1, _a;
        var nlsPath = pluginPath + 'package.nls.json';
        if (fs.existsSync(nlsPath)) {
            var nlsMap = require(nlsPath);
            try {
                for (var _b = __values(Object.keys(nlsMap)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    var value = nlsMap[key].replace(/\"/g, '\\"');
                    rawData = rawData.split('%' + key + '%').join(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return rawData;
    };
    HostedPluginReader.prototype.getPlugin = function () {
        return this.plugin;
    };
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], HostedPluginReader.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(metadata_scanner_1.MetadataScanner),
        __metadata("design:type", metadata_scanner_1.MetadataScanner)
    ], HostedPluginReader.prototype, "scanner", void 0);
    __decorate([
        inversify_1.optional(),
        inversify_1.multiInject(plugin_protocol_1.MetadataProcessor),
        __metadata("design:type", Array)
    ], HostedPluginReader.prototype, "metadataProcessors", void 0);
    HostedPluginReader = __decorate([
        inversify_1.injectable()
    ], HostedPluginReader);
    return HostedPluginReader;
}());
exports.HostedPluginReader = HostedPluginReader;
//# sourceMappingURL=plugin-reader.js.map