"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var plugin_api_1 = require("../../api/plugin-api");
var core_1 = require("@theia/core");
var untitled_resource_1 = require("./editor/untitled-resource");
var uri_1 = require("@theia/core/lib/common/uri");
var browser_1 = require("@theia/core/lib/browser");
var types_impl_1 = require("../../plugin/types-impl");
var DocumentsMainImpl = /** @class */ (function () {
    function DocumentsMainImpl(editorsAndDocuments, modelService, rpc, editorManger, openerService) {
        var _this = this;
        this.editorManger = editorManger;
        this.openerService = openerService;
        this.toDispose = new core_1.DisposableCollection();
        this.modelToDispose = new Map();
        this.modelIsSynced = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.DOCUMENTS_EXT);
        this.toDispose.push(editorsAndDocuments.onDocumentAdd(function (documents) { return documents.forEach(_this.onModelAdded, _this); }));
        this.toDispose.push(editorsAndDocuments.onDocumentRemove(function (documents) { return documents.forEach(_this.onModelRemoved, _this); }));
        this.toDispose.push(modelService.onModelModeChanged(this.onModelChanged, this));
        this.toDispose.push(modelService.onModelSaved(function (m) {
            _this.proxy.$acceptModelSaved(m.textEditorModel.uri);
        }));
        this.toDispose.push(modelService.onModelDirtyChanged(function (m) {
            _this.proxy.$acceptDirtyStateChanged(m.textEditorModel.uri, m.dirty);
        }));
    }
    DocumentsMainImpl.prototype.dispose = function () {
        this.modelToDispose.forEach(function (val) { return val.dispose(); });
        this.modelToDispose = new Map();
        this.toDispose.dispose();
    };
    DocumentsMainImpl.prototype.onModelChanged = function (event) {
        var modelUrl = event.model.textEditorModel.uri;
        if (!this.modelIsSynced.get(modelUrl.toString())) {
            return;
        }
        this.proxy.$acceptModelModeChanged(modelUrl, event.oldModeId, event.model.languageId);
    };
    DocumentsMainImpl.prototype.onModelAdded = function (model) {
        var _this = this;
        var modelUrl = model.textEditorModel.uri;
        this.modelIsSynced.set(modelUrl.toString(), true);
        this.modelToDispose.set(modelUrl.toString(), model.textEditorModel.onDidChangeContent(function (e) {
            _this.proxy.$acceptModelChanged(modelUrl, {
                eol: e.eol,
                versionId: e.versionId,
                changes: e.changes.map(function (c) {
                    return ({
                        text: c.text,
                        range: c.range,
                        rangeLength: c.rangeLength,
                        rangeOffset: 0
                    });
                })
            }, model.dirty);
        }));
    };
    DocumentsMainImpl.prototype.onModelRemoved = function (url) {
        var modelUrl = url.toString();
        if (!this.modelIsSynced.get(modelUrl)) {
            return;
        }
        this.modelIsSynced.delete(modelUrl);
        this.modelToDispose.get(modelUrl).dispose();
        this.modelToDispose.delete(modelUrl);
    };
    DocumentsMainImpl.prototype.$tryCreateDocument = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var language, content;
            return __generator(this, function (_a) {
                language = options && options.language;
                content = options && options.content;
                return [2 /*return*/, untitled_resource_1.createUntitledResource(content, language)];
            });
        });
    };
    DocumentsMainImpl.prototype.$tryOpenDocument = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var openerOptions, range, selection, widgetOptions, viewColumn, visibleEditors, editorIndex, activeEditor, activeEditorIndex, uriArg, opener_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        openerOptions = void 0;
                        if (options) {
                            range = void 0;
                            if (options.selection) {
                                selection = options.selection;
                                range = {
                                    start: { line: selection.startLineNumber - 1, character: selection.startColumn - 1 },
                                    end: { line: selection.endLineNumber - 1, character: selection.endColumn - 1 }
                                };
                            }
                            widgetOptions = void 0;
                            if (options.viewColumn) {
                                viewColumn = options.viewColumn;
                                visibleEditors = this.editorManger.all;
                                editorIndex = -1;
                                if (viewColumn > 0) {
                                    editorIndex = viewColumn - 1;
                                }
                                else {
                                    activeEditor = this.editorManger.activeEditor;
                                    if (activeEditor) {
                                        activeEditorIndex = visibleEditors.indexOf(activeEditor);
                                        if (viewColumn === types_impl_1.ViewColumn.Active) {
                                            editorIndex = activeEditorIndex;
                                        }
                                        else if (viewColumn === types_impl_1.ViewColumn.Beside) {
                                            editorIndex = activeEditorIndex + 1;
                                        }
                                    }
                                }
                                if (editorIndex > -1 && visibleEditors.length > editorIndex) {
                                    widgetOptions = { ref: visibleEditors[editorIndex] };
                                }
                                else {
                                    widgetOptions = { mode: 'split-right' };
                                }
                            }
                            openerOptions = {
                                selection: range,
                                mode: options.preserveFocus ? 'open' : 'activate',
                                preview: options.preview,
                                widgetOptions: widgetOptions
                            };
                        }
                        uriArg = new uri_1.default(uri.external);
                        return [4 /*yield*/, this.openerService.getOpener(uriArg, openerOptions)];
                    case 1:
                        opener_1 = _a.sent();
                        opener_1.open(uriArg, openerOptions);
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        throw new Error(err_1);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DocumentsMainImpl.prototype.$trySaveDocument = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.editorManger.getByUri(new uri_1.default(uri.external))];
                    case 1:
                        widget = _a.sent();
                        if (!widget) return [3 /*break*/, 3];
                        return [4 /*yield*/, browser_1.Saveable.save(widget)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3: return [2 /*return*/, false];
                }
            });
        });
    };
    return DocumentsMainImpl;
}());
exports.DocumentsMainImpl = DocumentsMainImpl;
//# sourceMappingURL=documents-main.js.map