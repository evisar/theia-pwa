"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var core_1 = require("@theia/core");
var inversify_1 = require("inversify");
var monaco_text_model_service_1 = require("@theia/monaco/lib/browser/monaco-text-model-service");
var monaco_workspace_1 = require("@theia/monaco/lib/browser/monaco-workspace");
exports.EditorModelService = Symbol('EditorModelService');
var EditorModelServiceImpl = /** @class */ (function () {
    function EditorModelServiceImpl(monacoModelService, monacoWorkspace) {
        var _this = this;
        this.modelModeChangedEmitter = new core_1.Emitter();
        this.onModelRemovedEmitter = new core_1.Emitter();
        this.modelDirtyEmitter = new core_1.Emitter();
        this.modelSavedEmitter = new core_1.Emitter();
        this.onModelDirtyChanged = this.modelDirtyEmitter.event;
        this.onModelSaved = this.modelSavedEmitter.event;
        this.onModelModeChanged = this.modelModeChangedEmitter.event;
        this.onModelRemoved = this.onModelRemovedEmitter.event;
        this.monacoModelService = monacoModelService;
        monacoModelService.models.forEach(function (model) { return _this.modelCreated(model); });
        monacoModelService.onDidCreate(this.modelCreated, this);
        monacoWorkspace.onDidCloseTextDocument(function (model) {
            setTimeout(function () {
                _this.onModelRemovedEmitter.fire(model);
            }, 1);
        });
    }
    EditorModelServiceImpl.prototype.modelCreated = function (model) {
        var _this = this;
        model.textEditorModel.onDidChangeLanguage(function (e) {
            _this.modelModeChangedEmitter.fire({ model: model, oldModeId: e.oldLanguage });
        });
        model.onDidSaveModel(function (_) {
            _this.modelSavedEmitter.fire(model);
        });
        model.onDirtyChanged(function (_) {
            _this.modelDirtyEmitter.fire(model);
        });
    };
    Object.defineProperty(EditorModelServiceImpl.prototype, "onModelAdded", {
        get: function () {
            return this.monacoModelService.onDidCreate;
        },
        enumerable: true,
        configurable: true
    });
    EditorModelServiceImpl.prototype.getModels = function () {
        return this.monacoModelService.models;
    };
    EditorModelServiceImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(monaco_text_model_service_1.MonacoTextModelService)),
        __param(1, inversify_1.inject(monaco_workspace_1.MonacoWorkspace)),
        __metadata("design:paramtypes", [monaco_text_model_service_1.MonacoTextModelService,
            monaco_workspace_1.MonacoWorkspace])
    ], EditorModelServiceImpl);
    return EditorModelServiceImpl;
}());
exports.EditorModelServiceImpl = EditorModelServiceImpl;
//# sourceMappingURL=text-editor-model-service.js.map