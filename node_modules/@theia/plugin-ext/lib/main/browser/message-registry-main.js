"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var message_service_1 = require("@theia/core/lib/common/message-service");
var modal_notification_1 = require("./dialogs/modal-notification");
var MessageRegistryMainImpl = /** @class */ (function () {
    function MessageRegistryMainImpl(container) {
        this.messageService = container.get(message_service_1.MessageService);
    }
    MessageRegistryMainImpl.prototype.$showInformationMessage = function (message, optionsOrFirstItem, items) {
        return this.showMessage.apply(this, __spread([modal_notification_1.MessageType.Info, message, optionsOrFirstItem], items));
    };
    MessageRegistryMainImpl.prototype.$showWarningMessage = function (message, optionsOrFirstItem, items) {
        return this.showMessage.apply(this, __spread([modal_notification_1.MessageType.Warning, message, optionsOrFirstItem], items));
    };
    MessageRegistryMainImpl.prototype.$showErrorMessage = function (message, optionsOrFirstItem, items) {
        return this.showMessage.apply(this, __spread([modal_notification_1.MessageType.Error, message, optionsOrFirstItem], items));
    };
    // tslint:disable-next-line:no-any
    MessageRegistryMainImpl.prototype.showMessage = function (type, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _a, _b, _c;
        // tslint:disable-next-line:no-any
        var actionsMap = new Map();
        var actionTitles = [];
        var options = { modal: false };
        var onCloseAction;
        if (!!args && args.length > 0) {
            var first = args[0];
            if (first && first.modal) {
                options.modal = true;
            }
            args.forEach(function (arg) {
                if (!arg) {
                    return;
                }
                var actionTitle;
                if (typeof arg === 'string') {
                    actionTitle = arg;
                }
                else if (arg.title) {
                    actionTitle = arg.title;
                    actionsMap.set(actionTitle, arg);
                    if (arg.isCloseAffordance) {
                        onCloseAction = arg.title;
                    }
                }
                else {
                    return;
                }
                actionTitles.push(actionTitle);
            });
        }
        var promise;
        try {
            if (options.modal) {
                var modalNotification = new modal_notification_1.ModalNotification();
                promise = modalNotification.showDialog(type, message, actionTitles)
                    .then(function (result) { return result !== undefined ? result : onCloseAction; });
            }
            else {
                switch (type) {
                    case modal_notification_1.MessageType.Info:
                        promise = (_a = this.messageService).info.apply(_a, __spread([message], actionTitles));
                        break;
                    case modal_notification_1.MessageType.Warning:
                        promise = (_b = this.messageService).warn.apply(_b, __spread([message], actionTitles));
                        break;
                    case modal_notification_1.MessageType.Error:
                        promise = (_c = this.messageService).error.apply(_c, __spread([message], actionTitles));
                        break;
                    default:
                        return Promise.reject(new Error("Message type '" + type + "' is not supported yet!"));
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        return Promise.resolve(promise.then(function (result) { return !!result && actionsMap.has(result) ? actionsMap.get(result) : result; }));
    };
    return MessageRegistryMainImpl;
}());
exports.MessageRegistryMainImpl = MessageRegistryMainImpl;
//# sourceMappingURL=message-registry-main.js.map