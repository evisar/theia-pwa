"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var plugin_api_1 = require("../../api/plugin-api");
var vscode_uri_1 = require("vscode-uri");
var quick_open_model_1 = require("@theia/core/lib/browser/quick-open/quick-open-model");
var monaco_quick_open_service_1 = require("@theia/monaco/lib/browser/monaco-quick-open-service");
var file_search_service_1 = require("@theia/file-search/lib/common/file-search-service");
var browser_1 = require("@theia/workspace/lib/browser");
var core_1 = require("@theia/core");
var in_plugin_filesystem_watcher_manager_1 = require("./in-plugin-filesystem-watcher-manager");
var storage_path_service_1 = require("./storage-path-service");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var WorkspaceMainImpl = /** @class */ (function () {
    function WorkspaceMainImpl(rpc, container) {
        var _this = this;
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.WORKSPACE_EXT);
        this.storageProxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.STORAGE_EXT);
        this.quickOpenService = container.get(monaco_quick_open_service_1.MonacoQuickOpenService);
        this.fileSearchService = container.get(file_search_service_1.FileSearchService);
        this.resourceResolver = container.get(TextContentResourceResolver);
        this.pluginServer = container.get(plugin_protocol_1.PluginServer);
        this.workspaceService = container.get(browser_1.WorkspaceService);
        this.storagePathService = container.get(storage_path_service_1.StoragePathService);
        this.inPluginFileSystemWatcherManager = new in_plugin_filesystem_watcher_manager_1.InPluginFileSystemWatcherManager(this.proxy, container);
        this.workspaceService.roots.then(function (roots) {
            _this.processWorkspaceFoldersChanged(roots);
        });
        this.workspaceService.onWorkspaceChanged(function (roots) {
            _this.processWorkspaceFoldersChanged(roots);
        });
    }
    WorkspaceMainImpl.prototype.processWorkspaceFoldersChanged = function (roots) {
        return __awaiter(this, void 0, void 0, function () {
            var keyValueStorageWorkspacesData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isAnyRootChanged(roots) === false) {
                            return [2 /*return*/];
                        }
                        this.roots = roots;
                        return [4 /*yield*/, this.storagePathService.updateStoragePath(roots)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.pluginServer.keyValueStorageGetAll(false)];
                    case 2:
                        keyValueStorageWorkspacesData = _a.sent();
                        this.storageProxy.$updatePluginsWorkspaceData(keyValueStorageWorkspacesData);
                        this.proxy.$onWorkspaceFoldersChanged({ roots: roots });
                        return [2 /*return*/];
                }
            });
        });
    };
    WorkspaceMainImpl.prototype.isAnyRootChanged = function (roots) {
        if (!this.roots || this.roots.length !== roots.length) {
            return true;
        }
        return this.roots.some(function (root, index) { return root.uri !== roots[index].uri; });
    };
    WorkspaceMainImpl.prototype.$pickWorkspaceFolder = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // Return undefined if workspace root is not set
            if (!_this.roots || !_this.roots.length) {
                resolve(undefined);
                return;
            }
            // Active before appearing the pick menu
            var activeElement = window.document.activeElement;
            // WorkspaceFolder to be returned
            var returnValue;
            var items = _this.roots.map(function (root) {
                var rootUri = vscode_uri_1.default.parse(root.uri);
                var rootPathName = rootUri.path.substring(rootUri.path.lastIndexOf('/') + 1);
                return new quick_open_model_1.QuickOpenItem({
                    label: rootPathName,
                    detail: rootUri.path,
                    run: function (mode) {
                        if (mode === quick_open_model_1.QuickOpenMode.OPEN) {
                            returnValue = {
                                uri: rootUri,
                                name: rootPathName,
                                index: 0
                            };
                        }
                        return true;
                    }
                });
            });
            // Create quick open model
            var model = {
                onType: function (lookFor, acceptor) {
                    acceptor(items);
                }
            };
            // Show pick menu
            _this.quickOpenService.open(model, {
                fuzzyMatchLabel: true,
                fuzzyMatchDetail: true,
                fuzzyMatchDescription: true,
                placeholder: options.placeHolder,
                onClose: function () {
                    if (activeElement) {
                        activeElement.focus();
                    }
                    resolve(returnValue);
                }
            });
        });
    };
    WorkspaceMainImpl.prototype.$startFileSearch = function (includePattern, excludePatternOrDisregardExcludes, maxResults, token) {
        return __awaiter(this, void 0, void 0, function () {
            var uriStrs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fileSearchService.find(includePattern, { rootUris: this.roots.map(function (r) { return r.uri; }) })];
                    case 1:
                        uriStrs = _a.sent();
                        return [2 /*return*/, uriStrs.map(function (uriStr) { return vscode_uri_1.default.parse(uriStr); })];
                }
            });
        });
    };
    WorkspaceMainImpl.prototype.$registerFileSystemWatcher = function (options) {
        return Promise.resolve(this.inPluginFileSystemWatcherManager.registerFileWatchSubscription(options));
    };
    WorkspaceMainImpl.prototype.$unregisterFileSystemWatcher = function (watcherId) {
        this.inPluginFileSystemWatcherManager.unregisterFileWatchSubscription(watcherId);
        return Promise.resolve();
    };
    WorkspaceMainImpl.prototype.$registerTextDocumentContentProvider = function (scheme) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.resourceResolver.registerContentProvider(scheme, this.proxy)];
            });
        });
    };
    WorkspaceMainImpl.prototype.$unregisterTextDocumentContentProvider = function (scheme) {
        this.resourceResolver.unregisterContentProvider(scheme);
    };
    WorkspaceMainImpl.prototype.$onTextDocumentContentChange = function (uri, content) {
        this.resourceResolver.onContentChange(uri, content);
    };
    return WorkspaceMainImpl;
}());
exports.WorkspaceMainImpl = WorkspaceMainImpl;
var TextContentResourceResolver = /** @class */ (function () {
    function TextContentResourceResolver() {
        // Resource providers for different schemes
        this.providers = new Map();
        // Opened resources
        this.resources = new Map();
    }
    TextContentResourceResolver.prototype.resolve = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var provider;
            return __generator(this, function (_a) {
                provider = this.providers.get(uri.scheme);
                if (provider) {
                    return [2 /*return*/, provider.provideResource(uri)];
                }
                throw new Error("Unable to find Text Content Resource Provider for scheme '" + uri.scheme + "'");
            });
        });
    };
    TextContentResourceResolver.prototype.registerContentProvider = function (scheme, proxy) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                if (this.providers.has(scheme)) {
                    throw new Error("Text Content Resource Provider for scheme '" + scheme + "' is already registered");
                }
                instance = this;
                this.providers.set(scheme, {
                    provideResource: function (uri) {
                        var resource = instance.resources.get(uri.toString());
                        if (resource) {
                            return resource;
                        }
                        resource = new TextContentResource(uri, proxy, {
                            dispose: function () {
                                instance.resources.delete(uri.toString());
                            }
                        });
                        instance.resources.set(uri.toString(), resource);
                        return resource;
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    TextContentResourceResolver.prototype.unregisterContentProvider = function (scheme) {
        if (!this.providers.delete(scheme)) {
            throw new Error("Text Content Resource Provider for scheme '" + scheme + "' has not been registered");
        }
    };
    TextContentResourceResolver.prototype.onContentChange = function (uri, content) {
        var resource = this.resources.get(uri);
        if (resource) {
            resource.setContent(content);
        }
    };
    TextContentResourceResolver = __decorate([
        inversify_1.injectable()
    ], TextContentResourceResolver);
    return TextContentResourceResolver;
}());
exports.TextContentResourceResolver = TextContentResourceResolver;
var TextContentResource = /** @class */ (function () {
    function TextContentResource(uri, proxy, disposable) {
        this.uri = uri;
        this.proxy = proxy;
        this.disposable = disposable;
        this.onDidChangeContentsEmmiter = new core_1.Emitter();
        this.onDidChangeContents = this.onDidChangeContentsEmmiter.event;
    }
    TextContentResource.prototype.readContents = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var content, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.cache) return [3 /*break*/, 1];
                        content = this.cache;
                        this.cache = undefined;
                        return [2 /*return*/, content];
                    case 1: return [4 /*yield*/, this.proxy.$provideTextDocumentContent(this.uri.toString())];
                    case 2:
                        content = _a.sent();
                        if (content) {
                            return [2 /*return*/, content];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, Promise.reject("Unable to get content for '" + this.uri.toString() + "'")];
                }
            });
        });
    };
    TextContentResource.prototype.dispose = function () {
        this.disposable.dispose();
    };
    TextContentResource.prototype.setContent = function (content) {
        this.cache = content;
        this.onDidChangeContentsEmmiter.fire(undefined);
    };
    return TextContentResource;
}());
exports.TextContentResource = TextContentResource;
//# sourceMappingURL=workspace-main.js.map