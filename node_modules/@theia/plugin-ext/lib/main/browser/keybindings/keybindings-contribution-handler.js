"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var keybinding_1 = require("@theia/core/lib/browser/keybinding");
var browser_1 = require("@theia/core/lib/browser");
var logger_1 = require("@theia/core/lib/common/logger");
var KeybindingsContributionPointHandler = /** @class */ (function () {
    function KeybindingsContributionPointHandler() {
    }
    KeybindingsContributionPointHandler.prototype.handle = function (contributions) {
        var _this = this;
        if (!contributions || !contributions.keybindings) {
            return;
        }
        var keybindings = contributions.keybindings;
        keybindings.forEach(function (keybinding) {
            try {
                var keybindingResult = _this.keybindingRegistry.getKeybindingsForKeySequence(browser_1.KeySequence.parse(keybinding.keybinding));
                _this.handleShadingKeybindings(keybinding, keybindingResult.shadow);
                _this.handlePartialKeybindings(keybinding, keybindingResult.partial);
            }
            catch (e) {
                _this.logger.error(e.message || e);
            }
        });
        this.keybindingRegistry.setKeymap(keybinding_1.KeybindingScope.USER, keybindings);
    };
    KeybindingsContributionPointHandler.prototype.handlePartialKeybindings = function (keybinding, partialKeybindings) {
        var _this = this;
        partialKeybindings.forEach(function (partial) {
            if (keybinding.context === undefined || keybinding.context === partial.context) {
                _this.logger.warn("Partial keybinding is ignored; " + keybinding_1.Keybinding.stringify(keybinding) + " shadows " + keybinding_1.Keybinding.stringify(partial));
            }
        });
    };
    KeybindingsContributionPointHandler.prototype.handleShadingKeybindings = function (keybinding, shadingKeybindings) {
        var _this = this;
        shadingKeybindings.forEach(function (shadow) {
            if (shadow.context === undefined || shadow.context === keybinding.context) {
                _this.keybindingRegistry.unregisterKeybinding(shadow);
                _this.logger.warn("Shadowing keybinding is ignored; " + keybinding_1.Keybinding.stringify(shadow) + ", shadows " + keybinding_1.Keybinding.stringify(keybinding));
            }
        });
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], KeybindingsContributionPointHandler.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(keybinding_1.KeybindingRegistry),
        __metadata("design:type", keybinding_1.KeybindingRegistry)
    ], KeybindingsContributionPointHandler.prototype, "keybindingRegistry", void 0);
    KeybindingsContributionPointHandler = __decorate([
        inversify_1.injectable()
    ], KeybindingsContributionPointHandler);
    return KeybindingsContributionPointHandler;
}());
exports.KeybindingsContributionPointHandler = KeybindingsContributionPointHandler;
//# sourceMappingURL=keybindings-contribution-handler.js.map