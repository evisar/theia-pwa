"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../../api/plugin-api");
var application_shell_1 = require("@theia/core/lib/browser/shell/application-shell");
var keybinding_1 = require("@theia/core/lib/browser/keybinding");
var webview_1 = require("./webview/webview");
var theming_1 = require("@theia/core/lib/browser/theming");
var theme_rules_service_1 = require("./webview/theme-rules-service");
var core_1 = require("@theia/core");
var WebviewsMainImpl = /** @class */ (function () {
    function WebviewsMainImpl(rpc, container) {
        this.themeService = theming_1.ThemeService.get();
        this.themeRulesService = theme_rules_service_1.ThemeRulesService.get();
        this.views = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.WEBVIEWS_EXT);
        this.shell = container.get(application_shell_1.ApplicationShell);
        this.keybindingRegistry = container.get(keybinding_1.KeybindingRegistry);
    }
    WebviewsMainImpl.prototype.$createWebviewPanel = function (viewId, viewType, title, showOptions, options, extensionLocation) {
        var _this = this;
        var toDispose = new core_1.DisposableCollection();
        var view = new webview_1.WebviewWidget(title, {
            allowScripts: options ? options.enableScripts : false
        }, {
            onMessage: function (m) {
                _this.proxy.$onMessage(viewId, m);
            },
            onKeyboardEvent: function (e) {
                _this.keybindingRegistry.run(e);
            },
            onLoad: function (contentDocument) {
                var styleId = 'webview-widget-theme';
                var styleElement;
                if (!toDispose.disposed) {
                    // if reload the frame
                    toDispose.dispose();
                    styleElement = contentDocument.getElementById(styleId);
                }
                if (!styleElement) {
                    var parent_1 = contentDocument.head ? contentDocument.head : contentDocument.body;
                    styleElement = _this.themeRulesService.createStyleSheet(parent_1);
                    styleElement.id = styleId;
                    parent_1.appendChild((styleElement));
                }
                _this.themeRulesService.setRules(styleElement, _this.themeRulesService.getCurrentThemeRules());
                toDispose.push(_this.themeService.onThemeChange(function () {
                    _this.themeRulesService.setRules(styleElement, _this.themeRulesService.getCurrentThemeRules());
                }));
            }
        });
        view.disposed.connect(function () {
            toDispose.dispose();
            _this.onCloseView(viewId);
        });
        this.views.set(viewId, view);
        this.shell.addWidget(view, { area: 'main' });
        this.shell.activateWidget(view.id);
    };
    WebviewsMainImpl.prototype.$disposeWebview = function (handle) {
        var view = this.views.get(handle);
        if (view) {
            view.dispose();
        }
    };
    WebviewsMainImpl.prototype.$reveal = function (handle, showOptions) {
        throw new Error('Method not implemented.');
    };
    WebviewsMainImpl.prototype.$setTitle = function (handle, value) {
        var webview = this.getWebview(handle);
        webview.title.label = value;
    };
    WebviewsMainImpl.prototype.$setIconPath = function (handle, iconPath) {
        var webview = this.getWebview(handle);
        webview.setIconClass(iconPath ? "webview-icon " + webview.id + "-file-icon" : '');
        this.themeRulesService.setIconPath(webview.id, iconPath);
    };
    WebviewsMainImpl.prototype.$setHtml = function (handle, value) {
        var webview = this.getWebview(handle);
        webview.setHTML(value);
    };
    WebviewsMainImpl.prototype.$setOptions = function (handle, options) {
        var webview = this.getWebview(handle);
        webview.setOptions({ allowScripts: options ? options.enableScripts : false });
    };
    // tslint:disable-next-line:no-any
    WebviewsMainImpl.prototype.$postMessage = function (handle, value) {
        var webview = this.getWebview(handle);
        if (webview) {
            webview.postMessage(value);
        }
        return Promise.resolve(webview !== undefined);
    };
    WebviewsMainImpl.prototype.$registerSerializer = function (viewType) {
        throw new Error('Method not implemented.');
    };
    WebviewsMainImpl.prototype.$unregisterSerializer = function (viewType) {
        throw new Error('Method not implemented.');
    };
    WebviewsMainImpl.prototype.getWebview = function (viewId) {
        var webview = this.views.get(viewId);
        if (!webview) {
            throw new Error("Unknown Webview: " + viewId);
        }
        return webview;
    };
    WebviewsMainImpl.prototype.onCloseView = function (viewId) {
        var _this = this;
        var view = this.views.get(viewId);
        if (view) {
            this.themeRulesService.setIconPath(view.id, undefined);
        }
        var cleanUp = function () {
            _this.views.delete(viewId);
        };
        this.proxy.$onDidDisposeWebviewPanel(viewId).then(cleanUp, cleanUp);
    };
    return WebviewsMainImpl;
}());
exports.WebviewsMainImpl = WebviewsMainImpl;
//# sourceMappingURL=webviews-main.js.map