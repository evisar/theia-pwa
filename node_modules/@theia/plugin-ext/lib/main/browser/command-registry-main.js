"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var command_1 = require("@theia/core/lib/common/command");
var plugin_api_1 = require("../../api/plugin-api");
var CommandRegistryMainImpl = /** @class */ (function () {
    function CommandRegistryMainImpl(rpc, container) {
        this.disposables = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.COMMAND_REGISTRY_EXT);
        this.delegate = container.get(command_1.CommandRegistry);
    }
    CommandRegistryMainImpl.prototype.$registerCommand = function (command) {
        var _this = this;
        this.disposables.set(command.id, this.delegate.registerCommand(command, {
            // tslint:disable-next-line:no-any
            execute: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _a;
                (_a = _this.proxy).$executeCommand.apply(_a, __spread([command.id], args));
            },
            // Always enabled - a command can be executed programmatically or via the commands palette.
            isEnabled: function () { return true; },
            // By default, a command isn't be visible in all menus but in the commands palette only.
            // Visibility rules are defined via the `menus` contribution point.
            isVisible: function () { return false; }
        }));
    };
    CommandRegistryMainImpl.prototype.$unregisterCommand = function (id) {
        var dis = this.disposables.get(id);
        if (dis) {
            dis.dispose();
            this.disposables.delete(id);
        }
    };
    // tslint:disable-next-line:no-any
    CommandRegistryMainImpl.prototype.$executeCommand = function (id, args) {
        var _a;
        try {
            return Promise.resolve((_a = this.delegate).executeCommand.apply(_a, __spread([id], args)));
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    CommandRegistryMainImpl.prototype.$getCommands = function () {
        throw new Error('Method not implemented.');
    };
    return CommandRegistryMainImpl;
}());
exports.CommandRegistryMainImpl = CommandRegistryMainImpl;
//# sourceMappingURL=command-registry-main.js.map