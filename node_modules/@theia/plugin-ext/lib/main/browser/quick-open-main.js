"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var quick_open_model_1 = require("@theia/core/lib/browser/quick-open/quick-open-model");
var plugin_api_1 = require("../../api/plugin-api");
var monaco_quick_open_service_1 = require("@theia/monaco/lib/browser/monaco-quick-open-service");
var browser_1 = require("@theia/core/lib/browser");
var QuickOpenMainImpl = /** @class */ (function () {
    function QuickOpenMainImpl(rpc, container) {
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.QUICK_OPEN_EXT);
        this.delegate = container.get(monaco_quick_open_service_1.MonacoQuickOpenService);
        this.quickInput = container.get(browser_1.QuickInputService);
    }
    QuickOpenMainImpl.prototype.cleanUp = function () {
        this.items = undefined;
        this.acceptor = undefined;
        if (this.activeElement) {
            this.activeElement.focus();
        }
        this.activeElement = undefined;
    };
    QuickOpenMainImpl.prototype.$show = function (options) {
        var _this = this;
        this.activeElement = window.document.activeElement;
        this.delegate.open(this, {
            fuzzyMatchDescription: options.matchOnDescription,
            fuzzyMatchLabel: true,
            fuzzyMatchDetail: options.matchOnDetail,
            placeholder: options.placeHolder,
            onClose: function () {
                _this.cleanUp();
            }
        });
        return new Promise(function (resolve, reject) {
            _this.doResolve = resolve;
        });
    };
    // tslint:disable-next-line:no-any
    QuickOpenMainImpl.prototype.$setItems = function (items) {
        var _this = this;
        var e_1, _a;
        this.items = [];
        var _loop_1 = function (i) {
            this_1.items.push(new quick_open_model_1.QuickOpenItem({
                label: i.label,
                description: i.description,
                detail: i.detail,
                run: function (mode) {
                    if (mode === quick_open_model_1.QuickOpenMode.PREVIEW) {
                        _this.proxy.$onItemSelected(i.handle);
                    }
                    else if (mode === quick_open_model_1.QuickOpenMode.OPEN) {
                        _this.doResolve(i.handle);
                        _this.cleanUp();
                    }
                    return true;
                }
            }));
        };
        var this_1 = this;
        try {
            for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                var i = items_1_1.value;
                _loop_1(i);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.acceptor) {
            this.acceptor(this.items);
        }
        return Promise.resolve();
    };
    // tslint:disable-next-line:no-any
    QuickOpenMainImpl.prototype.$setError = function (error) {
        throw new Error('Method not implemented.');
    };
    QuickOpenMainImpl.prototype.$input = function (options, validateInput) {
        var _this = this;
        if (validateInput) {
            options.validateInput = function (val) { return _this.proxy.$validateInput(val); };
        }
        return this.quickInput.open(options);
    };
    QuickOpenMainImpl.prototype.onType = function (lookFor, acceptor) {
        this.acceptor = acceptor;
        if (this.items) {
            acceptor(this.items);
        }
    };
    return QuickOpenMainImpl;
}());
exports.QuickOpenMainImpl = QuickOpenMainImpl;
//# sourceMappingURL=quick-open-main.js.map