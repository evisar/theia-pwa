/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { MenuPath, ILogger, CommandRegistry } from '@theia/core';
import { MenuModelRegistry } from '@theia/core/lib/common';
import { PluginContribution, Menu } from '../../../common';
import { ContextKeyService } from '../context-key/context-key';
import { CommandHandler } from '@theia/core';
export declare class MenusContributionPointHandler {
    protected readonly menuRegistry: MenuModelRegistry;
    protected readonly commands: CommandRegistry;
    protected readonly logger: ILogger;
    protected readonly contextKeyService: ContextKeyService;
    protected readonly registeredMenus: Map<string, Set<string>>;
    /**
     * Handles the `menus` contribution point.
     * In VSCode, a menu can have more than one item for the same command. Each item may have it's own visibility rules.
     * In Theia, a menu can't have more than one item for the same command.
     * So, several handlers for the same command are registered to support different visibility rules for a menu item in different contexts.
     */
    handle(contributions: PluginContribution): void;
    protected static parseMenuPath(value: string): MenuPath | undefined;
    protected isMenuItemRegistered(location: string, commandId: string): boolean;
    protected registerMenuAction(menuPath: MenuPath, location: string, menu: Menu): void;
    /** Register a handler for the command that should be called by the specified menu item. */
    protected registerCommandHandler(menu: Menu): void;
    /**
     * Creates a command handler that executes nothing but allows
     * a related menu item be visible depending on the provided rules.
     */
    protected newHandler(menu: Menu): CommandHandler;
}
//# sourceMappingURL=menus-contribution-handler.d.ts.map