"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/editor/lib/browser");
var common_1 = require("@theia/core/lib/common");
var navigator_contribution_1 = require("@theia/navigator/lib/browser/navigator-contribution");
var tree_views_main_1 = require("../view/tree-views-main");
var context_key_1 = require("../context-key/context-key");
var MenusContributionPointHandler = /** @class */ (function () {
    function MenusContributionPointHandler() {
        // menu location to command IDs
        this.registeredMenus = new Map();
    }
    MenusContributionPointHandler_1 = MenusContributionPointHandler;
    /**
     * Handles the `menus` contribution point.
     * In VSCode, a menu can have more than one item for the same command. Each item may have it's own visibility rules.
     * In Theia, a menu can't have more than one item for the same command.
     * So, several handlers for the same command are registered to support different visibility rules for a menu item in different contexts.
     */
    MenusContributionPointHandler.prototype.handle = function (contributions) {
        var _this = this;
        var allMenus = contributions.menus;
        if (!allMenus) {
            return;
        }
        var _loop_1 = function (location_1) {
            if (allMenus.hasOwnProperty(location_1)) {
                var menuPath_1 = MenusContributionPointHandler_1.parseMenuPath(location_1);
                if (!menuPath_1) {
                    this_1.logger.warn("Plugin contributes items to a menu with invalid identifier: " + location_1);
                    return "continue";
                }
                var menus = allMenus[location_1];
                menus.forEach(function (menu) {
                    if (!_this.isMenuItemRegistered(location_1, menu.command)) {
                        _this.registerMenuAction(menuPath_1, location_1, menu);
                    }
                });
                menus.filter(function (menu) { return menu.when; }).forEach(function (menu) { return _this.registerCommandHandler(menu); });
            }
        };
        var this_1 = this;
        for (var location_1 in allMenus) {
            _loop_1(location_1);
        }
    };
    MenusContributionPointHandler.parseMenuPath = function (value) {
        switch (value) {
            case 'editor/context': return browser_1.EDITOR_CONTEXT_MENU;
            case 'explorer/context': return navigator_contribution_1.NAVIGATOR_CONTEXT_MENU;
            case 'view/item/context': return tree_views_main_1.VIEW_ITEM_CONTEXT_MENU;
        }
    };
    MenusContributionPointHandler.prototype.isMenuItemRegistered = function (location, commandId) {
        var commands = this.registeredMenus.get(location);
        return commands !== undefined && commands.has(commandId);
    };
    MenusContributionPointHandler.prototype.registerMenuAction = function (menuPath, location, menu) {
        var _this = this;
        var _a = __read((menu.group || '').split('@'), 2), _b = _a[0], group = _b === void 0 ? '' : _b, _c = _a[1], order = _c === void 0 ? undefined : _c;
        // Registering a menu action requires the related command to be already registered.
        // But Theia plugin registers the commands dynamically via the Commands API.
        // Let's wait for ~2 sec. It should be enough to finish registering all the contributed commands.
        // FIXME: remove this workaround (timer) once the https://github.com/theia-ide/theia/issues/3344 is fixed
        setTimeout(function () {
            _this.menuRegistry.registerMenuAction(__spread(menuPath, [group]), {
                commandId: menu.command,
                order: order
            });
        }, 2000);
        var commands = this.registeredMenus.get(location);
        if (!commands) {
            commands = new Set();
        }
        commands.add(menu.command);
        this.registeredMenus.set(location, commands);
    };
    /** Register a handler for the command that should be called by the specified menu item. */
    MenusContributionPointHandler.prototype.registerCommandHandler = function (menu) {
        this.commands.registerHandler(menu.command, this.newHandler(menu));
    };
    /**
     * Creates a command handler that executes nothing but allows
     * a related menu item be visible depending on the provided rules.
     */
    MenusContributionPointHandler.prototype.newHandler = function (menu) {
        var _this = this;
        return {
            execute: function () { return undefined; },
            isEnabled: function () { return false; },
            isVisible: function () { return _this.contextKeyService.contextMatchesRules(context_key_1.ContextKeyExpr.deserialize(menu.when)); }
        };
    };
    var MenusContributionPointHandler_1;
    __decorate([
        inversify_1.inject(common_1.MenuModelRegistry),
        __metadata("design:type", common_1.MenuModelRegistry)
    ], MenusContributionPointHandler.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(core_1.CommandRegistry),
        __metadata("design:type", core_1.CommandRegistry)
    ], MenusContributionPointHandler.prototype, "commands", void 0);
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], MenusContributionPointHandler.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(context_key_1.ContextKeyService),
        __metadata("design:type", Object)
    ], MenusContributionPointHandler.prototype, "contextKeyService", void 0);
    MenusContributionPointHandler = MenusContributionPointHandler_1 = __decorate([
        inversify_1.injectable()
    ], MenusContributionPointHandler);
    return MenusContributionPointHandler;
}());
exports.MenusContributionPointHandler = MenusContributionPointHandler;
//# sourceMappingURL=menus-contribution-handler.js.map