/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="@typefox/monaco-editor-core/monaco" />
import { LanguagesMain, SerializedLanguageConfiguration } from '../../api/plugin-api';
import { interfaces } from 'inversify';
import { SerializedDocumentFilter, MarkerData, WorkspaceSymbolProvider } from '../../api/model';
import { RPCProtocol } from '../../api/rpc-protocol';
import { UriComponents } from '../../common/uri-components';
import { LanguageSelector } from '../../plugin/languages';
import { MonacoModelIdentifier } from 'monaco-languageclient/lib';
export declare class LanguagesMainImpl implements LanguagesMain {
    private ml;
    private readonly proxy;
    private readonly disposables;
    constructor(rpc: RPCProtocol, container: interfaces.Container);
    $getLanguages(): Promise<string[]>;
    $unregister(handle: number): void;
    $setLanguageConfiguration(handle: number, languageId: string, configuration: SerializedLanguageConfiguration): void;
    $registerCompletionSupport(handle: number, selector: SerializedDocumentFilter[], triggerCharacters: string[], supportsResolveDetails: boolean): void;
    $registerDefinitionProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    $registeReferenceProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createReferenceProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.ReferenceProvider;
    $registerSignatureHelpProvider(handle: number, selector: SerializedDocumentFilter[], triggerCharacters: string[]): void;
    $clearDiagnostics(id: string): void;
    $changeDiagnostics(id: string, delta: [UriComponents, MarkerData[]][]): void;
    $registerImplementationProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createImplementationProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.ImplementationProvider;
    $registerTypeDefinitionProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createTypeDefinitionProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.TypeDefinitionProvider;
    $registerHoverProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createHoverProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.HoverProvider;
    $registerDocumentHighlightProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createDocumentHighlightProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.DocumentHighlightProvider;
    $registerWorkspaceSymbolProvider(handle: number): void;
    protected createWorkspaceSymbolProvider(handle: number): WorkspaceSymbolProvider;
    $registerDocumentLinkProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createLinkProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.LinkProvider;
    $registerCodeLensSupport(handle: number, selector: SerializedDocumentFilter[], eventHandle: number): void;
    protected createCodeLensProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.CodeLensProvider;
    $emitCodeLensEvent(eventHandle: number, event?: any): void;
    $registerOutlineSupport(handle: number, selector: SerializedDocumentFilter[]): void;
    protected createDocumentSymbolProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.DocumentSymbolProvider;
    protected createDefinitionProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.DefinitionProvider;
    protected createSignatureHelpProvider(handle: number, selector: LanguageSelector | undefined, triggerCharacters: string[]): monaco.languages.SignatureHelpProvider;
    $registerDocumentFormattingSupport(handle: number, selector: SerializedDocumentFilter[]): void;
    createDocumentFormattingSupport(handle: number, selector: LanguageSelector | undefined): monaco.languages.DocumentFormattingEditProvider;
    $registerRangeFormattingProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    createRangeFormattingProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.DocumentRangeFormattingEditProvider;
    $registerOnTypeFormattingProvider(handle: number, selector: SerializedDocumentFilter[], autoFormatTriggerCharacters: string[]): void;
    protected createOnTypeFormattingProvider(handle: number, selector: LanguageSelector | undefined, autoFormatTriggerCharacters: string[]): monaco.languages.OnTypeFormattingEditProvider;
    $registerFoldingRangeProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    createFoldingRangeProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.FoldingRangeProvider;
    $registerDocumentColorProvider(handle: number, selector: SerializedDocumentFilter[]): void;
    createColorProvider(handle: number, selector: LanguageSelector | undefined): monaco.languages.DocumentColorProvider;
    $registerQuickFixProvider(handle: number, selector: SerializedDocumentFilter[], codeActionKinds?: string[]): void;
    protected createQuickFixProvider(handle: number, selector: LanguageSelector | undefined, providedCodeActionKinds?: string[]): monaco.languages.CodeActionProvider;
    protected matchModel(selector: LanguageSelector | undefined, model: MonacoModelIdentifier): boolean;
    protected matchLanguage(selector: LanguageSelector | undefined, languageId: string): boolean;
}
//# sourceMappingURL=languages-main.d.ts.map