"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var preferences_1 = require("@theia/core/lib/browser/preferences");
var plugin_api_1 = require("../../api/plugin-api");
var types_impl_1 = require("../../plugin/types-impl");
var PreferenceRegistryMainImpl = /** @class */ (function () {
    function PreferenceRegistryMainImpl(prc, container) {
        var _this = this;
        this.proxy = prc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.PREFERENCE_REGISTRY_EXT);
        this.preferenceService = container.get(preferences_1.PreferenceService);
        var preferenceServiceImpl = container.get(preferences_1.PreferenceServiceImpl);
        preferenceServiceImpl.onPreferenceChanged(function (e) {
            _this.proxy.$acceptConfigurationChanged(preferenceServiceImpl.getPreferences(), e);
        });
    }
    // tslint:disable-next-line:no-any
    PreferenceRegistryMainImpl.prototype.$updateConfigurationOption = function (target, key, value) {
        var scope = this.parseConfigurationTarget(target);
        return this.preferenceService.set(key, value, scope);
    };
    PreferenceRegistryMainImpl.prototype.$removeConfigurationOption = function (target, key) {
        var scope = this.parseConfigurationTarget(target);
        return this.preferenceService.set(key, undefined, scope);
    };
    PreferenceRegistryMainImpl.prototype.parseConfigurationTarget = function (arg) {
        if (arg === void 0 || arg === null) {
            return preferences_1.PreferenceScope.Workspace;
        }
        if (typeof arg === 'boolean') {
            return arg ? preferences_1.PreferenceScope.User : preferences_1.PreferenceScope.Workspace;
        }
        if (arg === types_impl_1.ConfigurationTarget.User) {
            return preferences_1.PreferenceScope.User;
        }
        else {
            return preferences_1.PreferenceScope.Workspace;
        }
    };
    return PreferenceRegistryMainImpl;
}());
exports.PreferenceRegistryMainImpl = PreferenceRegistryMainImpl;
//# sourceMappingURL=preference-registry-main.js.map