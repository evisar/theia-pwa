/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { interfaces, Container } from 'inversify';
import { TreeViewsMain, TreeViewsExt } from '../../../api/plugin-api';
import { RPCProtocol } from '@theia/plugin-ext/src/api/rpc-protocol';
import { Message } from '@phosphor/messaging';
import { TreeWidget, ContextMenuRenderer, TreeModel, TreeNode, NodeProps, TreeProps, SelectableTreeNode, ExpandableTreeNode, CompositeTreeNode, TreeImpl } from '@theia/core/lib/browser';
import { TreeViewItem } from '../../../api/plugin-api';
import { MenuPath } from '@theia/core/lib/common/menu';
import * as React from 'react';
import { ContextKey } from '../context-key/context-key';
export declare const TREE_NODE_HYPERLINK = "theia-TreeNodeHyperlink";
export declare const VIEW_ITEM_CONTEXT_MENU: MenuPath;
export declare class TreeViewsMainImpl implements TreeViewsMain {
    private container;
    private proxy;
    /**
     * key: Tree View ID
     * value: TreeViewDataProviderMain
     */
    private dataProviders;
    private treeViewWidgets;
    private viewRegistry;
    protected viewCtxKey: ContextKey<string>;
    protected viewItemCtxKey: ContextKey<string>;
    constructor(rpc: RPCProtocol, container: interfaces.Container);
    $registerTreeDataProvider(treeViewId: string): void;
    $refresh(treeViewId: string): void;
    $reveal(treeViewId: string, treeItemId: string): Promise<any>;
    createTreeViewContainer(dataProvider: TreeViewDataProviderMain): Container;
    handleTreeEvents(treeViewId: string, treeViewWidget: TreeViewWidget): void;
}
export interface TreeViewFolderNode extends SelectableTreeNode, ExpandableTreeNode, CompositeTreeNode {
}
export interface TreeViewFileNode extends SelectableTreeNode {
}
export declare class TreeViewDataProviderMain {
    private treeViewId;
    private proxy;
    constructor(treeViewId: string, proxy: TreeViewsExt);
    createFolderNode(item: TreeViewItem): TreeViewFolderNode;
    createFileNode(item: TreeViewItem): TreeViewFileNode;
    /**
     * Creates TreeNode
     *
     * @param item tree view item from the ext
     */
    createTreeNode(item: TreeViewItem): TreeNode;
    resolveChildren(itemId: string): Promise<TreeNode[]>;
}
export declare class TreeViewWidget extends TreeWidget {
    readonly treeProps: TreeProps;
    readonly model: TreeModel;
    readonly contextMenuRenderer: ContextMenuRenderer;
    readonly dataProvider: TreeViewDataProviderMain;
    constructor(treeProps: TreeProps, model: TreeModel, contextMenuRenderer: ContextMenuRenderer, dataProvider: TreeViewDataProviderMain);
    protected onAfterAttach(msg: Message): void;
    updateWidget(): void;
    renderIcon(node: TreeNode, props: NodeProps): React.ReactNode;
    protected renderCaption(node: TreeNode, props: NodeProps): React.ReactNode;
    getCaption(node: TreeNode): React.ReactNode[];
}
export declare class PluginTree extends TreeImpl {
    private readonly dataProvider;
    constructor(dataProvider: TreeViewDataProviderMain);
    protected resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]>;
}
//# sourceMappingURL=tree-views-main.d.ts.map