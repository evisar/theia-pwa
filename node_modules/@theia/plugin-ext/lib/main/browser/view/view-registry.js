"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var frontend_application_state_1 = require("@theia/core/lib/browser/frontend-application-state");
var views_container_widget_1 = require("./views-container-widget");
var ViewRegistry = /** @class */ (function () {
    function ViewRegistry() {
        this.containers = new Array();
        this.containersWidgets = new Map();
        this.treeViewWidgets = new Map();
    }
    ViewRegistry.prototype.init = function () {
        var _this = this;
        this.applicationStateService.reachedState('ready').then(function () {
            _this.showContainers();
            _this.showTreeViewWidgets();
        });
    };
    ViewRegistry.prototype.getArea = function (location) {
        switch (location) {
            case 'right': return 'right';
            case 'bottom': return 'bottom';
            case 'top': return 'top';
        }
        return 'left';
    };
    ViewRegistry.prototype.registerViewContainer = function (location, viewContainer) {
        var registry = {
            container: viewContainer,
            area: this.getArea(location),
            views: []
        };
        this.containers.push(registry);
    };
    ViewRegistry.prototype.registerView = function (location, view) {
        this.containers.forEach(function (containerRegistry) {
            if (location === containerRegistry.container.id) {
                containerRegistry.views.push(view);
            }
        });
    };
    ViewRegistry.prototype.showContainers = function () {
        var _this = this;
        // Remember the currently active widget
        var activeWidget = this.applicationShell.activeWidget;
        // Show views containers
        this.containers.forEach(function (registry) {
            var widget = new views_container_widget_1.ViewsContainerWidget(registry.container, registry.views);
            _this.containersWidgets.set(registry.container.id, widget);
            var tabBar = _this.applicationShell.getTabBarFor(widget);
            if (!tabBar) {
                var widgetArgs = {
                    area: registry.area
                };
                _this.applicationShell.addWidget(widget, widgetArgs);
            }
        });
        // Restore active widget
        if (activeWidget) {
            this.applicationShell.activateWidget(activeWidget.id);
        }
    };
    ViewRegistry.prototype.onRegisterTreeView = function (treeViewid, treeViewWidget) {
        this.treeViewWidgets.set(treeViewid, treeViewWidget);
    };
    ViewRegistry.prototype.showTreeViewWidgets = function () {
        var _this = this;
        this.treeViewWidgets.forEach(function (treeViewWidget, treeViewId) {
            _this.containersWidgets.forEach(function (viewsContainerWidget, viewsContainerId) {
                if (viewsContainerWidget.hasView(treeViewId)) {
                    viewsContainerWidget.addWidget(treeViewId, treeViewWidget);
                    _this.applicationShell.activateWidget(viewsContainerWidget.id);
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], ViewRegistry.prototype, "applicationShell", void 0);
    __decorate([
        inversify_1.inject(frontend_application_state_1.FrontendApplicationStateService),
        __metadata("design:type", frontend_application_state_1.FrontendApplicationStateService)
    ], ViewRegistry.prototype, "applicationStateService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ViewRegistry.prototype, "init", null);
    ViewRegistry = __decorate([
        inversify_1.injectable()
    ], ViewRegistry);
    return ViewRegistry;
}());
exports.ViewRegistry = ViewRegistry;
//# sourceMappingURL=view-registry.js.map