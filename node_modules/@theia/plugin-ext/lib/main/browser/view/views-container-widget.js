"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@theia/core/lib/browser");
function createElement(className) {
    var div = document.createElement('div');
    if (className) {
        div.classList.add(className);
    }
    return div;
}
exports.createElement = createElement;
var ViewsContainerWidget = /** @class */ (function (_super) {
    __extends(ViewsContainerWidget, _super);
    function ViewsContainerWidget(viewContainer, views) {
        var _this = _super.call(this) || this;
        _this.viewContainer = viewContainer;
        _this.views = views;
        _this.sections = new Map();
        _this.id = "views-container-widget-" + viewContainer.id;
        _this.title.closable = true;
        _this.title.caption = _this.title.label = viewContainer.title;
        _this.addClass('theia-views-container');
        // create container title
        _this.sectionTitle = createElement('theia-views-container-title');
        _this.sectionTitle.innerText = viewContainer.title;
        _this.node.appendChild(_this.sectionTitle);
        // update sections
        var instance = _this;
        _this.views.forEach(function (view) {
            var section = new ViewContainerSection(view, instance);
            _this.sections.set(view.id, section);
            _this.node.appendChild(section.node);
        });
        return _this;
    }
    ViewsContainerWidget.prototype.hasView = function (viewId) {
        var result = this.views.find(function (view) { return view.id === viewId; });
        return result !== undefined;
    };
    ViewsContainerWidget.prototype.addWidget = function (viewId, viewWidget) {
        var section = this.sections.get(viewId);
        if (section) {
            section.addViewWidget(viewWidget);
            this.updateDimensions();
        }
    };
    ViewsContainerWidget.prototype.onResize = function (msg) {
        _super.prototype.onResize.call(this, msg);
        this.updateDimensions();
    };
    ViewsContainerWidget.prototype.updateDimensions = function () {
        var _this = this;
        var visibleSections = 0;
        var availableHeight = this.node.offsetHeight;
        availableHeight -= this.sectionTitle.offsetHeight;
        // Determine available space for sections and how much sections are opened
        this.sections.forEach(function (section, key) {
            availableHeight -= section.header.offsetHeight;
            if (section.opened) {
                visibleSections++;
            }
        });
        // Do nothing if there is no opened sections
        if (visibleSections === 0) {
            return;
        }
        // Get section height
        var sectionHeight = availableHeight / visibleSections;
        // Update height of opened sections
        this.sections.forEach(function (section, key) {
            if (section.opened) {
                section.content.style.height = sectionHeight + 'px';
            }
        });
        setTimeout(function () {
            // Update content of visible sections
            _this.sections.forEach(function (section, key) {
                if (section.opened) {
                    section.update();
                }
            });
        }, 1);
    };
    return ViewsContainerWidget;
}(browser_1.BaseWidget));
exports.ViewsContainerWidget = ViewsContainerWidget;
var ViewContainerSection = /** @class */ (function () {
    function ViewContainerSection(view, container) {
        this.view = view;
        this.container = container;
        this.opened = true;
        this.node = createElement('theia-views-container-section');
        this.createTitle();
        this.createContent();
    }
    ViewContainerSection.prototype.createTitle = function () {
        var _this = this;
        this.header = createElement('theia-views-container-section-title');
        this.node.appendChild(this.header);
        this.control = createElement('theia-views-container-section-control');
        this.control.setAttribute('opened', '' + this.opened);
        this.header.appendChild(this.control);
        this.title = createElement('theia-views-container-section-label');
        this.title.innerText = this.view.name;
        this.header.appendChild(this.title);
        this.header.onclick = function () { _this.handleClick(); };
    };
    ViewContainerSection.prototype.createContent = function () {
        this.content = createElement('theia-views-container-section-content');
        this.content.setAttribute('opened', '' + this.opened);
        this.node.appendChild(this.content);
        this.content.innerHTML = '<div style=\'padding: 20px 0px; text-align: center; \'>' + this.view.name + '</div>';
    };
    ViewContainerSection.prototype.handleClick = function () {
        var _this = this;
        this.opened = !this.opened;
        this.control.setAttribute('opened', '' + this.opened);
        this.content.setAttribute('opened', '' + this.opened);
        this.container.updateDimensions();
        setTimeout(function () {
            if (_this.opened) {
                _this.update();
            }
        }, 1);
    };
    ViewContainerSection.prototype.addViewWidget = function (viewWidget) {
        var _this = this;
        this.content.innerHTML = '';
        this.viewWidget = viewWidget;
        browser_1.Widget.attach(viewWidget, this.content);
        viewWidget.model.onChanged(function (e) {
            _this.update();
        });
        this.update();
    };
    ViewContainerSection.prototype.update = function () {
        if (this.viewWidget) {
            this.viewWidget.updateWidget();
        }
    };
    return ViewContainerSection;
}());
exports.ViewContainerSection = ViewContainerSection;
//# sourceMappingURL=views-container-widget.js.map