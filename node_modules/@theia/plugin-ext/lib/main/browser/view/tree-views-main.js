"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var plugin_api_1 = require("../../../api/plugin-api");
var view_registry_1 = require("./view-registry");
var browser_1 = require("@theia/core/lib/browser");
var plugin_api_2 = require("../../../api/plugin-api");
var ReactDOM = require("react-dom");
var React = require("react");
var context_key_1 = require("../context-key/context-key");
exports.TREE_NODE_HYPERLINK = 'theia-TreeNodeHyperlink';
exports.VIEW_ITEM_CONTEXT_MENU = ['view-item-context-menu'];
var TreeViewsMainImpl = /** @class */ (function () {
    function TreeViewsMainImpl(rpc, container) {
        this.container = container;
        /**
         * key: Tree View ID
         * value: TreeViewDataProviderMain
         */
        this.dataProviders = new Map();
        this.treeViewWidgets = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.TREE_VIEWS_EXT);
        this.viewRegistry = container.get(view_registry_1.ViewRegistry);
        var contextKeyService = this.container.get(context_key_1.ContextKeyService);
        this.viewCtxKey = contextKeyService.createKey('view', '');
        this.viewItemCtxKey = contextKeyService.createKey('viewItem', '');
    }
    TreeViewsMainImpl.prototype.$registerTreeDataProvider = function (treeViewId) {
        var dataProvider = new TreeViewDataProviderMain(treeViewId, this.proxy);
        this.dataProviders.set(treeViewId, dataProvider);
        var treeViewContainer = this.createTreeViewContainer(dataProvider);
        var treeViewWidget = treeViewContainer.get(TreeViewWidget);
        this.treeViewWidgets.set(treeViewId, treeViewWidget);
        this.viewRegistry.onRegisterTreeView(treeViewId, treeViewWidget);
        this.handleTreeEvents(treeViewId, treeViewWidget);
    };
    TreeViewsMainImpl.prototype.$refresh = function (treeViewId) {
        var treeViewWidget = this.treeViewWidgets.get(treeViewId);
        if (treeViewWidget) {
            treeViewWidget.model.refresh();
        }
    };
    // tslint:disable-next-line:no-any
    TreeViewsMainImpl.prototype.$reveal = function (treeViewId, treeItemId) {
        return __awaiter(this, void 0, void 0, function () {
            var treeViewWidget, treeNode;
            return __generator(this, function (_a) {
                treeViewWidget = this.treeViewWidgets.get(treeViewId);
                if (treeViewWidget) {
                    treeNode = treeViewWidget.model.getNode(treeItemId);
                    if (treeNode && browser_1.SelectableTreeNode.is(treeNode)) {
                        treeViewWidget.model.selectNode(treeNode);
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    TreeViewsMainImpl.prototype.createTreeViewContainer = function (dataProvider) {
        var child = browser_1.createTreeContainer(this.container, {
            contextMenuPath: exports.VIEW_ITEM_CONTEXT_MENU
        });
        child.bind(TreeViewDataProviderMain).toConstantValue(dataProvider);
        child.unbind(browser_1.TreeImpl);
        child.bind(PluginTree).toSelf();
        child.rebind(browser_1.Tree).toDynamicValue(function (ctx) { return ctx.container.get(PluginTree); });
        child.unbind(browser_1.TreeWidget);
        child.bind(TreeViewWidget).toSelf();
        return child;
    };
    TreeViewsMainImpl.prototype.handleTreeEvents = function (treeViewId, treeViewWidget) {
        var _this = this;
        treeViewWidget.model.onExpansionChanged(function (event) {
            _this.proxy.$setExpanded(treeViewId, event.id, event.expanded);
        });
        treeViewWidget.model.onSelectionChanged(function (event) {
            if (event.length === 1) {
                var _a = __read(event[0].id.split('/'), 2), id = _a[0], _b = _a[1], contextValue = _b === void 0 ? '' : _b;
                _this.proxy.$setSelection(treeViewId, id);
                _this.viewItemCtxKey.set(contextValue);
            }
            else {
                _this.viewItemCtxKey.set('');
            }
            _this.viewCtxKey.set(treeViewId);
        });
    };
    return TreeViewsMainImpl;
}());
exports.TreeViewsMainImpl = TreeViewsMainImpl;
var TreeViewDataProviderMain = /** @class */ (function () {
    function TreeViewDataProviderMain(treeViewId, proxy) {
        this.treeViewId = treeViewId;
        this.proxy = proxy;
    }
    TreeViewDataProviderMain.prototype.createFolderNode = function (item) {
        var expanded = false;
        if (plugin_api_2.TreeViewItemCollapsibleState.Expanded === item.collapsibleState) {
            expanded = true;
        }
        return {
            id: item.id,
            parent: undefined,
            name: item.label,
            icon: item.icon,
            description: item.tooltip,
            visible: true,
            selected: false,
            expanded: expanded,
            children: []
        };
    };
    TreeViewDataProviderMain.prototype.createFileNode = function (item) {
        return {
            id: item.id,
            name: item.label,
            icon: item.icon,
            description: item.tooltip,
            parent: undefined,
            visible: true,
            selected: false,
        };
    };
    /**
     * Creates TreeNode
     *
     * @param item tree view item from the ext
     */
    TreeViewDataProviderMain.prototype.createTreeNode = function (item) {
        if ('collapsibleState' in item) {
            if (plugin_api_2.TreeViewItemCollapsibleState.Expanded === item.collapsibleState) {
                return this.createFolderNode(item);
            }
            else if (plugin_api_2.TreeViewItemCollapsibleState.Collapsed === item.collapsibleState) {
                return this.createFolderNode(item);
            }
        }
        return this.createFileNode(item);
    };
    TreeViewDataProviderMain.prototype.resolveChildren = function (itemId) {
        return __awaiter(this, void 0, void 0, function () {
            var children;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.proxy.$getChildren(this.treeViewId, itemId)];
                    case 1:
                        children = _a.sent();
                        if (children) {
                            return [2 /*return*/, children.map(function (value) { return _this.createTreeNode(value); })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    return TreeViewDataProviderMain;
}());
exports.TreeViewDataProviderMain = TreeViewDataProviderMain;
var TreeViewWidget = /** @class */ (function (_super) {
    __extends(TreeViewWidget, _super);
    function TreeViewWidget(treeProps, model, contextMenuRenderer, dataProvider) {
        var _this = _super.call(this, treeProps, model, contextMenuRenderer) || this;
        _this.treeProps = treeProps;
        _this.model = model;
        _this.contextMenuRenderer = contextMenuRenderer;
        _this.dataProvider = dataProvider;
        return _this;
    }
    TreeViewWidget.prototype.onAfterAttach = function (msg) {
        var _this = this;
        _super.prototype.onAfterAttach.call(this, msg);
        setTimeout(function () {
            // Set root node
            var node = {
                id: '',
                parent: undefined,
                name: '',
                visible: false,
                expanded: true,
                selected: false,
                children: []
            };
            _this.model.root = node;
        });
    };
    TreeViewWidget.prototype.updateWidget = function () {
        var _this = this;
        this.updateRows();
        // Need to wait for 20 miliseconds until rows become updated.
        setTimeout(function () {
            ReactDOM.render(React.createElement(React.Fragment, null, _this.render()), _this.node, function () { return _this.onRender.dispose(); });
        }, 20);
    };
    TreeViewWidget.prototype.renderIcon = function (node, props) {
        if (node.icon) {
            return React.createElement("div", { className: 'fa ' + node.icon + ' tree-view-icon' });
        }
        return undefined;
    };
    TreeViewWidget.prototype.renderCaption = function (node, props) {
        var classes = [browser_1.TREE_NODE_SEGMENT_CLASS];
        if (!this.hasTrailingSuffixes(node)) {
            classes.push(browser_1.TREE_NODE_SEGMENT_GROW_CLASS);
        }
        var className = classes.join(' ');
        var attrs = this.decorateCaption(node, {
            className: className, id: node.id
        });
        if (node.description) {
            attrs = __assign({}, attrs, { title: node.description });
        }
        var children = this.getCaption(node);
        return React.createElement.apply(React, __spread(['div', attrs], children));
    };
    TreeViewWidget.prototype.getCaption = function (node) {
        var nodes = [];
        var work = node.name;
        var regex = /\[([^\[]+)\]\(([^\)]+)\)/g;
        var matchResult = node.name.match(regex);
        if (matchResult) {
            matchResult.forEach(function (match) {
                var part = work.substring(0, work.indexOf(match));
                nodes.push(part);
                var execResult = regex.exec(node.name);
                var link = React.createElement("a", { href: execResult[2], target: '_blank', className: exports.TREE_NODE_HYPERLINK, onClick: function (e) { return e.stopPropagation(); } }, execResult[1]);
                nodes.push(link);
                work = work.substring(work.indexOf(match) + match.length);
            });
        }
        nodes.push(work);
        return nodes;
    };
    TreeViewWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.TreeProps)),
        __param(1, inversify_1.inject(browser_1.TreeModel)),
        __param(2, inversify_1.inject(browser_1.ContextMenuRenderer)),
        __param(3, inversify_1.inject(TreeViewDataProviderMain)),
        __metadata("design:paramtypes", [Object, Object, Object, TreeViewDataProviderMain])
    ], TreeViewWidget);
    return TreeViewWidget;
}(browser_1.TreeWidget));
exports.TreeViewWidget = TreeViewWidget;
var PluginTree = /** @class */ (function (_super) {
    __extends(PluginTree, _super);
    function PluginTree(dataProvider) {
        var _this = _super.call(this) || this;
        _this.dataProvider = dataProvider;
        return _this;
    }
    PluginTree.prototype.resolveChildren = function (parent) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dataProvider.resolveChildren(parent.id)];
            });
        });
    };
    PluginTree = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(TreeViewDataProviderMain)),
        __metadata("design:paramtypes", [TreeViewDataProviderMain])
    ], PluginTree);
    return PluginTree;
}(browser_1.TreeImpl));
exports.PluginTree = PluginTree;
//# sourceMappingURL=tree-views-main.js.map