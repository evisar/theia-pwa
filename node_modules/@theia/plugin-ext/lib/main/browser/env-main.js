"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var env_variables_1 = require("@theia/core/lib/common/env-variables");
var EnvMainImpl = /** @class */ (function () {
    function EnvMainImpl(rpc, container) {
        this.envVariableServer = container.get(env_variables_1.EnvVariablesServer);
    }
    EnvMainImpl.prototype.$getEnvVariable = function (envVarName) {
        return this.envVariableServer.getValue(envVarName).then(function (result) { return result ? result.value : undefined; });
    };
    return EnvMainImpl;
}());
exports.EnvMainImpl = EnvMainImpl;
/**
 * Returns query parameters from current page.
 */
function getQueryParameters() {
    var e_1, _a;
    var queryParameters = {};
    if (window.location.search !== '') {
        var queryParametersString = window.location.search.substr(1); // remove question mark
        var params = queryParametersString.split('&');
        try {
            for (var params_1 = __values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                var pair = params_1_1.value;
                if (pair === '') {
                    continue;
                }
                var keyValue = pair.split('=');
                var key = keyValue[0];
                var value = keyValue[1] ? keyValue[1] : '';
                try {
                    key = decodeURIComponent(key);
                    if (value !== '') {
                        value = decodeURIComponent(value);
                    }
                }
                catch (error) {
                    // skip malformed URI sequence
                    continue;
                }
                var existedValue = queryParameters[key];
                if (existedValue) {
                    if (existedValue instanceof Array) {
                        existedValue.push(value);
                    }
                    else {
                        // existed value is string
                        queryParameters[key] = [existedValue, value];
                    }
                }
                else {
                    queryParameters[key] = value;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return queryParameters;
}
exports.getQueryParameters = getQueryParameters;
//# sourceMappingURL=env-main.js.map