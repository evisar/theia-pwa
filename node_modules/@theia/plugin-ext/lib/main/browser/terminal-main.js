"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../../api/plugin-api");
var terminal_service_1 = require("@theia/terminal/lib/browser/base/terminal-service");
var browser_1 = require("@theia/core/lib/browser");
/**
 * Plugin api service allows working with terminal emulator.
 */
var TerminalServiceMainImpl = /** @class */ (function () {
    function TerminalServiceMainImpl(rpc, container) {
        this.terminals = new Map();
        this.terminalNumber = 0;
        this.TERM_ID_PREFIX = 'plugin-terminal-';
        this.terminalService = container.get(terminal_service_1.TerminalService);
        this.shell = container.get(browser_1.ApplicationShell);
        this.extProxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.TERMINAL_EXT);
    }
    TerminalServiceMainImpl.prototype.$createTerminal = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var counter, termWidgetOptions, id, termWidget, error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        counter = this.terminalNumber++;
                        termWidgetOptions = {
                            title: options.name,
                            shellPath: options.shellPath,
                            shellArgs: options.shellArgs,
                            cwd: options.cwd,
                            env: options.env,
                            destroyTermOnClose: true,
                            useServerTitle: false,
                            id: this.TERM_ID_PREFIX + counter,
                            attributes: options.attributes
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, this.terminalService.newTerminal(termWidgetOptions)];
                    case 2:
                        termWidget = _a.sent();
                        return [4 /*yield*/, termWidget.start()];
                    case 3:
                        id = _a.sent();
                        this.terminals.set(id, termWidget);
                        termWidget.onTerminalDidClose(function () {
                            _this.extProxy.$terminalClosed(id);
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        throw new Error('Failed to create terminal. Cause: ' + error_1);
                    case 5: return [2 /*return*/, id];
                }
            });
        });
    };
    TerminalServiceMainImpl.prototype.$sendText = function (id, text, addNewLine) {
        var termWidget = this.terminals.get(id);
        if (termWidget) {
            text = text.replace(/\r?\n/g, '\r');
            if (addNewLine && text.charAt(text.length - 1) !== '\r') {
                text += '\r';
            }
            termWidget.sendText(text);
        }
    };
    TerminalServiceMainImpl.prototype.$show = function (id, preserveFocus) {
        var termWidget = this.terminals.get(id);
        if (termWidget) {
            this.terminalService.activateTerminal(termWidget);
        }
    };
    TerminalServiceMainImpl.prototype.$hide = function (id) {
        var termWidget = this.terminals.get(id);
        if (termWidget) {
            if (termWidget.isVisible) {
                var area = this.shell.getAreaFor(termWidget);
                if (area) {
                    this.shell.collapsePanel(area);
                }
            }
        }
    };
    TerminalServiceMainImpl.prototype.$dispose = function (id) {
        var termWidget = this.terminals.get(id);
        if (termWidget) {
            termWidget.dispose();
        }
    };
    return TerminalServiceMainImpl;
}());
exports.TerminalServiceMainImpl = TerminalServiceMainImpl;
//# sourceMappingURL=terminal-main.js.map