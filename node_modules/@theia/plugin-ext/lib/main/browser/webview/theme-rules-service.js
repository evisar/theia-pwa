"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var theming_1 = require("@theia/core/lib/browser/theming");
exports.ThemeRulesServiceSymbol = Symbol('ThemeRulesService');
var ThemeRulesService = /** @class */ (function () {
    function ThemeRulesService() {
        var _this = this;
        this.icons = new Map();
        this.themeService = theming_1.ThemeService.get();
        this.themeRules = new Map();
        var global = window; // tslint:disable-line
        global[exports.ThemeRulesServiceSymbol] = this;
        this.themeService.onThemeChange(function () {
            _this.updateIconStyleElement();
        });
    }
    ThemeRulesService.get = function () {
        var global = window; // tslint:disable-line
        return global[exports.ThemeRulesServiceSymbol] || new ThemeRulesService();
    };
    ThemeRulesService.prototype.createStyleSheet = function (container) {
        if (container === void 0) { container = document.getElementsByTagName('head')[0]; }
        var style = document.createElement('style');
        style.type = 'text/css';
        style.media = 'screen';
        container.appendChild(style);
        return style;
    };
    ThemeRulesService.prototype.getCurrentThemeRules = function () {
        var cssText = [];
        var themeId = this.themeService.getCurrentTheme().id;
        if (this.themeRules.has(themeId)) {
            return this.themeRules.get(themeId);
        }
        // tslint:disable-next-line:no-any
        var styleElement = document.getElementById('theia-theme');
        if (!styleElement) {
            return cssText;
        }
        var sheet = styleElement.sheet;
        if (!sheet || !sheet.rules || !sheet.rules.length) {
            return cssText;
        }
        var ruleList = sheet.rules;
        for (var index = 0; index < ruleList.length; index++) {
            if (ruleList[index] && ruleList[index].cssText) {
                cssText.push(ruleList[index].cssText.toString());
            }
        }
        return cssText;
    };
    ThemeRulesService.prototype.setRules = function (styleSheet, newRules) {
        var sheet = styleSheet.sheet;
        if (!sheet) {
            return false;
        }
        for (var index = sheet.rules.length; index > 0; index--) {
            sheet.removeRule(0);
        }
        newRules.forEach(function (rule, index) {
            sheet.insertRule(rule, index);
        });
        return true;
    };
    ThemeRulesService.prototype.setIconPath = function (webviewId, iconPath) {
        if (!iconPath) {
            this.icons.delete(webviewId);
        }
        else {
            this.icons.set(webviewId, iconPath);
        }
        if (!this.styleElement) {
            this.styleElement = this.createStyleSheet();
            this.styleElement.id = 'webview-icons';
        }
        this.updateIconStyleElement();
    };
    ThemeRulesService.prototype.updateIconStyleElement = function () {
        var _this = this;
        if (!this.styleElement) {
            return;
        }
        var cssRules = [".webview-icon::before {\n            background-repeat: no-repeat;\n            vertical-align: middle;\n            display: inline-block;\n            text-align: center;\n            height: 11px;\n            width: 11px;\n            content: \"\";\n        }"];
        this.icons.forEach(function (value, key) {
            var path;
            if (typeof value === 'string') {
                path = value;
            }
            else {
                path = _this.isDark() ? value.dark : value.light;
            }
            if (path.startsWith('/')) {
                path = "/webview" + path;
            }
            cssRules.push(".webview-icon." + key + "-file-icon::before { background-image: url(" + path + "); }");
        });
        this.setRules(this.styleElement, cssRules);
    };
    ThemeRulesService.prototype.isDark = function () {
        var currentThemeId = this.themeService.getCurrentTheme().id;
        return !currentThemeId.includes('light');
    };
    return ThemeRulesService;
}());
exports.ThemeRulesService = ThemeRulesService;
//# sourceMappingURL=theme-rules-service.js.map