"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var widget_1 = require("@theia/core/lib/browser/widgets/widget");
var id_generator_1 = require("../../../common/id-generator");
var core_1 = require("@theia/core");
var WebviewWidget = /** @class */ (function (_super) {
    __extends(WebviewWidget, _super);
    function WebviewWidget(title, options, eventDelegate) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.eventDelegate = eventDelegate;
        _this.toDispose = new core_1.DisposableCollection();
        _this.state = undefined;
        _this.id = WebviewWidget.ID.nextId();
        _this.title.closable = true;
        _this.title.label = title;
        _this.addClass(WebviewWidget.Styles.WEBVIEW);
        return _this;
    }
    WebviewWidget.prototype.handleMessage = function (message) {
        switch (message.command) {
            case 'onmessage':
                this.eventDelegate.onMessage(message.data);
                break;
            case 'do-update-state':
                this.state = message.data;
        }
    };
    WebviewWidget.prototype.postMessage = function (message) {
        this.iframe.contentWindow.postMessage(message, '*');
    };
    WebviewWidget.prototype.setOptions = function (options) {
        if (!this.iframe || this.options.allowScripts === options.allowScripts) {
            return;
        }
        this.updateSandboxAttribute(this.iframe, options.allowScripts);
        this.options = options;
        this.reloadFrame();
    };
    WebviewWidget.prototype.setIconClass = function (iconClass) {
        this.title.iconClass = iconClass;
    };
    WebviewWidget.prototype.setHTML = function (html) {
        var _this = this;
        html = html.replace('theia-resource:/', '/webview/');
        var newDocument = new DOMParser().parseFromString(html, 'text/html');
        if (!newDocument || !newDocument.body) {
            return;
        }
        newDocument.querySelectorAll('a').forEach(function (a) {
            if (!a.title) {
                a.title = a.href;
            }
        });
        this.updateApiScript(newDocument);
        var previousPendingFrame = this.iframe;
        if (previousPendingFrame) {
            previousPendingFrame.setAttribute('id', '');
            this.node.removeChild(previousPendingFrame);
        }
        var newFrame = document.createElement('iframe');
        newFrame.setAttribute('id', 'pending-frame');
        newFrame.setAttribute('frameborder', '0');
        newFrame.style.cssText = 'display: block; margin: 0; overflow: hidden; position: absolute; width: 100%; height: 100%; visibility: hidden';
        this.node.appendChild(newFrame);
        this.iframe = newFrame;
        newFrame.contentDocument.open('text/html', 'replace');
        var onLoad = function (contentDocument, contentWindow) {
            if (contentDocument.body) {
                if (_this.eventDelegate && _this.eventDelegate.onKeyboardEvent) {
                    var eventNames = ['keydown', 'keypress', 'click'];
                    // Delegate events from the `iframe` to the application.
                    eventNames.forEach(function (eventName) {
                        contentDocument.addEventListener(eventName, _this.eventDelegate.onKeyboardEvent, true);
                        _this.toDispose.push(core_1.Disposable.create(function () { return contentDocument.removeEventListener(eventName, _this.eventDelegate.onKeyboardEvent); }));
                    });
                }
                if (_this.eventDelegate && _this.eventDelegate.onLoad) {
                    _this.eventDelegate.onLoad(contentDocument);
                }
            }
            if (newFrame && newFrame.contentDocument === contentDocument) {
                contentWindow.postMessageExt = function (e) {
                    _this.handleMessage(e);
                };
                newFrame.style.visibility = 'visible';
                newFrame.contentWindow.focus();
            }
        };
        clearTimeout(this.loadTimeout);
        this.loadTimeout = undefined;
        this.loadTimeout = window.setTimeout(function () {
            clearTimeout(_this.loadTimeout);
            _this.loadTimeout = undefined;
            onLoad(newFrame.contentDocument, newFrame.contentWindow);
        }, 200);
        newFrame.contentWindow.addEventListener('load', function (e) {
            if (_this.loadTimeout) {
                clearTimeout(_this.loadTimeout);
                _this.loadTimeout = undefined;
                onLoad(e.target, newFrame.contentWindow);
            }
        });
        newFrame.contentDocument.write(newDocument.documentElement.innerHTML);
        newFrame.contentDocument.close();
        this.updateSandboxAttribute(newFrame);
    };
    WebviewWidget.prototype.reloadFrame = function () {
        if (!this.iframe || !this.iframe.contentDocument || !this.iframe.contentDocument.documentElement) {
            return;
        }
        this.setHTML(this.iframe.contentDocument.documentElement.innerHTML);
    };
    WebviewWidget.prototype.updateSandboxAttribute = function (element, isAllowScript) {
        if (!element) {
            return;
        }
        var allowScripts = isAllowScript !== undefined ? isAllowScript : this.options.allowScripts;
        element.setAttribute('sandbox', allowScripts ? 'allow-scripts allow-forms allow-same-origin' : 'allow-same-origin');
    };
    WebviewWidget.prototype.updateApiScript = function (contentDocument, isAllowScript) {
        if (!contentDocument) {
            return;
        }
        var allowScripts = isAllowScript !== undefined ? isAllowScript : this.options.allowScripts;
        var scriptId = 'webview-widget-codeApi';
        if (!allowScripts) {
            var script = contentDocument.getElementById(scriptId);
            if (!script) {
                return;
            }
            script.parentElement.removeChild(script);
            return;
        }
        var codeApiScript = contentDocument.createElement('script');
        codeApiScript.id = scriptId;
        codeApiScript.textContent = "\n            const acquireVsCodeApi = (function() {\n                let acquired = false;\n                let state = " + (this.state ? "JSON.parse(" + JSON.stringify(this.state) + ")" : undefined) + ";\n                return () => {\n                    if (acquired) {\n                        throw new Error('An instance of the VS Code API has already been acquired');\n                    }\n                    acquired = true;\n                    return Object.freeze({\n                        postMessage: function(msg) {\n                            return window.postMessageExt({ command: 'onmessage', data: msg }, '*');\n                        },\n                        setState: function(newState) {\n                            state = newState;\n                            window.postMessageExt({ command: 'do-update-state', data: JSON.stringify(newState) }, '*');\n                            return newState;\n                        },\n                        getState: function() {\n                            return state;\n                        }\n                    });\n                };\n            })();\n            const acquireTheiaApi = (function() {\n                let acquired = false;\n                let state = " + (this.state ? "JSON.parse(" + JSON.stringify(this.state) + ")" : undefined) + ";\n                return () => {\n                    if (acquired) {\n                        throw new Error('An instance of the VS Code API has already been acquired');\n                    }\n                    acquired = true;\n                    return Object.freeze({\n                        postMessage: function(msg) {\n                            return window.postMessageExt({ command: 'onmessage', data: msg }, '*');\n                        },\n                        setState: function(newState) {\n                            state = newState;\n                            window.postMessageExt({ command: 'do-update-state', data: JSON.stringify(newState) }, '*');\n                            return newState;\n                        },\n                        getState: function() {\n                            return state;\n                        }\n                    });\n                };\n            })();\n            delete window.parent;\n            delete window.top;\n            delete window.frameElement;\n         ";
        var parent = contentDocument.head ? contentDocument.head : contentDocument.body;
        if (parent.hasChildNodes()) {
            parent.insertBefore(codeApiScript, parent.firstChild);
        }
        else {
            parent.appendChild(codeApiScript);
        }
    };
    WebviewWidget.ID = new id_generator_1.IdGenerator('webview-widget-');
    return WebviewWidget;
}(widget_1.BaseWidget));
exports.WebviewWidget = WebviewWidget;
(function (WebviewWidget) {
    var Styles;
    (function (Styles) {
        Styles.WEBVIEW = 'theia-webview';
    })(Styles = WebviewWidget.Styles || (WebviewWidget.Styles = {}));
})(WebviewWidget = exports.WebviewWidget || (exports.WebviewWidget = {}));
exports.WebviewWidget = WebviewWidget;
//# sourceMappingURL=webview.js.map