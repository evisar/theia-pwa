"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../../api/plugin-api");
var type_converters_1 = require("../../plugin/type-converters");
var lib_1 = require("monaco-languageclient/lib");
var core_1 = require("@theia/core");
var monaco_languages_1 = require("@theia/monaco/lib/browser/monaco-languages");
var LanguagesMainImpl = /** @class */ (function () {
    function LanguagesMainImpl(rpc, container) {
        this.disposables = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.LANGUAGES_EXT);
        this.ml = container.get(monaco_languages_1.MonacoLanguages);
    }
    LanguagesMainImpl.prototype.$getLanguages = function () {
        return Promise.resolve(monaco.languages.getLanguages().map(function (l) { return l.id; }));
    };
    LanguagesMainImpl.prototype.$unregister = function (handle) {
        var disposable = this.disposables.get(handle);
        if (disposable) {
            disposable.dispose();
            this.disposables.delete(handle);
        }
    };
    LanguagesMainImpl.prototype.$setLanguageConfiguration = function (handle, languageId, configuration) {
        var config = {
            comments: configuration.comments,
            brackets: configuration.brackets,
            wordPattern: reviveRegExp(configuration.wordPattern),
            indentationRules: reviveIndentationRule(configuration.indentationRules),
            onEnterRules: reviveOnEnterRules(configuration.onEnterRules),
        };
        this.disposables.set(handle, monaco.languages.setLanguageConfiguration(languageId, config));
    };
    LanguagesMainImpl.prototype.$registerCompletionSupport = function (handle, selector, triggerCharacters, supportsResolveDetails) {
        var _this = this;
        this.disposables.set(handle, monaco.modes.SuggestRegistry.register(type_converters_1.fromLanguageSelector(selector), {
            triggerCharacters: triggerCharacters,
            provideCompletionItems: function (model, position, context, token) {
                return Promise.resolve(_this.proxy.$provideCompletionItems(handle, model.uri, position, context)).then(function (result) {
                    if (!result) {
                        return undefined;
                    }
                    return {
                        suggestions: result.completions,
                        incomplete: result.incomplete,
                        // tslint:disable-next-line:no-any
                        dispose: function () { return _this.proxy.$releaseCompletionItems(handle, result._id); }
                    };
                });
            },
            resolveCompletionItem: supportsResolveDetails
                ? function (model, position, suggestion, token) { return Promise.resolve(_this.proxy.$resolveCompletionItem(handle, model.uri, position, suggestion)); }
                : undefined
        }));
    };
    LanguagesMainImpl.prototype.$registerDefinitionProvider = function (handle, selector) {
        var e_1, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var definitionProvider = this.createDefinitionProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerDefinitionProvider(language, definitionProvider));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.$registeReferenceProvider = function (handle, selector) {
        var e_2, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var referenceProvider = this.createReferenceProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerReferenceProvider(language, referenceProvider));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createReferenceProvider = function (handle, selector) {
        var _this = this;
        return {
            provideReferences: function (model, position, context, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideReferences(handle, model.uri, position, context).then(function (result) {
                    var e_3, _a;
                    if (!result) {
                        return undefined;
                    }
                    if (Array.isArray(result)) {
                        var references = [];
                        try {
                            for (var result_1 = __values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                                var item = result_1_1.value;
                                references.push(__assign({}, item, { uri: monaco.Uri.revive(item.uri) }));
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (result_1_1 && !result_1_1.done && (_a = result_1.return)) _a.call(result_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        return references;
                    }
                    return undefined;
                });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerSignatureHelpProvider = function (handle, selector, triggerCharacters) {
        var e_4, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var signatureHelpProvider = this.createSignatureHelpProvider(handle, languageSelector, triggerCharacters);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerSignatureHelpProvider(language, signatureHelpProvider));
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.$clearDiagnostics = function (id) {
        var e_5, _a;
        var markers = monaco.editor.getModelMarkers({ owner: id });
        var clearedEditors = new Set(); // uri to resource
        try {
            for (var markers_1 = __values(markers), markers_1_1 = markers_1.next(); !markers_1_1.done; markers_1_1 = markers_1.next()) {
                var marker = markers_1_1.value;
                var uri = marker.resource;
                var uriString = uri.toString();
                if (!clearedEditors.has(uriString)) {
                    var textModel = monaco.editor.getModel(uri);
                    monaco.editor.setModelMarkers(textModel, id, []);
                    clearedEditors.add(uriString);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (markers_1_1 && !markers_1_1.done && (_a = markers_1.return)) _a.call(markers_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    LanguagesMainImpl.prototype.$changeDiagnostics = function (id, delta) {
        var e_6, _a;
        try {
            for (var delta_1 = __values(delta), delta_1_1 = delta_1.next(); !delta_1_1.done; delta_1_1 = delta_1.next()) {
                var _b = __read(delta_1_1.value, 2), uriComponents = _b[0], markers = _b[1];
                var uri = monaco.Uri.revive(uriComponents);
                var textModel = monaco.editor.getModel(uri);
                monaco.editor.setModelMarkers(textModel, id, markers.map(reviveMarker));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (delta_1_1 && !delta_1_1.done && (_a = delta_1.return)) _a.call(delta_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    LanguagesMainImpl.prototype.$registerImplementationProvider = function (handle, selector) {
        var e_7, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var implementationProvider = this.createImplementationProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerImplementationProvider(language, implementationProvider));
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createImplementationProvider = function (handle, selector) {
        var _this = this;
        return {
            provideImplementation: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideImplementation(handle, model.uri, position).then(function (result) {
                    var e_8, _a;
                    if (!result) {
                        return undefined;
                    }
                    if (Array.isArray(result)) {
                        // using DefinitionLink because Location is mandatory part of DefinitionLink
                        var definitionLinks = [];
                        try {
                            for (var result_2 = __values(result), result_2_1 = result_2.next(); !result_2_1.done; result_2_1 = result_2.next()) {
                                var item = result_2_1.value;
                                definitionLinks.push(__assign({}, item, { uri: monaco.Uri.revive(item.uri) }));
                            }
                        }
                        catch (e_8_1) { e_8 = { error: e_8_1 }; }
                        finally {
                            try {
                                if (result_2_1 && !result_2_1.done && (_a = result_2.return)) _a.call(result_2);
                            }
                            finally { if (e_8) throw e_8.error; }
                        }
                        return definitionLinks;
                    }
                    else {
                        // single Location
                        return {
                            uri: monaco.Uri.revive(result.uri),
                            range: result.range
                        };
                    }
                });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerTypeDefinitionProvider = function (handle, selector) {
        var e_9, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var typeDefinitionProvider = this.createTypeDefinitionProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerTypeDefinitionProvider(language, typeDefinitionProvider));
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_9) throw e_9.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createTypeDefinitionProvider = function (handle, selector) {
        var _this = this;
        return {
            provideTypeDefinition: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideTypeDefinition(handle, model.uri, position).then(function (result) {
                    var e_10, _a;
                    if (!result) {
                        return undefined;
                    }
                    if (Array.isArray(result)) {
                        // using DefinitionLink because Location is mandatory part of DefinitionLink
                        var definitionLinks = [];
                        try {
                            for (var result_3 = __values(result), result_3_1 = result_3.next(); !result_3_1.done; result_3_1 = result_3.next()) {
                                var item = result_3_1.value;
                                definitionLinks.push(__assign({}, item, { uri: monaco.Uri.revive(item.uri) }));
                            }
                        }
                        catch (e_10_1) { e_10 = { error: e_10_1 }; }
                        finally {
                            try {
                                if (result_3_1 && !result_3_1.done && (_a = result_3.return)) _a.call(result_3);
                            }
                            finally { if (e_10) throw e_10.error; }
                        }
                        return definitionLinks;
                    }
                    else {
                        // single Location
                        return {
                            uri: monaco.Uri.revive(result.uri),
                            range: result.range
                        };
                    }
                });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerHoverProvider = function (handle, selector) {
        var e_11, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var hoverProvider = this.createHoverProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerHoverProvider(language, hoverProvider));
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_11) throw e_11.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createHoverProvider = function (handle, selector) {
        var _this = this;
        return {
            provideHover: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideHover(handle, model.uri, position).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerDocumentHighlightProvider = function (handle, selector) {
        var e_12, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var documentHighlightProvider = this.createDocumentHighlightProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerDocumentHighlightProvider(language, documentHighlightProvider));
                }
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_12) throw e_12.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createDocumentHighlightProvider = function (handle, selector) {
        var _this = this;
        return {
            provideDocumentHighlights: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDocumentHighlights(handle, model.uri, position).then(function (result) {
                    var e_13, _a;
                    if (!result) {
                        return undefined;
                    }
                    if (Array.isArray(result)) {
                        var highlights = [];
                        try {
                            for (var result_4 = __values(result), result_4_1 = result_4.next(); !result_4_1.done; result_4_1 = result_4.next()) {
                                var item = result_4_1.value;
                                highlights.push(__assign({}, item, { kind: (item.kind ? item.kind : monaco.languages.DocumentHighlightKind.Text) }));
                            }
                        }
                        catch (e_13_1) { e_13 = { error: e_13_1 }; }
                        finally {
                            try {
                                if (result_4_1 && !result_4_1.done && (_a = result_4.return)) _a.call(result_4);
                            }
                            finally { if (e_13) throw e_13.error; }
                        }
                        return highlights;
                    }
                    return undefined;
                });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerWorkspaceSymbolProvider = function (handle) {
        var workspaceSymbolProvider = this.createWorkspaceSymbolProvider(handle);
        var disposable = new core_1.DisposableCollection();
        disposable.push(this.ml.registerWorkspaceSymbolProvider(workspaceSymbolProvider));
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createWorkspaceSymbolProvider = function (handle) {
        var _this = this;
        return {
            provideWorkspaceSymbols: function (params, token) { return _this.proxy.$provideWorkspaceSymbols(handle, params.query); },
            resolveWorkspaceSymbol: function (symbol, token) { return _this.proxy.$resolveWorkspaceSymbol(handle, symbol); }
        };
    };
    LanguagesMainImpl.prototype.$registerDocumentLinkProvider = function (handle, selector) {
        var e_14, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var linkProvider = this.createLinkProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerLinkProvider(language, linkProvider));
                }
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_14) throw e_14.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createLinkProvider = function (handle, selector) {
        var _this = this;
        return {
            provideLinks: function (model, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDocumentLinks(handle, model.uri).then(function (v) { return v; });
            },
            resolveLink: function (link, token) {
                return _this.proxy.$resolveDocumentLink(handle, link).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerCodeLensSupport = function (handle, selector, eventHandle) {
        var e_15, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var lensProvider = this.createCodeLensProvider(handle, languageSelector);
        if (typeof eventHandle === 'number') {
            var emitter = new core_1.Emitter();
            this.disposables.set(eventHandle, emitter);
            lensProvider.onDidChange = emitter.event;
        }
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerCodeLensProvider(language, lensProvider));
                }
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_15) throw e_15.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createCodeLensProvider = function (handle, selector) {
        var _this = this;
        return {
            provideCodeLenses: function (model, token) {
                return _this.proxy.$provideCodeLenses(handle, model.uri).then(function (v) { return v; });
            },
            resolveCodeLens: function (model, codeLens, token) {
                return _this.proxy.$resolveCodeLens(handle, model.uri, codeLens).then(function (v) { return v; });
            }
        };
    };
    // tslint:disable-next-line:no-any
    LanguagesMainImpl.prototype.$emitCodeLensEvent = function (eventHandle, event) {
        var obj = this.disposables.get(eventHandle);
        if (obj instanceof core_1.Emitter) {
            obj.fire(event);
        }
    };
    LanguagesMainImpl.prototype.$registerOutlineSupport = function (handle, selector) {
        var e_16, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var symbolProvider = this.createDocumentSymbolProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerDocumentSymbolProvider(language, symbolProvider));
                }
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_16) throw e_16.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createDocumentSymbolProvider = function (handle, selector) {
        var _this = this;
        return {
            provideDocumentSymbols: function (model, token) {
                return _this.proxy.$provideDocumentSymbols(handle, model.uri).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.createDefinitionProvider = function (handle, selector) {
        var _this = this;
        return {
            provideDefinition: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDefinition(handle, model.uri, position).then(function (result) {
                    var e_17, _a;
                    if (!result) {
                        return undefined;
                    }
                    if (Array.isArray(result)) {
                        // using DefinitionLink because Location is mandatory part of DefinitionLink
                        var definitionLinks = [];
                        try {
                            for (var result_5 = __values(result), result_5_1 = result_5.next(); !result_5_1.done; result_5_1 = result_5.next()) {
                                var item = result_5_1.value;
                                definitionLinks.push(__assign({}, item, { uri: monaco.Uri.revive(item.uri) }));
                            }
                        }
                        catch (e_17_1) { e_17 = { error: e_17_1 }; }
                        finally {
                            try {
                                if (result_5_1 && !result_5_1.done && (_a = result_5.return)) _a.call(result_5);
                            }
                            finally { if (e_17) throw e_17.error; }
                        }
                        return definitionLinks;
                    }
                    else {
                        // single Location
                        return {
                            uri: monaco.Uri.revive(result.uri),
                            range: result.range
                        };
                    }
                });
            }
        };
    };
    LanguagesMainImpl.prototype.createSignatureHelpProvider = function (handle, selector, triggerCharacters) {
        var _this = this;
        return {
            signatureHelpTriggerCharacters: triggerCharacters,
            provideSignatureHelp: function (model, position, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideSignatureHelp(handle, model.uri, position).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerDocumentFormattingSupport = function (handle, selector) {
        var e_18, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var documentFormattingEditSupport = this.createDocumentFormattingSupport(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerDocumentFormattingEditProvider(language, documentFormattingEditSupport));
                }
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_18) throw e_18.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createDocumentFormattingSupport = function (handle, selector) {
        var _this = this;
        return {
            provideDocumentFormattingEdits: function (model, options, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDocumentFormattingEdits(handle, model.uri, options).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerRangeFormattingProvider = function (handle, selector) {
        var e_19, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var rangeFormattingEditProvider = this.createRangeFormattingProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerDocumentRangeFormattingEditProvider(language, rangeFormattingEditProvider));
                }
            }
        }
        catch (e_19_1) { e_19 = { error: e_19_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_19) throw e_19.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createRangeFormattingProvider = function (handle, selector) {
        var _this = this;
        return {
            provideDocumentRangeFormattingEdits: function (model, range, options, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDocumentRangeFormattingEdits(handle, model.uri, range, options).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerOnTypeFormattingProvider = function (handle, selector, autoFormatTriggerCharacters) {
        var e_20, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var onTypeFormattingProvider = this.createOnTypeFormattingProvider(handle, languageSelector, autoFormatTriggerCharacters);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerOnTypeFormattingEditProvider(language, onTypeFormattingProvider));
                }
            }
        }
        catch (e_20_1) { e_20 = { error: e_20_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_20) throw e_20.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createOnTypeFormattingProvider = function (handle, selector, autoFormatTriggerCharacters) {
        var _this = this;
        return {
            autoFormatTriggerCharacters: autoFormatTriggerCharacters,
            provideOnTypeFormattingEdits: function (model, position, ch, options) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideOnTypeFormattingEdits(handle, model.uri, position, ch, options).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerFoldingRangeProvider = function (handle, selector) {
        var e_21, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var provider = this.createFoldingRangeProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerFoldingRangeProvider(language, provider));
                }
            }
        }
        catch (e_21_1) { e_21 = { error: e_21_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_21) throw e_21.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createFoldingRangeProvider = function (handle, selector) {
        var _this = this;
        return {
            provideFoldingRanges: function (model, context, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideFoldingRange(handle, model.uri, context).then(function (v) { return v; });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerDocumentColorProvider = function (handle, selector) {
        var e_22, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var colorProvider = this.createColorProvider(handle, languageSelector);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerColorProvider(language, colorProvider));
                }
            }
        }
        catch (e_22_1) { e_22 = { error: e_22_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_22) throw e_22.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createColorProvider = function (handle, selector) {
        var _this = this;
        return {
            provideDocumentColors: function (model, token) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideDocumentColors(handle, model.uri).then(function (documentColors) {
                    return documentColors.map(function (documentColor) {
                        var _a = __read(documentColor.color, 4), red = _a[0], green = _a[1], blue = _a[2], alpha = _a[3];
                        var color = {
                            red: red,
                            green: green,
                            blue: blue,
                            alpha: alpha
                        };
                        return {
                            color: color,
                            range: documentColor.range
                        };
                    });
                });
            },
            provideColorPresentations: function (model, colorInfo, token) {
                return _this.proxy.$provideColorPresentations(handle, model.uri, {
                    color: [
                        colorInfo.color.red,
                        colorInfo.color.green,
                        colorInfo.color.blue,
                        colorInfo.color.alpha
                    ],
                    range: colorInfo.range
                });
            }
        };
    };
    LanguagesMainImpl.prototype.$registerQuickFixProvider = function (handle, selector, codeActionKinds) {
        var e_23, _a;
        var languageSelector = type_converters_1.fromLanguageSelector(selector);
        var quickFixProvider = this.createQuickFixProvider(handle, languageSelector, codeActionKinds);
        var disposable = new core_1.DisposableCollection();
        try {
            for (var _b = __values(lib_1.getLanguages()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                if (this.matchLanguage(languageSelector, language)) {
                    disposable.push(monaco.languages.registerCodeActionProvider(language, quickFixProvider));
                }
            }
        }
        catch (e_23_1) { e_23 = { error: e_23_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_23) throw e_23.error; }
        }
        this.disposables.set(handle, disposable);
    };
    LanguagesMainImpl.prototype.createQuickFixProvider = function (handle, selector, providedCodeActionKinds) {
        var _this = this;
        return {
            provideCodeActions: function (model, rangeOrSelection, monacoContext) {
                if (!_this.matchModel(selector, lib_1.MonacoModelIdentifier.fromModel(model))) {
                    return undefined;
                }
                return _this.proxy.$provideCodeActions(handle, model.uri, rangeOrSelection, monacoContext);
            }
        };
    };
    LanguagesMainImpl.prototype.matchModel = function (selector, model) {
        var _this = this;
        if (Array.isArray(selector)) {
            return selector.some(function (filter) { return _this.matchModel(filter, model); });
        }
        if (lib_1.DocumentFilter.is(selector)) {
            if (!!selector.language && selector.language !== model.languageId) {
                return false;
            }
            if (!!selector.scheme && selector.scheme !== model.uri.scheme) {
                return false;
            }
            if (!!selector.pattern && !lib_1.testGlob(selector.pattern, model.uri.path)) {
                return false;
            }
            return true;
        }
        return selector === model.languageId;
    };
    LanguagesMainImpl.prototype.matchLanguage = function (selector, languageId) {
        var _this = this;
        if (Array.isArray(selector)) {
            return selector.some(function (filter) { return _this.matchLanguage(filter, languageId); });
        }
        if (lib_1.DocumentFilter.is(selector)) {
            return !selector.language || selector.language === languageId;
        }
        return selector === languageId;
    };
    return LanguagesMainImpl;
}());
exports.LanguagesMainImpl = LanguagesMainImpl;
function reviveMarker(marker) {
    var e_24, _a;
    var monacoMarker = {
        code: marker.code,
        severity: marker.severity,
        message: marker.message,
        source: marker.source,
        startLineNumber: marker.startLineNumber,
        startColumn: marker.startColumn,
        endLineNumber: marker.endLineNumber,
        endColumn: marker.endColumn,
        relatedInformation: undefined
    };
    if (marker.relatedInformation) {
        monacoMarker.relatedInformation = [];
        try {
            for (var _b = __values(marker.relatedInformation), _c = _b.next(); !_c.done; _c = _b.next()) {
                var ri = _c.value;
                monacoMarker.relatedInformation.push({
                    resource: monaco.Uri.revive(ri.resource),
                    message: ri.message,
                    startLineNumber: ri.startLineNumber,
                    startColumn: ri.startColumn,
                    endLineNumber: ri.endLineNumber,
                    endColumn: ri.endColumn
                });
            }
        }
        catch (e_24_1) { e_24 = { error: e_24_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_24) throw e_24.error; }
        }
    }
    return monacoMarker;
}
function reviveRegExp(regExp) {
    if (typeof regExp === 'undefined' || regExp === null) {
        return undefined;
    }
    return new RegExp(regExp.pattern, regExp.flags);
}
function reviveIndentationRule(indentationRule) {
    if (typeof indentationRule === 'undefined' || indentationRule === null) {
        return undefined;
    }
    return {
        increaseIndentPattern: reviveRegExp(indentationRule.increaseIndentPattern),
        decreaseIndentPattern: reviveRegExp(indentationRule.decreaseIndentPattern),
        indentNextLinePattern: reviveRegExp(indentationRule.indentNextLinePattern),
        unIndentedLinePattern: reviveRegExp(indentationRule.unIndentedLinePattern),
    };
}
function reviveOnEnterRule(onEnterRule) {
    return {
        beforeText: reviveRegExp(onEnterRule.beforeText),
        afterText: reviveRegExp(onEnterRule.afterText),
        action: onEnterRule.action
    };
}
function reviveOnEnterRules(onEnterRules) {
    if (typeof onEnterRules === 'undefined' || onEnterRules === null) {
        return undefined;
    }
    return onEnterRules.map(reviveOnEnterRule);
}
//# sourceMappingURL=languages-main.js.map