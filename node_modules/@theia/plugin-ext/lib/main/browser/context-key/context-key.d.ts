/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Event } from '@theia/core/lib/common';
export declare const enum ContextKeyExprType {
    Defined = 1,
    Not = 2,
    Equals = 3,
    NotEquals = 4,
    And = 5,
    Regex = 6
}
export declare abstract class ContextKeyExpr {
    static has(key: string): ContextKeyExpr;
    static equals(key: string, value: any): ContextKeyExpr;
    static notEquals(key: string, value: any): ContextKeyExpr;
    static regex(key: string, value: RegExp): ContextKeyExpr;
    static not(key: string): ContextKeyExpr;
    static and(...expr: (ContextKeyExpr | undefined)[]): ContextKeyExpr;
    static deserialize(serialized: string | undefined): ContextKeyExpr | undefined;
    private static deserializeOne;
    private static deserializeValue;
    private static deserializeRegexValue;
    abstract getType(): ContextKeyExprType;
    abstract equals(other: ContextKeyExpr): boolean;
    abstract evaluate(context: Context): boolean;
    abstract normalize(): ContextKeyExpr | undefined;
    abstract serialize(): string;
    abstract keys(): string[];
}
export declare class ContextKeyDefinedExpr implements ContextKeyExpr {
    protected key: string;
    constructor(key: string);
    getType(): ContextKeyExprType;
    cmp(other: ContextKeyDefinedExpr): number;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    normalize(): ContextKeyExpr;
    serialize(): string;
    keys(): string[];
}
export declare class ContextKeyEqualsExpr implements ContextKeyExpr {
    private key;
    private value;
    constructor(key: string, value: any);
    getType(): ContextKeyExprType;
    cmp(other: ContextKeyEqualsExpr): number;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    normalize(): ContextKeyExpr;
    serialize(): string;
    keys(): string[];
}
export declare class ContextKeyNotEqualsExpr implements ContextKeyExpr {
    private key;
    private value;
    constructor(key: string, value: any);
    getType(): ContextKeyExprType;
    cmp(other: ContextKeyNotEqualsExpr): number;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    normalize(): ContextKeyExpr;
    serialize(): string;
    keys(): string[];
}
export declare class ContextKeyNotExpr implements ContextKeyExpr {
    private key;
    constructor(key: string);
    getType(): ContextKeyExprType;
    cmp(other: ContextKeyNotExpr): number;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    normalize(): ContextKeyExpr;
    serialize(): string;
    keys(): string[];
}
export declare class ContextKeyRegexExpr implements ContextKeyExpr {
    private key;
    private regexp;
    constructor(key: string, regexp: RegExp | undefined);
    getType(): ContextKeyExprType;
    cmp(other: ContextKeyRegexExpr): number;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    normalize(): ContextKeyExpr;
    serialize(): string;
    keys(): string[];
}
export declare class ContextKeyAndExpr implements ContextKeyExpr {
    readonly expr: ContextKeyExpr[];
    constructor(expr: (ContextKeyExpr | undefined)[]);
    getType(): ContextKeyExprType;
    equals(other: ContextKeyExpr): boolean;
    evaluate(context: Context): boolean;
    private static normalizeArr;
    normalize(): ContextKeyExpr | undefined;
    serialize(): string;
    keys(): string[];
}
export declare class RawContextKey<T> extends ContextKeyDefinedExpr {
    private defaultValue;
    constructor(key: string, defaultValue: T | undefined);
    bindTo(target: ContextKeyService): ContextKey<T>;
    getValue(target: ContextKeyService): T | undefined;
    toNegated(): ContextKeyExpr;
    isEqualTo(value: string): ContextKeyExpr;
    notEqualsTo(value: string): ContextKeyExpr;
}
export interface Context {
    getValue<T>(key: string): T | undefined;
}
export interface ContextKey<T> {
    set(value: T): void;
    reset(): void;
    get(): T | undefined;
}
export interface ContextKeyServiceTarget {
    parentElement: ContextKeyServiceTarget | null;
    setAttribute(attr: string, value: string): void;
    removeAttribute(attr: string): void;
    hasAttribute(attr: string): boolean;
    getAttribute(attr: string): string | null;
}
export interface ReadableSet<T> {
    has(value: T): boolean;
}
export interface ContextKeyChangeEvent {
    affectsSome(keys: ReadableSet<string>): boolean;
}
export declare const ContextKeyService: unique symbol;
export interface ContextKeyService {
    dispose(): void;
    onDidChangeContext: Event<ContextKeyChangeEvent>;
    createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T>;
    contextMatchesRules(rules: ContextKeyExpr | undefined): boolean;
    getContextKeyValue<T>(key: string): T | undefined;
    createScoped(target?: ContextKeyServiceTarget): ContextKeyService;
    getContext(target: ContextKeyServiceTarget | null): Context;
}
//# sourceMappingURL=context-key.d.ts.map