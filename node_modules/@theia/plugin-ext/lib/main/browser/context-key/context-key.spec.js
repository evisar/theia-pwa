"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// adjusted to Theia APIs
require("mocha");
var assert = require("assert");
var context_key_1 = require("./context-key");
// tslint:disable:no-any
function createContext(ctx) {
    return {
        getValue: function (key) { return ctx[key]; }
    };
}
describe('ContextKeyExpr', function () {
    it('ContextKeyExpr.equals', function () {
        var a = context_key_1.ContextKeyExpr.and(context_key_1.ContextKeyExpr.has('a1'), context_key_1.ContextKeyExpr.and(context_key_1.ContextKeyExpr.has('and.a')), context_key_1.ContextKeyExpr.has('a2'), context_key_1.ContextKeyExpr.regex('d3', /d.*/), context_key_1.ContextKeyExpr.regex('d4', /\*\*3*/), context_key_1.ContextKeyExpr.equals('b1', 'bb1'), context_key_1.ContextKeyExpr.equals('b2', 'bb2'), context_key_1.ContextKeyExpr.notEquals('c1', 'cc1'), context_key_1.ContextKeyExpr.notEquals('c2', 'cc2'), context_key_1.ContextKeyExpr.not('d1'), context_key_1.ContextKeyExpr.not('d2'));
        var b = context_key_1.ContextKeyExpr.and(context_key_1.ContextKeyExpr.equals('b2', 'bb2'), context_key_1.ContextKeyExpr.notEquals('c1', 'cc1'), context_key_1.ContextKeyExpr.not('d1'), context_key_1.ContextKeyExpr.regex('d4', /\*\*3*/), context_key_1.ContextKeyExpr.notEquals('c2', 'cc2'), context_key_1.ContextKeyExpr.has('a2'), context_key_1.ContextKeyExpr.equals('b1', 'bb1'), context_key_1.ContextKeyExpr.regex('d3', /d.*/), context_key_1.ContextKeyExpr.has('a1'), context_key_1.ContextKeyExpr.and(context_key_1.ContextKeyExpr.equals('and.a', true)), context_key_1.ContextKeyExpr.not('d2'));
        assert(a.equals(b), 'expressions should be equal');
    });
    it('normalize', function () {
        var key1IsTrue = context_key_1.ContextKeyExpr.equals('key1', true);
        var key1IsNotFalse = context_key_1.ContextKeyExpr.notEquals('key1', false);
        var key1IsFalse = context_key_1.ContextKeyExpr.equals('key1', false);
        var key1IsNotTrue = context_key_1.ContextKeyExpr.notEquals('key1', true);
        assert.ok(key1IsTrue.normalize().equals(context_key_1.ContextKeyExpr.has('key1')));
        assert.ok(key1IsNotFalse.normalize().equals(context_key_1.ContextKeyExpr.has('key1')));
        assert.ok(key1IsFalse.normalize().equals(context_key_1.ContextKeyExpr.not('key1')));
        assert.ok(key1IsNotTrue.normalize().equals(context_key_1.ContextKeyExpr.not('key1')));
    });
    it('evaluate', function () {
        /* tslint:disable:triple-equals */
        var context = createContext({
            'a': true,
            'b': false,
            'c': '5',
            'd': 'd'
        });
        function testExpression(expr, expected) {
            var rules = context_key_1.ContextKeyExpr.deserialize(expr);
            assert.equal(rules.evaluate(context), expected, expr);
        }
        function testBatch(expr, value) {
            testExpression(expr, !!value);
            testExpression(expr + ' == true', !!value);
            testExpression(expr + ' != true', !value);
            testExpression(expr + ' == false', !value);
            testExpression(expr + ' != false', !!value);
            testExpression(expr + ' == 5', value == '5');
            testExpression(expr + ' != 5', value != '5');
            testExpression('!' + expr, !value);
            testExpression(expr + ' =~ /d.*/', /d.*/.test(value));
            testExpression(expr + ' =~ /D/i', /D/i.test(value));
        }
        testBatch('a', true);
        testBatch('b', false);
        testBatch('c', '5');
        testBatch('d', 'd');
        testBatch('z', undefined);
        testExpression('a && !b', true && !false);
        testExpression('a && b', true && false);
        testExpression('a && !b && c == 5', true && !false && '5' == '5');
        testExpression('d =~ /e.*/', false);
        /* tslint:enable:triple-equals */
    });
});
//# sourceMappingURL=context-key.spec.js.map