/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { PreferenceService } from '@theia/core/lib/browser';
import { Event, Emitter } from '@theia/core/lib/common';
import { ContextKeyExpr, Context, ContextKey, ContextKeyChangeEvent, ContextKeyService, ContextKeyServiceTarget } from './context-key';
export declare class DefaultContext implements Context {
    protected readonly id: number;
    protected readonly parent: DefaultContext | undefined;
    protected value: {
        [key: string]: any;
    };
    constructor(id: number, parent: DefaultContext | undefined);
    setValue(key: string, value: any): boolean;
    removeValue(key: string): boolean;
    getValue<T>(key: string): T | undefined;
    collectAllValues(): {
        [key: string]: any;
    };
}
export declare abstract class AbstractContextKeyService implements ContextKeyService {
    protected readonly myContextId: number;
    protected isDisposed: boolean;
    protected onDidChangeContextEvent: Event<ContextKeyChangeEvent>;
    protected onDidChangeContextKey: Emitter<string | string[]>;
    constructor(myContextId: number);
    abstract dispose(): void;
    createKey<T>(key: string, defaultValue: T | undefined): ContextKey<T>;
    readonly onDidChangeContext: Event<ContextKeyChangeEvent>;
    createScoped(domNode: ContextKeyServiceTarget): ContextKeyService;
    contextMatchesRules(rules: ContextKeyExpr | undefined): boolean;
    getContextKeyValue<T>(key: string): T | undefined;
    setContext(key: string, value: any): void;
    removeContext(key: string): void;
    getContext(target: ContextKeyServiceTarget | null): Context;
    abstract getContextValuesContainer(contextId: number): DefaultContext;
    abstract createChildContext(parentContextId?: number): number;
    abstract disposeContext(contextId: number): void;
}
export declare class ContextKeyServiceImpl extends AbstractContextKeyService implements ContextKeyService {
    private lastContextId;
    private contexts;
    private toDispose;
    constructor(configurationService: PreferenceService);
    dispose(): void;
    getContextValuesContainer(contextId: number): DefaultContext;
    createChildContext(parentContextId?: number): number;
    disposeContext(contextId: number): void;
}
//# sourceMappingURL=context-key-service.d.ts.map