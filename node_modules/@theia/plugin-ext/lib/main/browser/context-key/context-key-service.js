"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// adjusted to Theia APIs
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var common_1 = require("@theia/core/lib/common");
var KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';
// tslint:disable:no-any
var DefaultContext = /** @class */ (function () {
    function DefaultContext(id, parent) {
        this.id = id;
        this.parent = parent;
        // tslint:disable-next-line:no-null-keyword
        this.value = Object.create(null);
        this.value['_contextId'] = id;
    }
    DefaultContext.prototype.setValue = function (key, value) {
        if (this.value[key] !== value) {
            this.value[key] = value;
            return true;
        }
        return false;
    };
    DefaultContext.prototype.removeValue = function (key) {
        if (key in this.value) {
            delete this.value[key];
            return true;
        }
        return false;
    };
    DefaultContext.prototype.getValue = function (key) {
        var ret = this.value[key];
        if (typeof ret === 'undefined' && this.parent) {
            return this.parent.getValue(key);
        }
        return ret;
    };
    DefaultContext.prototype.collectAllValues = function () {
        // tslint:disable-next-line:no-null-keyword
        var result = this.parent ? this.parent.collectAllValues() : Object.create(null);
        result = __assign({}, result, this.value);
        delete result['_contextId'];
        return result;
    };
    return DefaultContext;
}());
exports.DefaultContext = DefaultContext;
var NullContext = /** @class */ (function (_super) {
    __extends(NullContext, _super);
    function NullContext() {
        return _super.call(this, -1, undefined) || this;
    }
    NullContext.prototype.setValue = function (key, value) {
        return false;
    };
    NullContext.prototype.removeValue = function (key) {
        return false;
    };
    NullContext.prototype.getValue = function (key) {
        return undefined;
    };
    NullContext.prototype.collectAllValues = function () {
        // tslint:disable-next-line:no-null-keyword
        return Object.create(null);
    };
    NullContext.INSTANCE = new NullContext();
    return NullContext;
}(DefaultContext));
var ConfigAwareContextValuesContainer = /** @class */ (function (_super) {
    __extends(ConfigAwareContextValuesContainer, _super);
    function ConfigAwareContextValuesContainer(id, configurationService, emitter) {
        var _this = _super.call(this, id, undefined) || this;
        _this.id = id;
        _this.configurationService = configurationService;
        _this.emitter = emitter;
        _this.values = new Map();
        _this.listener = _this.configurationService.onPreferenceChanged(function (event) {
            var changedKeys = [];
            var contextKey = "config." + event.preferenceName;
            if (_this.values.has(contextKey)) {
                _this.values.delete(contextKey);
                changedKeys.push(contextKey);
            }
            emitter.fire(changedKeys);
        });
        return _this;
    }
    ConfigAwareContextValuesContainer.prototype.dispose = function () {
        this.listener.dispose();
    };
    ConfigAwareContextValuesContainer.prototype.getValue = function (key) {
        if (key.indexOf(ConfigAwareContextValuesContainer.keyPrefix) !== 0) {
            return _super.prototype.getValue.call(this, key);
        }
        if (this.values.has(key)) {
            return this.values.get(key);
        }
        var configKey = key.substr(ConfigAwareContextValuesContainer.keyPrefix.length);
        var configValue = this.configurationService.get(configKey);
        var value = undefined;
        switch (typeof configValue) {
            case 'number':
            case 'boolean':
            case 'string':
                value = configValue;
                break;
        }
        this.values.set(key, value);
        return value;
    };
    ConfigAwareContextValuesContainer.prototype.setValue = function (key, value) {
        return _super.prototype.setValue.call(this, key, value);
    };
    ConfigAwareContextValuesContainer.prototype.removeValue = function (key) {
        return _super.prototype.removeValue.call(this, key);
    };
    ConfigAwareContextValuesContainer.prototype.collectAllValues = function () {
        var result = Object.create(null);
        this.values.forEach(function (value, index) { return result[index] = value; });
        return __assign({}, result, _super.prototype.collectAllValues.call(this));
    };
    ConfigAwareContextValuesContainer.keyPrefix = 'config.';
    return ConfigAwareContextValuesContainer;
}(DefaultContext));
var ContextKeyImpl = /** @class */ (function () {
    function ContextKeyImpl(parent, key, defaultValue) {
        this.parent = parent;
        this.key = key;
        this.defaultValue = defaultValue;
        this.reset();
    }
    ContextKeyImpl.prototype.set = function (value) {
        this.parent.setContext(this.key, value);
    };
    ContextKeyImpl.prototype.reset = function () {
        if (typeof this.defaultValue === 'undefined') {
            this.parent.removeContext(this.key);
        }
        else {
            this.parent.setContext(this.key, this.defaultValue);
        }
    };
    ContextKeyImpl.prototype.get = function () {
        return this.parent.getContextKeyValue(this.key);
    };
    return ContextKeyImpl;
}());
var SimpleContextKeyChangeEvent = /** @class */ (function () {
    function SimpleContextKeyChangeEvent(key) {
        this.key = key;
    }
    SimpleContextKeyChangeEvent.prototype.affectsSome = function (keys) {
        return keys.has(this.key);
    };
    return SimpleContextKeyChangeEvent;
}());
var ArrayContextKeyChangeEvent = /** @class */ (function () {
    function ArrayContextKeyChangeEvent(keys) {
        this.keys = keys;
    }
    ArrayContextKeyChangeEvent.prototype.affectsSome = function (keys) {
        var e_1, _a;
        try {
            for (var _b = __values(this.keys), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (keys.has(key)) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    return ArrayContextKeyChangeEvent;
}());
var AbstractContextKeyService = /** @class */ (function () {
    function AbstractContextKeyService(myContextId) {
        this.myContextId = myContextId;
        this.isDisposed = false;
        this.onDidChangeContextKey = new common_1.Emitter();
    }
    AbstractContextKeyService.prototype.createKey = function (key, defaultValue) {
        if (this.isDisposed) {
            throw new Error('AbstractContextKeyService has been disposed');
        }
        return new ContextKeyImpl(this, key, defaultValue);
    };
    Object.defineProperty(AbstractContextKeyService.prototype, "onDidChangeContext", {
        get: function () {
            if (!this.onDidChangeContextEvent) {
                this.onDidChangeContextEvent = common_1.Event.map(this.onDidChangeContextKey.event, (function (changedKeyOrKeys) {
                    return typeof changedKeyOrKeys === 'string'
                        ? new SimpleContextKeyChangeEvent(changedKeyOrKeys)
                        : new ArrayContextKeyChangeEvent(changedKeyOrKeys);
                }));
            }
            return this.onDidChangeContextEvent;
        },
        enumerable: true,
        configurable: true
    });
    AbstractContextKeyService.prototype.createScoped = function (domNode) {
        if (this.isDisposed) {
            throw new Error('AbstractContextKeyService has been disposed');
        }
        return new ScopedContextKeyService(this, this.onDidChangeContextKey, domNode);
    };
    AbstractContextKeyService.prototype.contextMatchesRules = function (rules) {
        if (this.isDisposed) {
            throw new Error('AbstractContextKeyService has been disposed');
        }
        var context = this.getContextValuesContainer(this.myContextId);
        if (!rules) {
            return true;
        }
        return rules.evaluate(context);
    };
    AbstractContextKeyService.prototype.getContextKeyValue = function (key) {
        if (this.isDisposed) {
            return undefined;
        }
        return this.getContextValuesContainer(this.myContextId).getValue(key);
    };
    AbstractContextKeyService.prototype.setContext = function (key, value) {
        if (this.isDisposed) {
            return;
        }
        var myContext = this.getContextValuesContainer(this.myContextId);
        if (!myContext) {
            return;
        }
        if (myContext.setValue(key, value)) {
            this.onDidChangeContextKey.fire(key);
        }
    };
    AbstractContextKeyService.prototype.removeContext = function (key) {
        if (this.isDisposed) {
            return;
        }
        if (this.getContextValuesContainer(this.myContextId).removeValue(key)) {
            this.onDidChangeContextKey.fire(key);
        }
    };
    AbstractContextKeyService.prototype.getContext = function (target) {
        if (this.isDisposed) {
            return NullContext.INSTANCE;
        }
        return this.getContextValuesContainer(findContextAttr(target));
    };
    AbstractContextKeyService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.unmanaged()),
        __metadata("design:paramtypes", [Number])
    ], AbstractContextKeyService);
    return AbstractContextKeyService;
}());
exports.AbstractContextKeyService = AbstractContextKeyService;
var ContextKeyServiceImpl = /** @class */ (function (_super) {
    __extends(ContextKeyServiceImpl, _super);
    function ContextKeyServiceImpl(configurationService) {
        var _this = _super.call(this, 0) || this;
        _this.toDispose = new common_1.DisposableCollection();
        _this.lastContextId = 0;
        // tslint:disable-next-line:no-null-keyword
        _this.contexts = Object.create(null);
        var myContext = new ConfigAwareContextValuesContainer(_this.myContextId, configurationService, _this.onDidChangeContextKey);
        _this.contexts[String(_this.myContextId)] = myContext;
        _this.toDispose.push(myContext);
        return _this;
    }
    ContextKeyServiceImpl.prototype.dispose = function () {
        this.isDisposed = true;
        this.toDispose.dispose();
    };
    ContextKeyServiceImpl.prototype.getContextValuesContainer = function (contextId) {
        if (this.isDisposed) {
            return NullContext.INSTANCE;
        }
        return this.contexts[String(contextId)];
    };
    ContextKeyServiceImpl.prototype.createChildContext = function (parentContextId) {
        if (parentContextId === void 0) { parentContextId = this.myContextId; }
        if (this.isDisposed) {
            throw new Error('ContextKeyService has been disposed');
        }
        var id = (++this.lastContextId);
        this.contexts[String(id)] = new DefaultContext(id, this.getContextValuesContainer(parentContextId));
        return id;
    };
    ContextKeyServiceImpl.prototype.disposeContext = function (contextId) {
        if (this.isDisposed) {
            return;
        }
        delete this.contexts[String(contextId)];
    };
    ContextKeyServiceImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.PreferenceService)),
        __metadata("design:paramtypes", [Object])
    ], ContextKeyServiceImpl);
    return ContextKeyServiceImpl;
}(AbstractContextKeyService));
exports.ContextKeyServiceImpl = ContextKeyServiceImpl;
var ScopedContextKeyService = /** @class */ (function (_super) {
    __extends(ScopedContextKeyService, _super);
    function ScopedContextKeyService(parent, emitter, domNode) {
        var _this = _super.call(this, parent.createChildContext()) || this;
        _this.parent = parent;
        _this.domNode = domNode;
        _this.onDidChangeContextKey = emitter;
        if (domNode) {
            _this.domNode = domNode;
            _this.domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(_this.myContextId));
        }
        return _this;
    }
    ScopedContextKeyService.prototype.dispose = function () {
        this.isDisposed = true;
        this.parent.disposeContext(this.myContextId);
        if (this.domNode) {
            this.domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);
            this.domNode = undefined;
        }
    };
    Object.defineProperty(ScopedContextKeyService.prototype, "onDidChangeContext", {
        get: function () {
            return this.parent.onDidChangeContext;
        },
        enumerable: true,
        configurable: true
    });
    ScopedContextKeyService.prototype.getContextValuesContainer = function (contextId) {
        if (this.isDisposed) {
            return NullContext.INSTANCE;
        }
        return this.parent.getContextValuesContainer(contextId);
    };
    ScopedContextKeyService.prototype.createChildContext = function (parentContextId) {
        if (parentContextId === void 0) { parentContextId = this.myContextId; }
        if (this.isDisposed) {
            throw new Error('ScopedContextKeyService has been disposed');
        }
        return this.parent.createChildContext(parentContextId);
    };
    ScopedContextKeyService.prototype.disposeContext = function (contextId) {
        if (this.isDisposed) {
            return;
        }
        this.parent.disposeContext(contextId);
    };
    return ScopedContextKeyService;
}(AbstractContextKeyService));
function findContextAttr(domNode) {
    while (domNode) {
        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {
            var attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);
            if (attr) {
                return parseInt(attr, 10);
            }
            return NaN;
        }
        domNode = domNode.parentElement;
    }
    return 0;
}
//# sourceMappingURL=context-key-service.js.map