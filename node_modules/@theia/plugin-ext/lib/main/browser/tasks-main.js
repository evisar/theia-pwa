"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var plugin_api_1 = require("../../api/plugin-api");
var core_1 = require("@theia/core");
var task_contribution_1 = require("@theia/task/lib/browser/task-contribution");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var task_watcher_1 = require("@theia/task/lib/common/task-watcher");
var task_service_1 = require("@theia/task/lib/browser/task-service");
var TasksMainImpl = /** @class */ (function () {
    function TasksMainImpl(rpc, container) {
        var _this = this;
        this.workspaceRootUri = undefined;
        this.disposables = new Map();
        this.proxy = rpc.getProxy(plugin_api_1.MAIN_RPC_CONTEXT.TASKS_EXT);
        this.taskProviderRegistry = container.get(task_contribution_1.TaskProviderRegistry);
        this.taskResolverRegistry = container.get(task_contribution_1.TaskResolverRegistry);
        this.workspaceService = container.get(workspace_service_1.WorkspaceService);
        this.taskWatcher = container.get(task_watcher_1.TaskWatcher);
        this.taskService = container.get(task_service_1.TaskService);
        this.workspaceService.roots.then(function (roots) {
            var root = roots[0];
            if (root) {
                _this.workspaceRootUri = root.uri;
            }
        });
        this.taskWatcher.onTaskCreated(function (event) {
            if (event.ctx === _this.workspaceRootUri) {
                _this.proxy.$onDidStartTask({
                    id: event.taskId,
                    task: event.config
                });
            }
        });
    }
    TasksMainImpl.prototype.$registerTaskProvider = function (handle, type) {
        var taskProvider = this.createTaskProvider(handle);
        var taskResolver = this.createTaskResolver(handle);
        var disposable = new core_1.DisposableCollection();
        disposable.push(this.taskProviderRegistry.register(type, taskProvider));
        disposable.push(this.taskResolverRegistry.register(type, taskResolver));
        this.disposables.set(handle, disposable);
    };
    TasksMainImpl.prototype.$unregister = function (handle) {
        var disposable = this.disposables.get(handle);
        if (disposable) {
            disposable.dispose();
            this.disposables.delete(handle);
        }
    };
    TasksMainImpl.prototype.$terminateTask = function (id) {
        this.taskService.kill(id);
    };
    TasksMainImpl.prototype.createTaskProvider = function (handle) {
        var _this = this;
        return {
            provideTasks: function () {
                return _this.proxy.$provideTasks(handle).then(function (v) { return v; });
            },
        };
    };
    TasksMainImpl.prototype.createTaskResolver = function (handle) {
        var _this = this;
        return {
            resolveTask: function (taskConfig) {
                return _this.proxy.$resolveTask(handle, taskConfig).then(function (v) { return v; });
            },
        };
    };
    return TasksMainImpl;
}());
exports.TasksMainImpl = TasksMainImpl;
//# sourceMappingURL=tasks-main.js.map