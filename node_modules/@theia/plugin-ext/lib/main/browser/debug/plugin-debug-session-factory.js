"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var debug_session_contribution_1 = require("@theia/debug/lib/browser/debug-session-contribution");
var debug_session_1 = require("@theia/debug/lib/browser/debug-session");
var debug_session_connection_1 = require("@theia/debug/lib/browser/debug-session-connection");
/**
 * Session factory for a client debug session that communicates with debug adapter contributed as plugin.
 * The main difference is to use a connection factory that creates [IWebSocket](#IWebSocket) over Rpc channel.
 */
var PluginDebugSessionFactory = /** @class */ (function (_super) {
    __extends(PluginDebugSessionFactory, _super);
    function PluginDebugSessionFactory(terminalService, editorManager, breakpoints, labelProvider, messages, outputChannelManager, debugPreferences, connectionFactory) {
        var _this = _super.call(this) || this;
        _this.terminalService = terminalService;
        _this.editorManager = editorManager;
        _this.breakpoints = breakpoints;
        _this.labelProvider = labelProvider;
        _this.messages = messages;
        _this.outputChannelManager = outputChannelManager;
        _this.debugPreferences = debugPreferences;
        _this.connectionFactory = connectionFactory;
        return _this;
    }
    PluginDebugSessionFactory.prototype.get = function (sessionId, options) {
        var connection = new debug_session_connection_1.DebugSessionConnection(sessionId, this.connectionFactory, this.getTraceOutputChannel());
        return new debug_session_1.DebugSession(sessionId, options, connection, this.terminalService, this.editorManager, this.breakpoints, this.labelProvider, this.messages);
    };
    return PluginDebugSessionFactory;
}(debug_session_contribution_1.DefaultDebugSessionFactory));
exports.PluginDebugSessionFactory = PluginDebugSessionFactory;
//# sourceMappingURL=plugin-debug-session-factory.js.map