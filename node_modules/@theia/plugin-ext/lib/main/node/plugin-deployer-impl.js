"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var inversify_1 = require("inversify");
var plugin_protocol_1 = require("../../common/plugin-protocol");
var plugin_deployer_entry_impl_1 = require("./plugin-deployer-entry-impl");
var plugin_deployer_resolver_context_impl_1 = require("./plugin-deployer-resolver-context-impl");
var plugin_deployer_proxy_entry_impl_1 = require("./plugin-deployer-proxy-entry-impl");
var plugin_deployer_file_handler_context_impl_1 = require("./plugin-deployer-file-handler-context-impl");
var plugin_deployer_directory_handler_context_impl_1 = require("./plugin-deployer-directory-handler-context-impl");
var core_1 = require("@theia/core");
var PluginDeployerImpl = /** @class */ (function () {
    function PluginDeployerImpl() {
    }
    PluginDeployerImpl.prototype.start = function () {
        this.logger.debug('Starting the deployer with the list of resolvers', this.pluginResolvers);
        this.doStart();
    };
    PluginDeployerImpl.prototype.initResolvers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var pluginDeployerResolverInit, promises;
            var _this = this;
            return __generator(this, function (_a) {
                pluginDeployerResolverInit = new plugin_deployer_resolver_context_impl_1.PluginDeployerResolverInitImpl();
                promises = this.pluginResolvers.map(function (pluginResolver) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (pluginResolver.init) {
                            pluginResolver.init(pluginDeployerResolverInit);
                        }
                        return [2 /*return*/];
                    });
                }); });
                return [2 /*return*/, Promise.all(promises)];
            });
        });
    };
    PluginDeployerImpl.prototype.doStart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var defaultPluginsValue, pluginsValue, defaultPluginIdList, pluginIdList, pluginsList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // init resolvers
                    return [4 /*yield*/, this.initResolvers()];
                    case 1:
                        // init resolvers
                        _a.sent();
                        defaultPluginsValue = process.env.THEIA_DEFAULT_PLUGINS || undefined;
                        pluginsValue = process.env.THEIA_PLUGINS || undefined;
                        this.logger.debug('Found the list of default plugins ID on env:', defaultPluginsValue);
                        this.logger.debug('Found the list of plugins ID on env:', pluginsValue);
                        defaultPluginIdList = defaultPluginsValue ? defaultPluginsValue.split(',') : [];
                        pluginIdList = pluginsValue ? pluginsValue.split(',') : [];
                        pluginsList = defaultPluginIdList.concat(pluginIdList);
                        // skip if no plug-ins
                        if (pluginsList.length === 0) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        return [4 /*yield*/, this.deployMultipleEntries(pluginsList)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PluginDeployerImpl.prototype.deploy = function (pluginEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var entries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entries = [];
                        entries.push(pluginEntry);
                        return [4 /*yield*/, this.deployMultipleEntries(entries)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    PluginDeployerImpl.prototype.deployMultipleEntries = function (pluginEntries) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // resolve plugins
                        _a = this;
                        return [4 /*yield*/, this.resolvePlugins(pluginEntries)];
                    case 1:
                        // resolve plugins
                        _a.pluginDeployerEntries = _b.sent();
                        // now that we have plugins check if we have File Handler for them
                        return [4 /*yield*/, this.applyFileHandlers()];
                    case 2:
                        // now that we have plugins check if we have File Handler for them
                        _b.sent();
                        // ok now ask for directory handlers
                        return [4 /*yield*/, this.applyDirectoryFileHandlers()];
                    case 3:
                        // ok now ask for directory handlers
                        _b.sent();
                        return [4 /*yield*/, this.deployPlugins()];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    /**
     * deploy all plugins that have been accepted
     */
    PluginDeployerImpl.prototype.deployPlugins = function () {
        return __awaiter(this, void 0, void 0, function () {
            var acceptedPlugins, acceptedFrontendPlugins, acceptedBackendPlugins, pluginPaths;
            var _this = this;
            return __generator(this, function (_a) {
                acceptedPlugins = this.pluginDeployerEntries.filter(function (pluginDeployerEntry) { return pluginDeployerEntry.isAccepted(); });
                acceptedFrontendPlugins = this.pluginDeployerEntries.filter(function (pluginDeployerEntry) { return pluginDeployerEntry.isAccepted(plugin_protocol_1.PluginDeployerEntryType.FRONTEND); });
                acceptedBackendPlugins = this.pluginDeployerEntries.filter(function (pluginDeployerEntry) { return pluginDeployerEntry.isAccepted(plugin_protocol_1.PluginDeployerEntryType.BACKEND); });
                this.logger.debug('the accepted plugins are', acceptedPlugins);
                this.logger.debug('the acceptedFrontendPlugins plugins are', acceptedFrontendPlugins);
                this.logger.debug('the acceptedBackendPlugins plugins are', acceptedBackendPlugins);
                acceptedPlugins.forEach(function (plugin) {
                    _this.logger.debug('will deploy plugin', plugin.id(), 'with changes', JSON.stringify(plugin.getChanges()), 'and this plugin has been resolved by', plugin.resolvedBy());
                });
                pluginPaths = acceptedBackendPlugins.map(function (pluginEntry) { return pluginEntry.path(); });
                this.logger.debug('local path to deploy on remote instance', pluginPaths);
                // start the backend plugins
                this.hostedPluginServer.deployBackendPlugins(acceptedBackendPlugins);
                this.hostedPluginServer.deployFrontendPlugins(acceptedFrontendPlugins);
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    /**
     * If there are some single files, try to see if we can work on these files (like unpacking it, etc)
     */
    PluginDeployerImpl.prototype.applyFileHandlers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var waitPromises;
            var _this = this;
            return __generator(this, function (_a) {
                waitPromises = [];
                this.pluginDeployerEntries.filter(function (pluginDeployerEntry) { return pluginDeployerEntry.isResolved(); }).map(function (pluginDeployerEntry) {
                    _this.pluginDeployerFileHandlers.map(function (pluginFileHandler) {
                        var proxyPluginDeployerEntry = new plugin_deployer_proxy_entry_impl_1.ProxyPluginDeployerEntry(pluginFileHandler, (pluginDeployerEntry));
                        if (pluginFileHandler.accept(proxyPluginDeployerEntry)) {
                            var pluginDeployerFileHandlerContext = new plugin_deployer_file_handler_context_impl_1.PluginDeployerFileHandlerContextImpl(proxyPluginDeployerEntry);
                            var promise = pluginFileHandler.handle(pluginDeployerFileHandlerContext);
                            waitPromises.push(promise);
                        }
                    });
                });
                return [2 /*return*/, Promise.all(waitPromises)];
            });
        });
    };
    /**
     * Check for all registered directories to see if there are some plugins that can be accepted to be deployed.
     */
    PluginDeployerImpl.prototype.applyDirectoryFileHandlers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var waitPromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        waitPromises = [];
                        this.pluginDeployerEntries.filter(function (pluginDeployerEntry) { return pluginDeployerEntry.isResolved(); }).map(function (pluginDeployerEntry) {
                            _this.pluginDeployerDirectoryHandlers.map(function (pluginDirectoryHandler) {
                                var proxyPluginDeployerEntry = new plugin_deployer_proxy_entry_impl_1.ProxyPluginDeployerEntry(pluginDirectoryHandler, (pluginDeployerEntry));
                                if (pluginDirectoryHandler.accept(proxyPluginDeployerEntry)) {
                                    var pluginDeployerDirectoryHandlerContext = new plugin_deployer_directory_handler_context_impl_1.PluginDeployerDirectoryHandlerContextImpl(proxyPluginDeployerEntry);
                                    var promise = pluginDirectoryHandler.handle(pluginDeployerDirectoryHandlerContext);
                                    waitPromises.push(promise);
                                }
                            });
                        });
                        return [4 /*yield*/, Promise.all(waitPromises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Check a given set of plugin IDs to see if there are some resolvers that can handle them. If there is a matching resolver, then we resolve the plugin
     */
    PluginDeployerImpl.prototype.resolvePlugins = function (pluginIdList) {
        return __awaiter(this, void 0, void 0, function () {
            var pluginDeployerEntries, promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pluginDeployerEntries = [];
                        promises = pluginIdList.map(function (pluginId) { return __awaiter(_this, void 0, void 0, function () {
                            var foundPluginResolver, context_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        foundPluginResolver = this.pluginResolvers.find(function (pluginResolver) { return pluginResolver.accept(pluginId); });
                                        if (!foundPluginResolver) return [3 /*break*/, 2];
                                        context_1 = new plugin_deployer_resolver_context_impl_1.PluginDeployerResolverContextImpl(foundPluginResolver, pluginId);
                                        return [4 /*yield*/, foundPluginResolver.resolve(context_1)];
                                    case 1:
                                        _a.sent();
                                        context_1.getPlugins().forEach(function (entry) { return pluginDeployerEntries.push(entry); });
                                        return [3 /*break*/, 3];
                                    case 2:
                                        // log it for now
                                        this.logger.error('No plugin resolver found for the entry', pluginId);
                                        pluginDeployerEntries.push(new plugin_deployer_entry_impl_1.PluginDeployerEntryImpl(pluginId, pluginId));
                                        _a.label = 3;
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, pluginDeployerEntries];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], PluginDeployerImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(plugin_protocol_1.HostedPluginServer),
        __metadata("design:type", Object)
    ], PluginDeployerImpl.prototype, "hostedPluginServer", void 0);
    __decorate([
        inversify_1.optional(), inversify_1.multiInject(plugin_protocol_1.PluginDeployerResolver),
        __metadata("design:type", Array)
    ], PluginDeployerImpl.prototype, "pluginResolvers", void 0);
    __decorate([
        inversify_1.optional(), inversify_1.multiInject(plugin_protocol_1.PluginDeployerFileHandler),
        __metadata("design:type", Array)
    ], PluginDeployerImpl.prototype, "pluginDeployerFileHandlers", void 0);
    __decorate([
        inversify_1.optional(), inversify_1.multiInject(plugin_protocol_1.PluginDeployerDirectoryHandler),
        __metadata("design:type", Array)
    ], PluginDeployerImpl.prototype, "pluginDeployerDirectoryHandlers", void 0);
    PluginDeployerImpl = __decorate([
        inversify_1.injectable()
    ], PluginDeployerImpl);
    return PluginDeployerImpl;
}());
exports.PluginDeployerImpl = PluginDeployerImpl;
//# sourceMappingURL=plugin-deployer-impl.js.map