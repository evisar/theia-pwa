"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/filesystem/lib/common");
var path = require("path");
var crypto = require("crypto");
var uri_1 = require("@theia/core/lib/common/uri");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var core_1 = require("@theia/core");
var const_1 = require("./const");
var common_2 = require("@theia/workspace/lib/common");
// Service to provide configuration paths for plugin api.
var PluginPathsServiceImpl = /** @class */ (function () {
    function PluginPathsServiceImpl(fileSystem) {
        this.fileSystem = fileSystem;
        this.windowsDataFolders = [const_1.PluginPaths.WINDOWS_APP_DATA_DIR, const_1.PluginPaths.WINDOWS_ROAMING_DIR];
        this.deferredStoragePath = new promise_util_1.Deferred();
        this.storagePathInitialized = false;
    }
    PluginPathsServiceImpl.prototype.provideHostLogPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var parentLogsDir, _a, pluginDirPath;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getLogsDirPath()];
                    case 1:
                        parentLogsDir = _b.sent();
                        if (!parentLogsDir) {
                            return [2 /*return*/, Promise.reject(new Error('Unable to get parent log directory'))];
                        }
                        _a = parentLogsDir;
                        if (!_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.fileSystem.exists(parentLogsDir)];
                    case 2:
                        _a = !(_b.sent());
                        _b.label = 3;
                    case 3:
                        if (!_a) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.fileSystem.createFolder(parentLogsDir)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        pluginDirPath = path.join(parentLogsDir, this.gererateTimeFolderName(), 'host');
                        return [4 /*yield*/, this.fileSystem.exists(pluginDirPath)];
                    case 6:
                        if (!!(_b.sent())) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.fileSystem.createFolder(pluginDirPath)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, new uri_1.default(pluginDirPath).path.toString()];
                }
            });
        });
    };
    PluginPathsServiceImpl.prototype.provideHostStoragePath = function (workspace, roots) {
        return __awaiter(this, void 0, void 0, function () {
            var parentStorageDir, storageDirName, storageDirPath, storagePathString;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWorkspaceStorageDirPath()];
                    case 1:
                        parentStorageDir = _a.sent();
                        if (!parentStorageDir) {
                            return [2 /*return*/, Promise.reject(new Error('Unable to get parent storage directory'))];
                        }
                        if (!workspace) {
                            if (!this.storagePathInitialized) {
                                this.deferredStoragePath.resolve(undefined);
                                this.storagePathInitialized = true;
                            }
                            this.cachedStoragePath = undefined;
                            return [2 /*return*/, Promise.resolve(undefined)];
                        }
                        return [4 /*yield*/, this.fileSystem.exists(parentStorageDir)];
                    case 2:
                        if (!!(_a.sent())) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.fileSystem.createFolder(parentStorageDir)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.buildWorkspaceId(workspace, roots)];
                    case 5:
                        storageDirName = _a.sent();
                        storageDirPath = path.join(parentStorageDir, storageDirName);
                        return [4 /*yield*/, this.fileSystem.exists(storageDirPath)];
                    case 6:
                        if (!!(_a.sent())) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.fileSystem.createFolder(storageDirPath)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        storagePathString = new uri_1.default(storageDirPath).path.toString();
                        if (!this.storagePathInitialized) {
                            this.deferredStoragePath.resolve(storagePathString);
                            this.storagePathInitialized = true;
                        }
                        this.cachedStoragePath = storagePathString;
                        return [2 /*return*/, this.cachedStoragePath];
                }
            });
        });
    };
    PluginPathsServiceImpl.prototype.getLastStoragePath = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.storagePathInitialized) {
                    return [2 /*return*/, Promise.resolve(this.cachedStoragePath)];
                }
                else {
                    return [2 /*return*/, this.deferredStoragePath.promise];
                }
                return [2 /*return*/];
            });
        });
    };
    PluginPathsServiceImpl.prototype.buildWorkspaceId = function (workspace, roots) {
        return __awaiter(this, void 0, void 0, function () {
            var homeDir, untitledWorkspace, rootsStr, uri, displayName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserHomeDir()];
                    case 1:
                        homeDir = _a.sent();
                        untitledWorkspace = common_2.getTemporaryWorkspaceFileUri(new uri_1.default(homeDir));
                        if (untitledWorkspace.toString() === workspace.uri) {
                            rootsStr = roots.map(function (root) { return root.uri; }).sort().join(',');
                            return [2 /*return*/, crypto.createHash('md5').update(rootsStr).digest('hex')];
                        }
                        else {
                            uri = new uri_1.default(workspace.uri);
                            displayName = uri.displayName;
                            if ((!workspace || !workspace.isDirectory) && (displayName.endsWith("." + common_2.THEIA_EXT) || displayName.endsWith("." + common_2.VSCODE_EXT))) {
                                displayName = displayName.slice(0, displayName.lastIndexOf('.'));
                            }
                            return [2 /*return*/, crypto.createHash('md5').update(uri.toString()).digest('hex')];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Generate time folder name in format: YYYYMMDDTHHMMSS, for example: 20181205T093828
     */
    PluginPathsServiceImpl.prototype.gererateTimeFolderName = function () {
        return new Date().toISOString().replace(/[-:]|(\..*)/g, '');
    };
    PluginPathsServiceImpl.prototype.getLogsDirPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var theiaDir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTheiaDirPath()];
                    case 1:
                        theiaDir = _a.sent();
                        return [2 /*return*/, path.join(theiaDir, const_1.PluginPaths.PLUGINS_LOGS_DIR)];
                }
            });
        });
    };
    PluginPathsServiceImpl.prototype.getWorkspaceStorageDirPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var theiaDir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTheiaDirPath()];
                    case 1:
                        theiaDir = _a.sent();
                        return [2 /*return*/, path.join(theiaDir, const_1.PluginPaths.PLUGINS_WORKSPACE_STORAGE_DIR)];
                }
            });
        });
    };
    PluginPathsServiceImpl.prototype.getTheiaDirPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var homeDir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserHomeDir()];
                    case 1:
                        homeDir = _a.sent();
                        return [2 /*return*/, path.join.apply(path, __spread([homeDir], (core_1.isWindows ? this.windowsDataFolders : ['']), [const_1.PluginPaths.THEIA_DIR]))];
                }
            });
        });
    };
    PluginPathsServiceImpl.prototype.getUserHomeDir = function () {
        return __awaiter(this, void 0, void 0, function () {
            var homeDirStat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fileSystem.getCurrentUserHome()];
                    case 1:
                        homeDirStat = _a.sent();
                        if (!homeDirStat) {
                            return [2 /*return*/, Promise.reject(new Error('Unable to get user home directory'))];
                        }
                        return [2 /*return*/, homeDirStat.uri];
                }
            });
        });
    };
    PluginPathsServiceImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.FileSystem)),
        __metadata("design:paramtypes", [Object])
    ], PluginPathsServiceImpl);
    return PluginPathsServiceImpl;
}());
exports.PluginPathsServiceImpl = PluginPathsServiceImpl;
//# sourceMappingURL=plugin-paths-service.js.map