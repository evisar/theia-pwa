"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var preferences_1 = require("@theia/core/lib/browser/preferences");
var os_1 = require("@theia/core/lib/common/os");
exports.editorPreferenceSchema = {
    'type': 'object',
    'properties': {
        'editor.tabSize': {
            'type': 'number',
            'minimum': 1,
            'default': 4,
            'description': 'Configure the tab size in the editor.'
        },
        'editor.fontSize': {
            'type': 'number',
            'default': (os_1.isOSX) ? 12 : 14,
            'description': 'Configure the editor font size.'
        },
        'editor.lineNumbers': {
            'enum': [
                'on',
                'off',
                'relative',
                'interval'
            ],
            'default': 'on',
            'description': 'Control the rendering of line numbers.'
        },
        'editor.renderWhitespace': {
            'enum': [
                'none',
                'boundary',
                'all'
            ],
            'default': 'none',
            'description': 'Control the rendering of whitespaces in the editor.'
        },
        'editor.autoSave': {
            'enum': [
                'on',
                'off'
            ],
            'default': 'on',
            'description': 'Configure whether the editor should be auto saved.'
        },
        'editor.autoSaveDelay': {
            'type': 'number',
            'default': 500,
            'description': 'Configure the auto save delay in milliseconds.'
        },
        'editor.rulers': {
            'type': 'array',
            'default': [],
            'description': 'Render vertical lines at the specified columns.'
        },
        'editor.wordSeparators': {
            'type': 'string',
            'default': "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/",
            'description': 'A string containing the word separators used when doing word navigation.'
        },
        'editor.glyphMargin': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable the rendering of the glyph margin.'
        },
        'editor.roundedSelection': {
            'type': 'boolean',
            'default': true,
            'description': 'Render the editor selection with rounded borders.'
        },
        'editor.minimap.enabled': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable or disable the minimap.'
        },
        'editor.minimap.showSlider': {
            'enum': [
                'mouseover',
                'always'
            ],
            'default': 'mouseover',
            'description': 'Controls whether the minimap slider is automatically hidden.'
        },
        'editor.minimap.renderCharacters': {
            'type': 'boolean',
            'default': true,
            'description': 'Render the actual characters on a line (as opposed to color blocks).'
        },
        'editor.minimap.maxColumn': {
            'type': 'number',
            'default': 120,
            'description': 'Limit the width of the minimap to render at most a certain number of columns.'
        },
        'editor.minimap.side': {
            'enum': [
                'right',
                'left'
            ],
            'default': 'right',
            'description': 'Control the side of the minimap in editor.'
        },
        'editor.overviewRulerLanes': {
            'type': 'number',
            'default': 2,
            'description': 'The number of vertical lanes the overview ruler should render.'
        },
        'editor.overviewRulerBorder': {
            'type': 'boolean',
            'default': true,
            'description': 'Controls if a border should be drawn around the overview ruler.'
        },
        'editor.cursorBlinking': {
            'enum': [
                'blink',
                'smooth',
                'phase',
                'expand',
                'solid'
            ],
            'default': 'blink',
            'description': "Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'."
        },
        'editor.mouseWheelZoom': {
            'type': 'boolean',
            'default': false,
            'description': 'Zoom the font in the editor when using the mouse wheel in combination with holding Ctrl.'
        },
        'editor.cursorStyle': {
            'enum': [
                'line',
                'block'
            ],
            'default': 'line',
            'description': "Control the cursor style, either 'block' or 'line'."
        },
        'editor.fontLigatures': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable font ligatures.'
        },
        'editor.hideCursorInOverviewRuler': {
            'type': 'boolean',
            'default': false,
            'description': 'Should the cursor be hidden in the overview ruler.'
        },
        'editor.scrollBeyondLastLine': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable that scrolling can go one screen size after the last line.'
        },
        'editor.wordWrap': {
            'enum': [
                'off',
                'on',
                'wordWrapColumn',
                'bounded'
            ],
            'default': 'off',
            'description': 'Control the wrapping of the editor.'
        },
        'editor.wordWrapColumn': {
            'type': 'number',
            'default': 80,
            'description': 'Control the wrapping of the editor.'
        },
        'editor.wrappingIndent': {
            'enum': [
                'same',
                'indent',
                'deepIndent',
                'none'
            ],
            'default': 'same',
            'description': 'Control indentation of wrapped lines.'
        },
        'editor.links': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable detecting links and making them clickable.'
        },
        'editor.mouseWheelScrollSensitivity': {
            'type': 'number',
            'default': 1,
            'description': 'A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.'
        },
        'editor.multiCursorModifier': {
            'enum': [
                'alt',
                'ctrlCmd'
            ],
            'default': 'alt',
            'description': 'The modifier to be used to add multiple cursors with the mouse.'
        },
        'editor.accessibilitySupport': {
            'enum': [
                'auto',
                'on',
                'off'
            ],
            'default': 'auto',
            'description': "Configure the editor's accessibility support."
        },
        'editor.quickSuggestions': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable quick suggestions (shadow suggestions).'
        },
        'editor.quickSuggestionsDelay': {
            'type': 'number',
            'default': 500,
            'description': 'Quick suggestions show delay (in ms).'
        },
        'editor.parameterHints': {
            'type': 'boolean',
            'default': true,
            'description': 'Enables parameter hints.'
        },
        'editor.autoClosingBrackets': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable auto closing brackets.'
        },
        'editor.autoIndent': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable auto indentation adjustment.'
        },
        'editor.formatOnType': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable format on type.'
        },
        'editor.formatOnPaste': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable format on paste.'
        },
        'editor.dragAndDrop': {
            'type': 'boolean',
            'default': false,
            'description': 'Controls if the editor should allow to move selections via drag and drop.'
        },
        'editor.suggestOnTriggerCharacters': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable the suggestion box to pop-up on trigger characters.'
        },
        'editor.acceptSuggestionOnEnter': {
            'enum': [
                'on',
                'smart',
                'off'
            ],
            'default': 'on',
            'description': 'Accept suggestions on ENTER.'
        },
        'editor.acceptSuggestionOnCommitCharacter': {
            'type': 'boolean',
            'default': true,
            'description': 'Accept suggestions on provider defined characters.'
        },
        'editor.snippetSuggestions': {
            'enum': [
                'inline',
                'top',
                'bottom',
                'none'
            ],
            'default': 'inline',
            'description': 'Enable snippet suggestions.'
        },
        'editor.emptySelectionClipboard': {
            'type': 'boolean',
            'default': true,
            'description': 'Copying without a selection copies the current line.'
        },
        'editor.wordBasedSuggestions': {
            'type': 'boolean',
            'default': true,
            'description': "Enable word based suggestions. Defaults to 'true'."
        },
        'editor.selectionHighlight': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable selection highlight.'
        },
        'editor.occurrencesHighlight': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable semantic occurrences highlight.'
        },
        'editor.codeLens': {
            'type': 'boolean',
            'default': true,
            'description': 'Show code lens.'
        },
        'editor.folding': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable code folding.'
        },
        'editor.foldingStrategy': {
            'enum': [
                'auto',
                'indentation'
            ],
            'default': 'auto',
            'description': 'Selects the folding strategy.'
                + '\'auto\' uses the strategies contributed for the current document, \'indentation\' uses the indentation based folding strategy. '
        },
        'editor.showFoldingControls': {
            'enum': [
                'mouseover',
                'always'
            ],
            'default': 'mouseover',
            'description': 'Controls whether the fold actions in the gutter stay always visible or hide unless the mouse is over the gutter.'
        },
        'editor.matchBrackets': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable highlighting of matching brackets.'
        },
        'editor.renderControlCharacters': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable rendering of control characters.'
        },
        'editor.renderIndentGuides': {
            'type': 'boolean',
            'default': false,
            'description': 'Enable rendering of indent guides.'
        },
        'editor.renderLineHighlight': {
            'enum': [
                'all',
                'gutter',
                'line',
                'none'
            ],
            'default': 'all',
            'description': 'Enable rendering of current line highlight.'
        },
        'editor.useTabStops': {
            'type': 'boolean',
            'default': true,
            'description': 'Inserting and deleting whitespace follows tab stops.'
        },
        'editor.insertSpaces': {
            'type': 'boolean',
            'default': true,
            'description': 'Using whitespaces to replace tabs when tabbing.'
        },
        'editor.colorDecorators': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable inline color decorators and color picker rendering.'
        },
        'editor.highlightActiveIndentGuide': {
            'type': 'boolean',
            'default': true,
            'description': 'Enable highlighting of the active indent guide.'
        },
        'editor.iconsInSuggestions': {
            'type': 'boolean',
            'default': true,
            'description': 'Render icons in suggestions box.'
        },
        'editor.showUnused': {
            'type': 'boolean',
            'default': true,
            'description': 'Controls fading out of unused variables.',
        },
        'editor.scrollBeyondLastColumn': {
            'type': 'number',
            'default': 5,
            'description': 'Enable that scrolling can go beyond the last column by a number of columns.'
        },
        'editor.suggestSelection': {
            'enum': [
                'first',
                'recentlyUsed',
                'recentlyUsedByPrefix'
            ],
            'default': 'first',
            'description': 'The history mode for suggestions'
        },
        'editor.fontWeight': {
            'enum': [
                'normal',
                'bold',
                'bolder',
                'lighter',
                'initial',
                'inherit',
                '100',
                '200',
                '300',
                '400',
                '500',
                '600',
                '700',
                '800',
                '900'
            ],
            'default': 'normal',
            'description': 'Controls the editor\'s font weight.'
        },
        'diffEditor.renderSideBySide': {
            'type': 'boolean',
            'description': 'Render the differences in two side-by-side editors.',
            'default': true
        },
        'diffEditor.ignoreTrimWhitespace': {
            'type': 'boolean',
            'description': 'Compute the diff by ignoring leading/trailing whitespace.',
            'default': true
        },
        'diffEditor.renderIndicators': {
            'type': 'boolean',
            'description': 'Render +/- indicators for added/deleted changes.',
            'default': true
        },
        'diffEditor.followsCaret': {
            'type': 'boolean',
            'description': 'Resets the navigator state when the user selects something in the editor.',
            'default': true
        },
        'diffEditor.ignoreCharChanges': {
            'type': 'boolean',
            'description': 'Jump from line to line.',
            'default': true
        },
        'diffEditor.alwaysRevealFirst': {
            'type': 'boolean',
            'description': 'Reveal first change.',
            'default': true
        }
    }
};
exports.EditorPreferences = Symbol('EditorPreferences');
function createEditorPreferences(preferences) {
    return preferences_1.createPreferenceProxy(preferences, exports.editorPreferenceSchema);
}
exports.createEditorPreferences = createEditorPreferences;
function bindEditorPreferences(bind) {
    bind(exports.EditorPreferences).toDynamicValue(function (ctx) {
        var preferences = ctx.container.get(preferences_1.PreferenceService);
        return createEditorPreferences(preferences);
    }).inSingletonScope();
    bind(preferences_1.PreferenceContribution).toConstantValue({ schema: exports.editorPreferenceSchema });
}
exports.bindEditorPreferences = bindEditorPreferences;
//# sourceMappingURL=editor-preferences.js.map