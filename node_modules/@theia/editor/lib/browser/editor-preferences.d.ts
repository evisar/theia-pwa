/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { interfaces } from 'inversify';
import { PreferenceProxy, PreferenceService, PreferenceSchema, PreferenceChangeEvent } from '@theia/core/lib/browser/preferences';
export declare const editorPreferenceSchema: PreferenceSchema;
export interface EditorConfiguration {
    'editor.tabSize': number;
    'editor.fontSize': number;
    'editor.fontWeight'?: 'normal' | 'bold' | 'bolder' | 'lighter' | 'initial' | 'inherit' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
    'editor.autoSave': 'on' | 'off';
    'editor.autoSaveDelay': number;
    'editor.lineNumbers'?: 'on' | 'off';
    'editor.renderWhitespace'?: 'none' | 'boundary' | 'all';
    'editor.rulers'?: number[];
    'editor.wordSeparators'?: string;
    'editor.glyphMargin'?: boolean;
    'editor.roundedSelection'?: boolean;
    'editor.minimap.enabled'?: boolean;
    'editor.minimap.showSlider'?: 'always' | 'mouseover';
    'editor.minimap.renderCharacters'?: boolean;
    'editor.minimap.maxColumn'?: number;
    'editor.minimap.side'?: 'right' | 'left';
    'editor.overviewRulerLanes'?: number;
    'editor.overviewRulerBorder'?: boolean;
    'editor.cursorBlinking'?: 'blink' | 'smooth' | 'phase' | 'expand' | 'solid';
    'editor.mouseWheelZoom'?: boolean;
    'editor.cursorStyle'?: 'line' | 'block';
    'editor.fontLigatures'?: boolean;
    'editor.hideCursorInOverviewRuler'?: boolean;
    'editor.scrollBeyondLastLine'?: boolean;
    'editor.scrollBeyondLastColumn'?: number;
    'editor.wordWrap'?: 'off' | 'on' | 'wordWrapColumn' | 'bounded';
    'editor.wordWrapColumn'?: number;
    'editor.wrappingIndent'?: 'none' | 'same' | 'indent' | 'deepIndent';
    'editor.links'?: boolean;
    'editor.mouseWheelScrollSensitivity'?: number;
    'editor.multiCursorModifier'?: 'ctrlCmd' | 'alt';
    'editor.accessibilitySupport'?: 'auto' | 'off' | 'on';
    'editor.quickSuggestions'?: boolean;
    'editor.quickSuggestionsDelay'?: number;
    'editor.suggestSelection'?: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';
    'editor.iconsInSuggestions'?: boolean;
    'editor.parameterHints'?: boolean;
    'editor.autoClosingBrackets'?: boolean;
    'editor.autoIndent'?: boolean;
    'editor.formatOnType'?: boolean;
    'editor.formatOnPaste'?: boolean;
    'editor.dragAndDrop'?: boolean;
    'editor.suggestOnTriggerCharacters'?: boolean;
    'editor.acceptSuggestionOnEnter'?: 'on' | 'smart' | 'off';
    'editor.acceptSuggestionOnCommitCharacter'?: boolean;
    'editor.snippetSuggestions'?: 'top' | 'bottom' | 'inline' | 'none';
    'editor.emptySelectionClipboard'?: boolean;
    'editor.wordBasedSuggestions'?: boolean;
    'editor.selectionHighlight'?: boolean;
    'editor.occurrencesHighlight'?: boolean;
    'editor.codeLens'?: boolean;
    'editor.folding'?: boolean;
    'editor.foldingStrategy'?: 'auto' | 'indentation';
    'editor.showFoldingControls'?: 'always' | 'mouseover';
    'editor.matchBrackets'?: boolean;
    'editor.renderControlCharacters'?: boolean;
    'editor.renderIndentGuides'?: boolean;
    'editor.highlightActiveIndentGuide'?: boolean;
    'editor.renderLineHighlight'?: 'none' | 'gutter' | 'line' | 'all';
    'editor.useTabStops'?: boolean;
    'editor.insertSpaces': boolean;
    'editor.colorDecorators'?: boolean;
    'editor.showUnused'?: boolean;
    'diffEditor.renderSideBySide'?: boolean;
    'diffEditor.ignoreTrimWhitespace'?: boolean;
    'diffEditor.renderIndicators'?: boolean;
    'diffEditor.followsCaret'?: boolean;
    'diffEditor.ignoreCharChanges'?: boolean;
    'diffEditor.alwaysRevealFirst'?: boolean;
}
export declare type EditorPreferenceChange = PreferenceChangeEvent<EditorConfiguration>;
export declare const EditorPreferences: unique symbol;
export declare type EditorPreferences = PreferenceProxy<EditorConfiguration>;
export declare function createEditorPreferences(preferences: PreferenceService): EditorPreferences;
export declare function bindEditorPreferences(bind: interfaces.Bind): void;
//# sourceMappingURL=editor-preferences.d.ts.map