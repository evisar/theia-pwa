"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var services_1 = require("monaco-languageclient/lib/services");
var utils = require("./utils");
var uri_1 = require("@theia/core/lib/common/uri");
var CallHierarchyContext = /** @class */ (function () {
    function CallHierarchyContext(languageClient, textModelService, logger) {
        this.languageClient = languageClient;
        this.textModelService = textModelService;
        this.logger = logger;
        this.symbolCache = new Map();
        this.disposables = [];
    }
    CallHierarchyContext.prototype.getAllSymbols = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedSymbols, result, symbols;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedSymbols = this.symbolCache.get(uri);
                        if (cachedSymbols) {
                            return [2 /*return*/, cachedSymbols];
                        }
                        return [4 /*yield*/, this.languageClient.sendRequest(services_1.DocumentSymbolRequest.type, {
                                textDocument: services_1.TextDocumentIdentifier.create(uri)
                            })];
                    case 1:
                        result = _a.sent();
                        symbols = (result || []);
                        this.symbolCache.set(uri, symbols);
                        return [2 /*return*/, symbols];
                }
            });
        });
    };
    CallHierarchyContext.prototype.getEditorModelReference = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.textModelService.createModelReference(new uri_1.default(uri))];
                    case 1:
                        model = _a.sent();
                        this.disposables.push(model);
                        return [2 /*return*/, model];
                }
            });
        });
    };
    CallHierarchyContext.prototype.getDefinitionLocation = function (location) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, _a, line, character, locations, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uri = location.uri;
                        _a = location.range.start, line = _a.line, character = _a.character;
                        locations = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.languageClient.sendRequest(services_1.DefinitionRequest.type, {
                                position: services_1.Position.create(line, character),
                                textDocument: { uri: uri }
                            })];
                    case 2:
                        locations = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        this.logger.error("Error from definitions request: " + uri + "#" + line + "/" + character, error_1);
                        return [3 /*break*/, 4];
                    case 4:
                        if (!locations) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, Array.isArray(locations) ? locations[0] : locations];
                }
            });
        });
    };
    CallHierarchyContext.prototype.getCallerReferences = function (definition) {
        return __awaiter(this, void 0, void 0, function () {
            var references, uniqueReferences, filteredReferences, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.languageClient.sendRequest(services_1.ReferencesRequest.type, {
                                context: {
                                    includeDeclaration: false // TODO find out, why definitions are still contained
                                },
                                position: {
                                    line: definition.range.start.line,
                                    character: definition.range.start.character
                                },
                                textDocument: {
                                    uri: definition.uri
                                }
                            })];
                    case 1:
                        references = _a.sent();
                        uniqueReferences = utils.filterUnique(references);
                        filteredReferences = utils.filterSame(uniqueReferences, definition);
                        return [2 /*return*/, filteredReferences];
                    case 2:
                        error_2 = _a.sent();
                        this.logger.error('Error from references request', error_2);
                        return [2 /*return*/, []];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CallHierarchyContext.prototype.dispose = function () {
        this.disposables.forEach(function (element) {
            element.dispose();
        });
        this.symbolCache.clear();
    };
    return CallHierarchyContext;
}());
exports.CallHierarchyContext = CallHierarchyContext;
//# sourceMappingURL=callhierarchy-context.js.map