"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var monaco_command_1 = require("./monaco-command");
var monaco_command_registry_1 = require("./monaco-command-registry");
var monaco_keycode_map_1 = require("./monaco-keycode-map");
var KeybindingsRegistry = monaco.keybindings.KeybindingsRegistry;
var core_1 = require("@theia/core");
function monaco2BrowserKeyCode(keyCode) {
    for (var i = 0; i < monaco_keycode_map_1.KEY_CODE_MAP.length; i++) {
        if (monaco_keycode_map_1.KEY_CODE_MAP[i] === keyCode) {
            return i;
        }
    }
    return -1;
}
var MonacoKeybindingContribution = /** @class */ (function () {
    function MonacoKeybindingContribution() {
    }
    MonacoKeybindingContribution.prototype.registerKeybindings = function (registry) {
        var e_1, _a;
        try {
            for (var _b = __values(KeybindingsRegistry.getDefaultKeybindings()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                var command = this.commands.validate(item.command);
                if (command) {
                    var raw = item.keybinding;
                    if (raw.type === 1 /* Simple */) {
                        var keybinding = raw;
                        // TODO: remove this temporary workaround after updating to monaco including the fix for https://github.com/Microsoft/vscode/issues/49225
                        if (command === 'monaco.editor.action.refactor' && !core_1.isOSX) {
                            keybinding = __assign({}, keybinding, { ctrlKey: true, metaKey: false });
                        }
                        // TODO: remove this temporary workaround with a holistic solution.
                        if (command === 'monaco.editor.action.commentLine' && core_1.isOSX) {
                            keybinding = __assign({}, keybinding, { ctrlKey: true, metaKey: false });
                        }
                        var isInDiffEditor = item.when && /(^|[^!])\bisInDiffEditor\b/gm.test(item.when.serialize());
                        registry.registerKeybinding({
                            command: command,
                            keybinding: this.keyCode(keybinding).toString(),
                            context: isInDiffEditor ? browser_2.EditorKeybindingContexts.diffEditorTextFocus : browser_2.EditorKeybindingContexts.strictEditorTextFocus
                        });
                    }
                    else {
                        // FIXME support chord keybindings properly, KeyCode does not allow it right now
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // `Select All` is not an editor action just like everything else.
        var selectAllCommand = this.commands.validate(monaco_command_1.MonacoCommands.SELECTION_SELECT_ALL);
        if (selectAllCommand) {
            registry.registerKeybinding({
                command: selectAllCommand,
                keybinding: 'ctrlcmd+a',
                context: browser_2.EditorKeybindingContexts.editorTextFocus
            });
        }
    };
    MonacoKeybindingContribution.prototype.keyCode = function (keybinding) {
        var keyCode = keybinding.keyCode;
        var sequence = {
            first: browser_1.Key.getKey(monaco2BrowserKeyCode(keyCode & 255)),
            modifiers: []
        };
        if (keybinding.ctrlKey) {
            if (core_1.isOSX) {
                sequence.modifiers.push(browser_1.KeyModifier.MacCtrl);
            }
            else {
                sequence.modifiers.push(browser_1.KeyModifier.CtrlCmd);
            }
        }
        if (keybinding.shiftKey) {
            sequence.modifiers.push(browser_1.KeyModifier.Shift);
        }
        if (keybinding.altKey) {
            sequence.modifiers.push(browser_1.KeyModifier.Alt);
        }
        if (keybinding.metaKey && sequence.modifiers.indexOf(browser_1.KeyModifier.CtrlCmd) === -1) {
            sequence.modifiers.push(browser_1.KeyModifier.CtrlCmd);
        }
        return browser_1.KeyCode.createKeyCode(sequence);
    };
    __decorate([
        inversify_1.inject(monaco_command_registry_1.MonacoCommandRegistry),
        __metadata("design:type", monaco_command_registry_1.MonacoCommandRegistry)
    ], MonacoKeybindingContribution.prototype, "commands", void 0);
    MonacoKeybindingContribution = __decorate([
        inversify_1.injectable()
    ], MonacoKeybindingContribution);
    return MonacoKeybindingContribution;
}());
exports.MonacoKeybindingContribution = MonacoKeybindingContribution;
//# sourceMappingURL=monaco-keybinding.js.map