/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="@typefox/monaco-editor-core/monaco" />
import { ProtocolToMonacoConverter, MonacoToProtocolConverter } from 'monaco-languageclient';
import { FileSystem } from '@theia/filesystem/lib/common';
import { FileSystemWatcher } from '@theia/filesystem/lib/browser';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { EditorManager, EditorOpenerOptions } from '@theia/editor/lib/browser';
import * as lang from '@theia/languages/lib/browser';
import { TextDocumentWillSaveEvent } from '@theia/languages/lib/browser';
import { MonacoTextModelService } from './monaco-text-model-service';
import { WillSaveMonacoModelEvent, MonacoEditorModel, MonacoModelContentChangedEvent } from './monaco-editor-model';
import { MonacoConfigurations } from './monaco-configurations';
import { ProblemManager } from '@theia/markers/lib/browser';
export interface MonacoDidChangeTextDocumentParams extends lang.DidChangeTextDocumentParams {
    readonly textDocument: MonacoEditorModel;
}
export interface MonacoTextDocumentWillSaveEvent extends TextDocumentWillSaveEvent {
    readonly textDocument: MonacoEditorModel;
}
export declare class MonacoWorkspace implements lang.Workspace {
    readonly capabilities: {
        applyEdit: boolean;
        workspaceEdit: {
            documentChanges: boolean;
        };
    };
    protected resolveReady: () => void;
    readonly ready: Promise<void>;
    protected readonly onDidOpenTextDocumentEmitter: lang.Emitter<MonacoEditorModel>;
    readonly onDidOpenTextDocument: lang.Event<MonacoEditorModel>;
    protected readonly onDidCloseTextDocumentEmitter: lang.Emitter<MonacoEditorModel>;
    readonly onDidCloseTextDocument: lang.Event<MonacoEditorModel>;
    protected readonly onDidChangeTextDocumentEmitter: lang.Emitter<MonacoDidChangeTextDocumentParams>;
    readonly onDidChangeTextDocument: lang.Event<MonacoDidChangeTextDocumentParams>;
    protected readonly onWillSaveTextDocumentEmitter: lang.Emitter<MonacoTextDocumentWillSaveEvent>;
    readonly onWillSaveTextDocument: lang.Event<MonacoTextDocumentWillSaveEvent>;
    protected readonly onDidSaveTextDocumentEmitter: lang.Emitter<MonacoEditorModel>;
    readonly onDidSaveTextDocument: lang.Event<MonacoEditorModel>;
    protected readonly fileSystem: FileSystem;
    protected readonly workspaceService: WorkspaceService;
    protected readonly fileSystemWatcher: FileSystemWatcher;
    protected readonly textModelService: MonacoTextModelService;
    protected readonly m2p: MonacoToProtocolConverter;
    protected readonly p2m: ProtocolToMonacoConverter;
    protected readonly editorManager: EditorManager;
    readonly configurations: MonacoConfigurations;
    protected readonly problems: ProblemManager;
    protected init(): void;
    protected _rootUri: string | null;
    readonly rootUri: string | null;
    readonly rootPath: string | null;
    readonly textDocuments: MonacoEditorModel[];
    getTextDocument(uri: string): MonacoEditorModel | undefined;
    protected fireDidOpen(model: MonacoEditorModel): void;
    protected doFireDidOpen(model: MonacoEditorModel): void;
    protected fireDidClose(model: MonacoEditorModel): void;
    protected fireDidChangeContent(event: MonacoModelContentChangedEvent): void;
    protected fireWillSave(event: WillSaveMonacoModelEvent): void;
    protected fireDidSave(model: MonacoEditorModel): void;
    protected openEditorIfDirty(model: MonacoEditorModel): void;
    createFileSystemWatcher(globPattern: string, ignoreCreateEvents?: boolean, ignoreChangeEvents?: boolean, ignoreDeleteEvents?: boolean): lang.FileSystemWatcher;
    applyEdit(changes: lang.WorkspaceEdit, options?: EditorOpenerOptions): Promise<boolean>;
    applyBulkEdit(workspaceEdit: monaco.languages.WorkspaceEdit, options?: EditorOpenerOptions): monaco.Promise<monaco.editor.IBulkEditResult>;
    protected getAriaSummary(totalEdits: number, totalFiles: number): string;
    protected groupEdits(workspaceEdit: monaco.languages.WorkspaceEdit): Map<string, monaco.languages.TextEdit[]>;
}
//# sourceMappingURL=monaco-workspace.d.ts.map