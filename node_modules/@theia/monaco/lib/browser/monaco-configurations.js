"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var inversify_1 = require("inversify");
var coreutils_1 = require("@phosphor/coreutils");
var common_1 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var MonacoConfigurations = /** @class */ (function () {
    function MonacoConfigurations() {
        this.onDidChangeConfigurationEmitter = new common_1.Emitter();
        this.onDidChangeConfiguration = this.onDidChangeConfigurationEmitter.event;
        this.tree = {};
    }
    MonacoConfigurations_1 = MonacoConfigurations;
    MonacoConfigurations.prototype.init = function () {
        var _this = this;
        this.reconcileData();
        this.preferences.onPreferencesChanged(function (changes) { return _this.reconcileData(changes); });
    };
    MonacoConfigurations.prototype.reconcileData = function (changes) {
        var _this = this;
        this.tree = MonacoConfigurations_1.parse(this.preferences.getPreferences());
        this.onDidChangeConfigurationEmitter.fire({
            affectsConfiguration: function (section) { return _this.affectsConfiguration(section, changes); }
        });
    };
    MonacoConfigurations.prototype.affectsConfiguration = function (section, changes) {
        if (!changes) {
            return true;
        }
        for (var preferenceName in changes) {
            if (section.startsWith(preferenceName) || preferenceName.startsWith(section)) {
                return true;
            }
        }
        return false;
    };
    MonacoConfigurations.prototype.getConfiguration = function (section, resource) {
        var tree = section ? MonacoConfigurations_1.lookUp(this.tree, section) : this.tree;
        // TODO take resource into the account when the multi-root is supported by preferences
        return new MonacoWorkspaceConfiguration(tree);
    };
    var MonacoConfigurations_1;
    __decorate([
        inversify_1.inject(browser_1.PreferenceServiceImpl),
        __metadata("design:type", browser_1.PreferenceServiceImpl)
    ], MonacoConfigurations.prototype, "preferences", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MonacoConfigurations.prototype, "init", null);
    MonacoConfigurations = MonacoConfigurations_1 = __decorate([
        inversify_1.injectable()
    ], MonacoConfigurations);
    return MonacoConfigurations;
}());
exports.MonacoConfigurations = MonacoConfigurations;
(function (MonacoConfigurations) {
    function parse(raw) {
        var e_1, _a;
        var tree = {};
        try {
            for (var _b = __values(Object.keys(raw)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var section = _c.value;
                var value = raw[section];
                if (value !== undefined) {
                    assign(tree, section, value);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tree;
    }
    MonacoConfigurations.parse = parse;
    function assign(data, section, value) {
        var node = data;
        var parts = section.split('.');
        while (coreutils_1.JSONExt.isObject(node) && parts.length > 1) {
            var part = parts.shift();
            node = node[part] || (node[part] = {});
        }
        if (coreutils_1.JSONExt.isObject(node) && parts.length === 1) {
            node[parts[0]] = value;
        }
    }
    MonacoConfigurations.assign = assign;
    function lookUp(tree, section) {
        if (!section) {
            return undefined;
        }
        var node = tree;
        var parts = section.split('.');
        while (node && coreutils_1.JSONExt.isObject(node) && parts.length > 0) {
            node = node[parts.shift()];
        }
        return !parts.length ? node : undefined;
    }
    MonacoConfigurations.lookUp = lookUp;
})(MonacoConfigurations = exports.MonacoConfigurations || (exports.MonacoConfigurations = {}));
exports.MonacoConfigurations = MonacoConfigurations;
var MonacoWorkspaceConfiguration = /** @class */ (function () {
    function MonacoWorkspaceConfiguration(tree) {
        this.tree = tree;
        if (tree && coreutils_1.JSONExt.isObject(tree)) {
            Object.assign(this, tree);
        }
    }
    MonacoWorkspaceConfiguration.prototype.has = function (section) {
        return typeof MonacoConfigurations.lookUp(this.tree, section) !== 'undefined';
    };
    MonacoWorkspaceConfiguration.prototype.get = function (section, defaultValue) {
        var value = MonacoConfigurations.lookUp(this.tree, section);
        if (typeof value === 'undefined') {
            return defaultValue;
        }
        var result = coreutils_1.JSONExt.isObject(value) ? coreutils_1.JSONExt.deepCopy(value) : value;
        return result;
    };
    MonacoWorkspaceConfiguration.prototype.toJSON = function () {
        return this.tree && coreutils_1.JSONExt.isObject(this.tree) ? coreutils_1.JSONExt.deepCopy(this.tree) : this.tree;
    };
    return MonacoWorkspaceConfiguration;
}());
exports.MonacoWorkspaceConfiguration = MonacoWorkspaceConfiguration;
//# sourceMappingURL=monaco-configurations.js.map