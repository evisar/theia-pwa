/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { JSONObject, JSONValue } from '@phosphor/coreutils';
import { Configurations, ConfigurationChangeEvent, WorkspaceConfiguration } from 'monaco-languageclient';
import { Event, Emitter } from '@theia/core/lib/common';
import { PreferenceServiceImpl, PreferenceChanges } from '@theia/core/lib/browser';
export declare class MonacoConfigurations implements Configurations {
    protected readonly onDidChangeConfigurationEmitter: Emitter<ConfigurationChangeEvent>;
    readonly onDidChangeConfiguration: Event<ConfigurationChangeEvent>;
    protected readonly preferences: PreferenceServiceImpl;
    protected tree: JSONObject;
    protected init(): void;
    protected reconcileData(changes?: PreferenceChanges): void;
    protected affectsConfiguration(section: string, changes?: PreferenceChanges): boolean;
    getConfiguration(section?: string, resource?: string): WorkspaceConfiguration;
}
export declare namespace MonacoConfigurations {
    function parse(raw: {
        [section: string]: Object | undefined;
    }): JSONObject;
    function assign(data: JSONObject, section: string, value: JSONValue): void;
    function lookUp(tree: JSONValue | undefined, section: string | undefined): JSONValue | undefined;
}
export declare class MonacoWorkspaceConfiguration implements WorkspaceConfiguration {
    protected readonly tree: JSONValue | undefined;
    constructor(tree: JSONValue | undefined);
    readonly [key: string]: any;
    has(section: string): boolean;
    get<T>(section: string, defaultValue?: T): T | undefined;
    toJSON(): JSONValue | undefined;
}
//# sourceMappingURL=monaco-configurations.d.ts.map