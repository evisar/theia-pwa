/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import React = require('react');
import { CommandRegistry, Command } from '@theia/core/lib/common';
import { ReactWidget } from '@theia/core/lib/browser/widgets/react-widget';
import { KeybindingRegistry, Message } from '@theia/core/lib/browser';
import { KeymapsParser } from './keymaps-parser';
import { KeymapsService, KeybindingJson } from './keymaps-service';
export interface KeybindingItem {
    id: string;
    command: string;
    keybinding?: string;
    context?: string;
    scope?: string;
}
export interface CellData {
    value: string;
    highlighted: boolean;
}
export declare class KeybindingWidget extends ReactWidget {
    protected readonly commandRegistry: CommandRegistry;
    protected readonly keybindingRegistry: KeybindingRegistry;
    protected readonly keymapsParser: KeymapsParser;
    protected readonly keymapsService: KeymapsService;
    protected items: KeybindingItem[];
    static readonly ID = "keybindings.view.widget";
    static readonly LABEL = "Keyboard Shortcuts";
    protected query: string;
    protected readonly regexp: RegExp;
    protected readonly keybindingSeperator: RegExp;
    protected readonly fuzzyOptions: {
        pre: string;
        post: string;
    };
    protected readonly searchKeybindings: () => void;
    protected init(): void;
    protected onActivateRequest(msg: Message): void;
    protected doSearchKeybindings(): void;
    protected findSearchField(): HTMLInputElement | null;
    protected focusInputField(): void;
    protected render(): React.ReactNode;
    protected renderSearch(): React.ReactNode;
    protected renderMessage(): React.ReactNode;
    protected renderTable(): React.ReactNode;
    protected renderRows(): React.ReactNode;
    protected renderActions(item: KeybindingItem): React.ReactNode;
    protected renderEdit(item: KeybindingItem): React.ReactNode;
    protected renderReset(item: KeybindingItem): React.ReactNode;
    protected renderKeybinding(keybinding: string): React.ReactNode;
    protected getItems(): KeybindingItem[];
    protected compareCommands(a: Command, b: Command): number;
    protected keybindingExistsInJson(keybindings: KeybindingJson[], command: string): boolean;
    protected editKeybinding(item: KeybindingItem): void;
    protected confirmResetKeybinding(command: string, commandId: string): Promise<boolean>;
    protected resetKeybinding(item: KeybindingItem): Promise<void>;
    protected validateKeybinding(command: string, oldKeybinding: string, keybinding: string): string;
    protected buildCellData(raw: string): CellData[];
    protected renderMatchedData(item: string): React.ReactNode;
    protected getRawValue(property: string): string;
    protected openKeybindings: () => void;
}
//# sourceMappingURL=keybindings-widget.d.ts.map