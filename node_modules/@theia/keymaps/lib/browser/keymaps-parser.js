"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Ajv = require("ajv");
var parser = require("jsonc-parser");
var inversify_1 = require("inversify");
exports.keymapsSchema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            keybinding: {
                type: 'string'
            },
            command: {
                type: 'string'
            },
            context: {
                type: 'string'
            }
        },
        required: ['command', 'keybinding'],
        optional: ['context'],
        additionalProperties: false
    }
};
var KeymapsParser = /** @class */ (function () {
    function KeymapsParser() {
        // https://github.com/epoberezkin/ajv#options
        this.validate = new Ajv({
            jsonPointers: true
        }).compile(exports.keymapsSchema);
    }
    KeymapsParser.prototype.parse = function (content, errors) {
        var e_1, _a, e_2, _b;
        var strippedContent = parser.stripComments(content);
        var parsingErrors = errors ? [] : undefined;
        var bindings = parser.parse(strippedContent, parsingErrors);
        if (parsingErrors && errors) {
            try {
                for (var parsingErrors_1 = __values(parsingErrors), parsingErrors_1_1 = parsingErrors_1.next(); !parsingErrors_1_1.done; parsingErrors_1_1 = parsingErrors_1.next()) {
                    var error = parsingErrors_1_1.value;
                    errors.push(this.printParseErrorCode(error.error) + " at " + error.offset + " offset of " + error.length + " length");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (parsingErrors_1_1 && !parsingErrors_1_1.done && (_a = parsingErrors_1.return)) _a.call(parsingErrors_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (this.validate(bindings)) {
            return bindings;
        }
        if (errors && this.validate.errors) {
            try {
                for (var _c = __values(this.validate.errors), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var error = _d.value;
                    errors.push(error.message + " at " + error.dataPath);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return [];
    };
    // https://github.com/Microsoft/node-jsonc-parser/issues/13
    KeymapsParser.prototype.printParseErrorCode = function (code) {
        switch (code) {
            case 1 /* InvalidSymbol */: return 'InvalidSymbol';
            case 2 /* InvalidNumberFormat */: return 'InvalidNumberFormat';
            case 3 /* PropertyNameExpected */: return 'PropertyNameExpected';
            case 4 /* ValueExpected */: return 'ValueExpected';
            case 5 /* ColonExpected */: return 'ColonExpected';
            case 6 /* CommaExpected */: return 'CommaExpected';
            case 7 /* CloseBraceExpected */: return 'CloseBraceExpected';
            case 8 /* CloseBracketExpected */: return 'CloseBracketExpected';
            case 9 /* EndOfFileExpected */: return 'EndOfFileExpected';
            case 10 /* InvalidCommentToken */: return 'InvalidCommentToken';
            case 11 /* UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';
            case 12 /* UnexpectedEndOfString */: return 'UnexpectedEndOfString';
            case 13 /* UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';
            case 14 /* InvalidUnicode */: return 'InvalidUnicode';
            case 15 /* InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';
            case 16 /* InvalidCharacter */: return 'InvalidCharacter';
        }
        return '<unknown ParseErrorCode>';
    };
    KeymapsParser = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], KeymapsParser);
    return KeymapsParser;
}());
exports.KeymapsParser = KeymapsParser;
//# sourceMappingURL=keymaps-parser.js.map