"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var debounce = require("lodash.debounce");
var fuzzy = require("fuzzy");
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var react_widget_1 = require("@theia/core/lib/browser/widgets/react-widget");
var browser_1 = require("@theia/core/lib/browser");
var keymaps_parser_1 = require("./keymaps-parser");
var keymaps_service_1 = require("./keymaps-service");
var alert_message_1 = require("@theia/core/lib/browser/widgets/alert-message");
var KeybindingWidget = /** @class */ (function (_super) {
    __extends(KeybindingWidget, _super);
    function KeybindingWidget() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.query = '';
        _this.regexp = /<match>(.*?)<\/match>/g;
        _this.keybindingSeperator = /<match>\+<\/match>/g;
        _this.fuzzyOptions = {
            pre: '<match>',
            post: '</match>',
        };
        _this.searchKeybindings = debounce(function () { return _this.doSearchKeybindings(); }, 50);
        _this.openKeybindings = function () { return _this.keymapsService.open(_this); };
        return _this;
    }
    KeybindingWidget_1 = KeybindingWidget;
    KeybindingWidget.prototype.init = function () {
        var _this = this;
        this.id = KeybindingWidget_1.ID;
        this.title.label = KeybindingWidget_1.LABEL;
        this.title.caption = KeybindingWidget_1.LABEL;
        this.title.iconClass = 'fa fa-bars';
        this.title.closable = true;
        this.update();
        this.items = this.getItems();
        if (this.keymapsService.onDidChangeKeymaps) {
            this.toDispose.push(this.keymapsService.onDidChangeKeymaps(function () {
                _this.doSearchKeybindings();
                _this.update();
            }));
        }
    };
    KeybindingWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        this.focusInputField();
    };
    KeybindingWidget.prototype.doSearchKeybindings = function () {
        var _this = this;
        this.items = [];
        var searchField = this.findSearchField();
        this.query = searchField ? searchField.value.trim().toLocaleLowerCase() : '';
        var items = this.getItems();
        items.forEach(function (item) {
            var e_1, _a;
            var keys = ['id', 'command', 'keybinding', 'context', 'scope'];
            var matched = false;
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    var string = item[key];
                    if (string) {
                        var fuzzyMatch = fuzzy.match(_this.query, string, _this.fuzzyOptions);
                        if (fuzzyMatch) {
                            item[key] = fuzzyMatch.rendered;
                            matched = true;
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (matched) {
                _this.items.push(item);
            }
        });
        this.update();
    };
    KeybindingWidget.prototype.findSearchField = function () {
        return document.getElementById('search-kb');
    };
    KeybindingWidget.prototype.focusInputField = function () {
        var input = document.getElementById('search-kb');
        if (input) {
            input.focus();
            input.select();
        }
    };
    KeybindingWidget.prototype.render = function () {
        return React.createElement("div", null,
            this.renderSearch(),
            (this.items.length > 0) ? this.renderTable() : this.renderMessage());
    };
    KeybindingWidget.prototype.renderSearch = function () {
        return React.createElement("div", null,
            React.createElement("div", { className: 'search-kb-container' },
                React.createElement("input", { id: 'search-kb', className: (this.items.length > 0) ? '' : 'no-kb', type: 'text', placeholder: 'Search keybindings', onKeyUp: this.searchKeybindings })),
            React.createElement("div", { className: 'kb-json' },
                "For more detailed keybinding customizations open and edit\u00A0",
                React.createElement("a", { href: '#', onClick: this.openKeybindings }, "keymaps.json")));
    };
    KeybindingWidget.prototype.renderMessage = function () {
        return React.createElement(alert_message_1.AlertMessage, { type: 'WARNING', header: 'No results found!' });
    };
    KeybindingWidget.prototype.renderTable = function () {
        return React.createElement("div", null,
            React.createElement("div", { className: 'kb' },
                React.createElement("table", null,
                    React.createElement("thead", null,
                        React.createElement("tr", null,
                            React.createElement("th", { className: 'th-action' }),
                            React.createElement("th", { className: 'th-label' }, "Label"),
                            React.createElement("th", { className: 'th-keybinding' }, "Keybinding"),
                            React.createElement("th", { className: 'th-scope' }, "Scope"),
                            React.createElement("th", { className: 'th-context' }, "Context"),
                            React.createElement("th", { className: 'th-command' }, "Command"))),
                    React.createElement("tbody", null, this.renderRows()))));
    };
    KeybindingWidget.prototype.renderRows = function () {
        var _this = this;
        return React.createElement(React.Fragment, null, this.items.map(function (item, index) {
            return React.createElement("tr", { className: 'kb-item-row', key: index, onDoubleClick: function (a) { return _this.editKeybinding(item); } },
                React.createElement("td", { className: 'kb-actions' }, _this.renderActions(item)),
                React.createElement("td", { title: _this.getRawValue(item.command) }, _this.renderMatchedData(item.command)),
                React.createElement("td", { title: (item.keybinding) ? _this.getRawValue(item.keybinding) : '', className: 'monaco-keybinding' }, item.keybinding ? _this.renderKeybinding(item.keybinding) : ''),
                React.createElement("td", { title: (item.scope) ? _this.getRawValue(item.scope) : '' },
                    React.createElement("code", { className: 'td-scope' }, item.scope ? _this.renderMatchedData(item.scope) : '')),
                React.createElement("td", { title: (item.context) ? _this.getRawValue(item.context) : '' },
                    React.createElement("code", null, (item.context) ? _this.renderMatchedData(item.context) : '')),
                React.createElement("td", { title: _this.getRawValue(item.id) },
                    React.createElement("code", null, _this.renderMatchedData(item.id))));
        }));
    };
    KeybindingWidget.prototype.renderActions = function (item) {
        return React.createElement("span", null,
            this.renderEdit(item),
            this.renderReset(item));
    };
    KeybindingWidget.prototype.renderEdit = function (item) {
        var _this = this;
        return React.createElement("a", { title: 'Edit Keybinding', href: '#', onClick: function (a) { return _this.editKeybinding(item); } },
            React.createElement("i", { className: 'fa fa-pencil kb-action-item' }));
    };
    KeybindingWidget.prototype.renderReset = function (item) {
        var _this = this;
        return (item.scope && item.scope === browser_1.KeybindingScope[1].toLocaleLowerCase())
            ? React.createElement("a", { title: 'Reset Keybinding', href: '#', onClick: function (a) { return _this.resetKeybinding(item); } },
                React.createElement("i", { className: 'fa fa-undo kb-action-item' })) : '';
    };
    KeybindingWidget.prototype.renderKeybinding = function (keybinding) {
        var _this = this;
        var regex = new RegExp(this.keybindingSeperator);
        keybinding = keybinding.replace(regex, '+');
        var keys = keybinding.split('+');
        return React.createElement(React.Fragment, null, keys.map(function (key, index) {
            if (index === 0) {
                return React.createElement("span", { key: index, className: 'monaco-keybinding-key' }, _this.renderMatchedData(key));
            }
            else {
                return React.createElement(React.Fragment, { key: index },
                    React.createElement("span", { className: 'monco-keybinding-seperator' }, "+"),
                    React.createElement("span", { className: 'monaco-keybinding-key' }, _this.renderKeybinding(key)));
            }
        }));
    };
    KeybindingWidget.prototype.getItems = function () {
        var _this = this;
        var commands = this.commandRegistry.commands.sort(function (a, b) { return _this.compareCommands(a, b); });
        var items = [];
        for (var i = 0; i < commands.length; i++) {
            if (!commands[i].label) {
                continue;
            }
            var keybindings = this.keybindingRegistry.getKeybindingsForCommand(commands[i].id);
            var item = {
                id: commands[i].id,
                command: commands[i].label || '',
                keybinding: (keybindings && keybindings[0]) ? keybindings[0].keybinding : '',
                context: (keybindings && keybindings[0]) ? keybindings[0].context : '',
                scope: (keybindings && keybindings[0] && typeof keybindings[0].scope !== 'undefined')
                    ? browser_1.KeybindingScope[keybindings[0].scope].toLocaleLowerCase() : '',
            };
            items.push(item);
        }
        return items;
    };
    KeybindingWidget.prototype.compareCommands = function (a, b) {
        if (a.label && b.label) {
            return (a.label).localeCompare(b.label);
        }
        else {
            return 0;
        }
    };
    KeybindingWidget.prototype.keybindingExistsInJson = function (keybindings, command) {
        for (var i = 0; i < keybindings.length; i++) {
            if (keybindings[i].command === command) {
                return true;
            }
        }
        return false;
    };
    KeybindingWidget.prototype.editKeybinding = function (item) {
        var _this = this;
        var command = this.getRawValue(item.command);
        var id = this.getRawValue(item.id);
        var keybinding = (item.keybinding) ? this.getRawValue(item.keybinding) : '';
        var context = (item.context) ? this.getRawValue(item.context) : '';
        var dialog = new browser_1.SingleTextInputDialog({
            title: "Edit Keybinding For " + command,
            initialValue: keybinding,
            validate: function (newKeybinding) { return _this.validateKeybinding(command, keybinding, newKeybinding); },
        });
        dialog.open().then(function (newKeybinding) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!newKeybinding) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.keymapsService.setKeybinding({ 'command': id, 'keybinding': newKeybinding, 'context': context })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
    };
    KeybindingWidget.prototype.confirmResetKeybinding = function (command, commandId) {
        return __awaiter(this, void 0, void 0, function () {
            var dialog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dialog = new browser_1.ConfirmDialog({
                            title: "Reset keybinding for '" + command + "'",
                            msg: 'Do you really want to reset this keybinding to its default value?'
                        });
                        return [4 /*yield*/, dialog.open()];
                    case 1: return [2 /*return*/, !!(_a.sent())];
                }
            });
        });
    };
    KeybindingWidget.prototype.resetKeybinding = function (item) {
        return __awaiter(this, void 0, void 0, function () {
            var rawCommandId, rawCommand, confirmed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rawCommandId = this.getRawValue(item.id);
                        rawCommand = this.getRawValue(item.command);
                        return [4 /*yield*/, this.confirmResetKeybinding(rawCommand, rawCommandId)];
                    case 1:
                        confirmed = _a.sent();
                        if (confirmed) {
                            this.keymapsService.removeKeybinding(rawCommandId);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    KeybindingWidget.prototype.validateKeybinding = function (command, oldKeybinding, keybinding) {
        if (!keybinding) {
            return 'keybinding value is required';
        }
        try {
            var binding = { 'command': command, 'keybinding': keybinding };
            browser_1.KeySequence.parse(keybinding);
            if (oldKeybinding === keybinding) {
                return ' '; // if old and new keybindings match, quietly reject update
            }
            if (this.keybindingRegistry.containsKeybindingInScope(binding)) {
                return 'keybinding currently collides';
            }
            return '';
        }
        catch (error) {
            return error;
        }
    };
    KeybindingWidget.prototype.buildCellData = function (raw) {
        var data = [];
        if (this.query === '') {
            return data;
        }
        var following = raw;
        var leading;
        var result;
        var regexp = new RegExp(this.regexp);
        while (result = regexp.exec(raw)) {
            var splitLeftIndex = following.indexOf(result[0]);
            var splitRightIndex = splitLeftIndex + result[0].length;
            leading = following.slice(0, splitLeftIndex);
            following = following.slice(splitRightIndex);
            if (leading) {
                data.push({ value: leading, highlighted: false });
            }
            data.push({ value: result[1], highlighted: true });
        }
        if (following) {
            data.push({ value: following, highlighted: false });
        }
        return data;
    };
    KeybindingWidget.prototype.renderMatchedData = function (item) {
        if (this.query !== '') {
            var cellData = this.buildCellData(item);
            return React.createElement(React.Fragment, null, cellData.map(function (data, index) { return (data.highlighted) ? React.createElement("span", { key: index, className: 'fuzzy-match' }, data.value) : React.createElement("span", { key: index }, data.value); }));
        }
        else {
            return item;
        }
    };
    KeybindingWidget.prototype.getRawValue = function (property) {
        return property.replace(new RegExp(this.regexp), '$1');
    };
    var KeybindingWidget_1;
    KeybindingWidget.ID = 'keybindings.view.widget';
    KeybindingWidget.LABEL = 'Keyboard Shortcuts';
    __decorate([
        inversify_1.inject(common_1.CommandRegistry),
        __metadata("design:type", common_1.CommandRegistry)
    ], KeybindingWidget.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_1.KeybindingRegistry),
        __metadata("design:type", browser_1.KeybindingRegistry)
    ], KeybindingWidget.prototype, "keybindingRegistry", void 0);
    __decorate([
        inversify_1.inject(keymaps_parser_1.KeymapsParser),
        __metadata("design:type", keymaps_parser_1.KeymapsParser)
    ], KeybindingWidget.prototype, "keymapsParser", void 0);
    __decorate([
        inversify_1.inject(keymaps_service_1.KeymapsService),
        __metadata("design:type", keymaps_service_1.KeymapsService)
    ], KeybindingWidget.prototype, "keymapsService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], KeybindingWidget.prototype, "init", null);
    KeybindingWidget = KeybindingWidget_1 = __decorate([
        inversify_1.injectable()
    ], KeybindingWidget);
    return KeybindingWidget;
}(react_widget_1.ReactWidget));
exports.KeybindingWidget = KeybindingWidget;
//# sourceMappingURL=keybindings-widget.js.map