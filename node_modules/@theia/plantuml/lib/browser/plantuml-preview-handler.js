"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var plantuml_preferences_1 = require("./plantuml-preferences");
var plantumlEncoder = require('plantuml-encoder');
var theming_1 = require("@theia/core/lib/browser/theming");
var PlantUmlPreviewHandler = /** @class */ (function () {
    function PlantUmlPreviewHandler(preferences) {
        var _this = this;
        this.preferences = preferences;
        this.contentClass = 'plantuml-preview';
        this.theme = theming_1.ThemeService.get().getCurrentTheme().id;
        theming_1.ThemeService.get().onThemeChange(function (event) { return _this.theme = event.newTheme.id; });
    }
    PlantUmlPreviewHandler.prototype.canHandle = function (uri) {
        return uri.path.ext === '.plantuml' ? 500 : 0;
    };
    PlantUmlPreviewHandler.prototype.renderContent = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var contentElement, content, url, response, renderedContent, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contentElement = document.createElement('div');
                        contentElement.classList.add(this.contentClass, this.theme);
                        content = this.useMonochromeTheme(params.content);
                        url = this.createRequestUrl(content);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetch(url)];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, response.text()];
                    case 3:
                        renderedContent = _a.sent();
                        contentElement.innerHTML = renderedContent;
                        this.fixSvg(contentElement);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        console.log(error_1);
                        contentElement.classList.add('error');
                        contentElement.innerText = "Failed to load diagram from " + this.webserviceUrl;
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, contentElement];
                }
            });
        });
    };
    PlantUmlPreviewHandler.prototype.fixSvg = function (element) {
        var candidates = element.getElementsByTagName('svg');
        if (candidates.length > 0) {
            var svgElement_1 = candidates.item(0);
            if (svgElement_1) {
                svgElement_1.removeAttribute('zoomAndPan');
                svgElement_1.setAttribute('style', 'width: 100%; height: 100%;');
                svgElement_1.setAttribute('preserveAspectRatio', 'xMinYMin meet');
                var viewBoxValue_1 = svgElement_1.getAttribute('viewBox') || '';
                var width_1 = svgElement_1.getAttribute('width') || '';
                var height_1 = svgElement_1.getAttribute('height') || '';
                svgElement_1.removeAttribute('height');
                svgElement_1.removeAttribute('width');
                element.addEventListener('dblclick', function (mouseEvent) {
                    if (svgElement_1.getAttribute('viewBox')) {
                        svgElement_1.removeAttribute('viewBox');
                        svgElement_1.setAttribute('style', "width: " + width_1 + "; height: " + height_1 + ";");
                    }
                    else {
                        svgElement_1.setAttribute('viewBox', viewBoxValue_1);
                        svgElement_1.setAttribute('style', 'width: 100%; height: 100%;');
                    }
                });
            }
        }
    };
    Object.defineProperty(PlantUmlPreviewHandler.prototype, "webserviceUrl", {
        get: function () {
            return "" + window.location.protocol + this.preferences["plantuml.webservice" /* WEBSERVICE */];
        },
        enumerable: true,
        configurable: true
    });
    PlantUmlPreviewHandler.prototype.createRequestUrl = function (content) {
        var encoded = plantumlEncoder.encode(content);
        var serviceUri = new uri_1.default(this.webserviceUrl);
        return serviceUri.withPath(serviceUri.path.join(encoded)).toString();
    };
    PlantUmlPreviewHandler.prototype.useMonochromeTheme = function (content) {
        if (!this.preferences["plantuml.monochrome" /* MONOCHROME */]) {
            return content;
        }
        if (content.indexOf('skinparam') > 0) {
            return content;
        }
        var monochrome = this.theme === 'dark' ? 'reverse' : 'true';
        return content.replace('@startuml', "@startuml\nskinparam monochrome " + monochrome + "\nskinparam backgroundColor transparent\n");
    };
    PlantUmlPreviewHandler = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(plantuml_preferences_1.PlantumlPreferences)),
        __metadata("design:paramtypes", [Object])
    ], PlantUmlPreviewHandler);
    return PlantUmlPreviewHandler;
}());
exports.PlantUmlPreviewHandler = PlantUmlPreviewHandler;
//# sourceMappingURL=plantuml-preview-handler.js.map