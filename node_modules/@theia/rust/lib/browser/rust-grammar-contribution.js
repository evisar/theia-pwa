"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2018 David Craven and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var inversify_1 = require("inversify");
var textmate_snippet_completion_provider_1 = require("@theia/monaco/lib/browser/textmate/textmate-snippet-completion-provider");
var common_1 = require("../common");
var RustGrammarContribution = /** @class */ (function () {
    function RustGrammarContribution() {
        // https://github.com/rust-lang-nursery/rls-vscode/blob/master/language-configuration.json
        // https://github.com/rust-lang-nursery/rls-vscode/blob/master/src/extension.ts
        this.config = {
            comments: {
                lineComment: '//',
                blockComment: ['/*', '*/']
            },
            brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],
            autoClosingPairs: [
                { open: '{', close: '}' },
                { open: '[', close: ']' },
                { open: '(', close: ')' },
                { open: '\"', close: '\"', notIn: ['string'] },
                { open: '/**', close: ' */', notIn: ['string'] },
                { open: '/*!', close: ' */', notIn: ['string'] }
            ],
            surroundingPairs: [
                { open: '{', close: '}' },
                { open: '[', close: ']' },
                { open: '(', close: ')' },
                { open: '<', close: '>' },
                { open: "'", close: "'" },
                { open: '"', close: '"' }
            ],
            onEnterRules: [
                {
                    // Doc single-line comment
                    // e.g. ///|
                    beforeText: /^\s*\/{3}.*$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.None,
                        appendText: '/// '
                    },
                },
                {
                    // Parent doc single-line comment
                    // e.g. //!|
                    beforeText: /^\s*\/{2}\!.*$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.None,
                        appendText: '//! '
                    },
                },
                {
                    // Begins an auto-closed multi-line comment (standard or parent doc)
                    // e.g. /** | */ or /*! | */
                    beforeText: /^\s*\/\*(\*|\!)(?!\/)([^\*]|\*(?!\/))*$/,
                    afterText: /^\s*\*\/$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.IndentOutdent,
                        appendText: ' * '
                    }
                },
                {
                    // Begins a multi-line comment (standard or parent doc)
                    // e.g. /** ...| or /*! ...|
                    beforeText: /^\s*\/\*(\*|\!)(?!\/)([^\*]|\*(?!\/))*$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.None,
                        appendText: ' * '
                    }
                },
                {
                    // Continues a multi-line comment
                    // e.g.  * ...|
                    beforeText: /^(\ \ )*\ \*(\ ([^\*]|\*(?!\/))*)?$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.None,
                        appendText: '* '
                    }
                },
                {
                    // Dedents after closing a multi-line comment
                    // e.g.  */|
                    beforeText: /^(\ \ )*\ \*\/\s*$/,
                    action: {
                        indentAction: monaco.languages.IndentAction.None,
                        removeText: 1
                    }
                }
            ]
        };
    }
    RustGrammarContribution.prototype.registerTextmateLanguage = function (registry) {
        monaco.languages.register({
            id: common_1.RUST_LANGUAGE_ID,
            extensions: ['.rs'],
            aliases: [common_1.RUST_LANGUAGE_NAME, 'rust'],
            mimetypes: ['text/x-rust-source', 'text/x-rust'],
        });
        monaco.languages.setLanguageConfiguration(common_1.RUST_LANGUAGE_ID, this.config);
        var rustGrammar = require('../../data/rust.tmLanguage.json');
        registry.registerTextmateGrammarScope('source.rust', {
            getGrammarDefinition: function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, {
                                format: 'json',
                                content: rustGrammar
                            }];
                    });
                });
            }
        });
        registry.mapLanguageIdToTextmateGrammar(common_1.RUST_LANGUAGE_ID, 'source.rust');
    };
    RustGrammarContribution.prototype.registerSnippets = function () {
        var snippets = require('../../snippets/rust.json');
        monaco.languages.registerCompletionItemProvider(common_1.RUST_LANGUAGE_ID, new textmate_snippet_completion_provider_1.TextmateSnippetCompletionProvider(snippets, 'rs'));
    };
    RustGrammarContribution = __decorate([
        inversify_1.injectable()
    ], RustGrammarContribution);
    return RustGrammarContribution;
}());
exports.RustGrammarContribution = RustGrammarContribution;
//# sourceMappingURL=rust-grammar-contribution.js.map