"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/editor/lib/browser");
var core_1 = require("@theia/core");
var GoCommands = /** @class */ (function () {
    function GoCommands(registry, editorManager) {
        this.registry = registry;
        this.editorManager = editorManager;
    }
    GoCommands_1 = GoCommands;
    GoCommands.prototype.registerClientCommands = function () {
        var _this = this;
        var disposables = [];
        var _loop_1 = function (id) {
            var disposable = this_1.registry.registerCommand({
                id: id + '.client',
                label: this_1.getTitle(id)
            }, {
                execute: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var currentEditor = _this.editorManager.currentEditor;
                    if (_this.isGoEditor(currentEditor)) {
                        var selection = currentEditor.editor.selection;
                        _this.registry.executeCommand(id, currentEditor.editor.document.uri, selection);
                    }
                },
                isVisible: function () { return _this.isGoEditor(_this.editorManager.currentEditor); },
                isEnabled: function () { return _this.registry.getActiveHandler(id) !== undefined; }
            });
            disposables.push(disposable);
        };
        var this_1 = this;
        for (var id in GoCommands_1.TITLES) {
            _loop_1(id);
        }
        return disposables;
    };
    GoCommands.prototype.isGoEditor = function (widget) {
        if (widget)
            return widget.editor.document.languageId === 'go';
        else
            return false;
    };
    GoCommands.prototype.getTitle = function (commandId) {
        var title = GoCommands_1.TITLES[commandId];
        return title ? 'Go: ' + title : undefined;
    };
    var GoCommands_1;
    GoCommands.TITLES = {
        "go.gopath": "Current GOPATH",
        "go.add.tags": "Add Tags To Struct Fields",
        "go.remove.tags": "Remove Tags From Struct Fields",
        "go.impl.cursor": "Generate Interface Stubs",
        "go.test.cursor": "Test Function At Cursor",
        "go.benchmark.cursor": "Benchmark Function At Cursor",
        "go.test.package": "Test Package",
        "go.test.file": "Test File",
        "go.test.workspace": "Test All Packages In Workspace",
        "go.test.previous": "Test Previous",
        "go.test.coverage": "Toggle Test Coverage In Current Package",
        "go.import.add": "Add Import",
        "go.tools.install": "Install/Update Tools",
        "go.browse.packages": "Browse Packages",
        "go.test.generate.package": "Generate Unit Tests For Package",
        "go.test.generate.file": "Generate Unit Tests For File",
        "go.test.generate.function": "Generate Unit Tests For Function",
        "go.toggle.test.file": "Toggle Test File",
        "go.show.commands": "Show All Commands...",
        "go.get.package": "Get Package",
        "go.playground": "Run on Go Playground",
        "go.lint.package": "Lint Current Package",
        "go.lint.workspace": "Lint Workspace",
        "go.vet.package": "Vet Current Package",
        "go.vet.workspace": "Vet Workspace",
        "go.build.package": "Build Current Package",
        "go.build.workspace": "Build Workspace",
        "go.install.package": "Install Current Package",
        "go.fill.struct": "Fill struct"
    };
    GoCommands = GoCommands_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(core_1.CommandRegistry)),
        __param(1, inversify_1.inject(browser_1.EditorManager)),
        __metadata("design:paramtypes", [core_1.CommandRegistry,
            browser_1.EditorManager])
    ], GoCommands);
    return GoCommands;
}());
exports.GoCommands = GoCommands;
//# sourceMappingURL=go-commands.js.map