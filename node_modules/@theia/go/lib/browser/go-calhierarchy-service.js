"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var callhierarchy_service_impl_1 = require("@theia/callhierarchy/lib/browser/callhierarchy-service-impl");
var common_1 = require("../common");
var GoCallHierarchyService = /** @class */ (function (_super) {
    __extends(GoCallHierarchyService, _super);
    function GoCallHierarchyService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.languageId = common_1.GO_LANGUAGE_ID;
        return _this;
    }
    return GoCallHierarchyService;
}(callhierarchy_service_impl_1.AbstractDefaultCallHierarchyService));
exports.GoCallHierarchyService = GoCallHierarchyService;
//# sourceMappingURL=go-calhierarchy-service.js.map