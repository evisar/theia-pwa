"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var inversify_1 = require("inversify");
var textmate_snippet_completion_provider_1 = require("@theia/monaco/lib/browser/textmate/textmate-snippet-completion-provider");
var TypescriptGrammarContribution = /** @class */ (function () {
    function TypescriptGrammarContribution() {
        this.configuration = {
            'comments': {
                'lineComment': '//',
                'blockComment': ['/*', '*/']
            },
            'brackets': [
                ['{', '}'],
                ['[', ']'],
                ['(', ')']
            ],
            'autoClosingPairs': [
                { 'open': '{', 'close': '}' },
                { 'open': '[', 'close': ']' },
                { 'open': '(', 'close': ')' },
                { 'open': "'", 'close': "'", 'notIn': ['string', 'comment'] },
                { 'open': '"', 'close': '"', 'notIn': ['string'] },
                { 'open': '`', 'close': '`', 'notIn': ['string', 'comment'] },
                { 'open': '/**', 'close': ' */', 'notIn': ['string'] }
            ],
            'surroundingPairs': [
                { 'open': '{', 'close': '}' },
                { 'open': '[', 'close': ']' },
                { 'open': '(', 'close': ')' },
                { 'open': "'", 'close': "'" },
                { 'open': '"', 'close': '"' },
                { 'open': '`', 'close': '`' }
            ],
            'folding': {
                'markers': {
                    'start': new RegExp('^\\s*//\\s*#?region\\b'),
                    'end': new RegExp('^\\s*//\\s*#?endregion\\b')
                }
            }
        };
    }
    TypescriptGrammarContribution.prototype.registerTextmateLanguage = function (registry) {
        this.registerTypeScript();
        this.registerSnippets();
        var grammar = require('../../data/grammars/typescript.tmlanguage.json');
        registry.registerTextmateGrammarScope('source.ts', {
            getGrammarDefinition: function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, {
                                format: 'json',
                                content: grammar,
                            }];
                    });
                });
            }
        });
        registry.mapLanguageIdToTextmateGrammar(common_1.TYPESCRIPT_LANGUAGE_ID, 'source.ts');
        registry.registerGrammarConfiguration(common_1.TYPESCRIPT_LANGUAGE_ID, {
            tokenTypes: {
                'entity.name.type.instance.jsdoc': 0,
                'entity.name.function.tagged-template': 0,
                'meta.import string.quoted': 0,
                'variable.other.jsdoc': 0
            }
        });
        var jsxGrammar = require('../../data/grammars/typescript.tsx.tmlanguage.json');
        registry.registerTextmateGrammarScope('source.tsx', {
            getGrammarDefinition: function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, {
                                format: 'json',
                                content: jsxGrammar,
                            }];
                    });
                });
            }
        });
        registry.mapLanguageIdToTextmateGrammar(common_1.TYPESCRIPT_REACT_LANGUAGE_ID, 'source.tsx');
    };
    TypescriptGrammarContribution.prototype.registerSnippets = function () {
        var snippets = require('../../data/snippets/typescript.json');
        monaco.languages.registerCompletionItemProvider(common_1.TYPESCRIPT_LANGUAGE_ID, new textmate_snippet_completion_provider_1.TextmateSnippetCompletionProvider(snippets, 'ts'));
        monaco.languages.registerCompletionItemProvider(common_1.TYPESCRIPT_REACT_LANGUAGE_ID, new textmate_snippet_completion_provider_1.TextmateSnippetCompletionProvider(snippets, 'ts'));
    };
    TypescriptGrammarContribution.prototype.registerTypeScript = function () {
        var _this = this;
        monaco.languages.register({
            id: common_1.TYPESCRIPT_LANGUAGE_ID,
            aliases: [
                common_1.TYPESCRIPT_LANGUAGE_NAME,
                'typescript',
                'ts'
            ],
            extensions: [
                '.ts'
            ],
            mimetypes: [
                'text/typescript'
            ]
        });
        monaco.languages.onLanguage(common_1.TYPESCRIPT_LANGUAGE_ID, function () {
            monaco.languages.setLanguageConfiguration(common_1.TYPESCRIPT_LANGUAGE_ID, _this.configuration);
        });
        monaco.languages.register({
            id: common_1.TYPESCRIPT_REACT_LANGUAGE_ID,
            aliases: [
                common_1.TYPESCRIPT_REACT_LANGUAGE_NAME,
                'tsx'
            ],
            extensions: [
                '.tsx'
            ]
        });
        monaco.languages.onLanguage(common_1.TYPESCRIPT_REACT_LANGUAGE_ID, function () {
            monaco.languages.setLanguageConfiguration(common_1.TYPESCRIPT_REACT_LANGUAGE_ID, _this.configuration);
        });
    };
    TypescriptGrammarContribution = __decorate([
        inversify_1.injectable()
    ], TypescriptGrammarContribution);
    return TypescriptGrammarContribution;
}());
exports.TypescriptGrammarContribution = TypescriptGrammarContribution;
//# sourceMappingURL=typescript-language-config.js.map