"use strict";
/********************************************************************************
 * Copyright (C) 2017 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var process_manager_1 = require("./process-manager");
var common_1 = require("@theia/core/lib/common");
var ProcessType;
(function (ProcessType) {
    ProcessType[ProcessType["Raw"] = 0] = "Raw";
    ProcessType[ProcessType["Terminal"] = 1] = "Terminal";
})(ProcessType = exports.ProcessType || (exports.ProcessType = {}));
var Process = /** @class */ (function () {
    function Process(processManager, logger, type, options) {
        this.processManager = processManager;
        this.logger = logger;
        this.type = type;
        this.options = options;
        this.exitEmitter = new common_1.Emitter();
        this.errorEmitter = new common_1.Emitter();
        this._killed = false;
        this.id = this.processManager.register(this);
    }
    Object.defineProperty(Process.prototype, "killed", {
        get: function () {
            return this._killed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "onExit", {
        get: function () {
            return this.exitEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "onError", {
        get: function () {
            return this.errorEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emit the onExit event for this process.  Only one of code and signal
     * should be defined.
     */
    Process.prototype.emitOnExit = function (code, signal) {
        var exitEvent = { code: code, signal: signal };
        this.handleOnExit(exitEvent);
        this.exitEmitter.fire(exitEvent);
    };
    Process.prototype.handleOnExit = function (event) {
        this._killed = true;
        var signalSuffix = event.signal ? ", signal: " + event.signal : '';
        var executable = this.isForkOptions(this.options) ? this.options.modulePath : this.options.command;
        this.logger.debug("Process " + this.pid + " has exited with code " + event.code + signalSuffix + ".", executable, this.options.args);
    };
    Process.prototype.emitOnError = function (err) {
        this.handleOnError(err);
        this.errorEmitter.fire(err);
    };
    Process.prototype.handleOnError = function (error) {
        this._killed = true;
        this.logger.error(error);
    };
    // tslint:disable-next-line:no-any
    Process.prototype.isForkOptions = function (options) {
        return !!options && !!options.modulePath;
    };
    Process = __decorate([
        inversify_1.injectable(),
        __param(2, inversify_1.unmanaged()),
        __metadata("design:paramtypes", [process_manager_1.ProcessManager, Object, Number, Object])
    ], Process);
    return Process;
}());
exports.Process = Process;
//# sourceMappingURL=process.js.map