/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="react" />
import { Message } from '@phosphor/messaging';
import { PreferencesMenuFactory } from './preferences-menu-factory';
import { PreferencesDecorator } from './preferences-decorator';
import { DockPanel, SplitPanel, Widget } from '@phosphor/widgets';
import { ApplicationShell, ContextMenuRenderer, PreferenceSchemaProvider, PreferenceScope, PreferenceService, Saveable, TreeModel, TreeNode, TreeProps, TreeWidget, WidgetManager } from '@theia/core/lib/browser';
import { UserPreferenceProvider } from './user-preference-provider';
import { WorkspacePreferenceProvider } from './workspace-preference-provider';
import { DisposableCollection, Emitter, Event, MessageService } from '@theia/core';
import { EditorWidget, EditorManager } from '@theia/editor/lib/browser';
import { FileSystem } from '@theia/filesystem/lib/common';
export interface PreferencesEditorWidget extends EditorWidget {
    scope?: PreferenceScope;
}
export declare class PreferencesContainer extends SplitPanel implements ApplicationShell.TrackableWidgetProvider, Saveable {
    static ID: string;
    protected treeWidget: PreferencesTreeWidget | undefined;
    protected editorsContainer: PreferencesEditorsContainer;
    private currentEditor;
    private readonly editors;
    private deferredEditors;
    protected readonly onDirtyChangedEmitter: Emitter<void>;
    readonly onDirtyChanged: Event<void>;
    protected readonly toDispose: DisposableCollection;
    protected readonly widgetManager: WidgetManager;
    protected readonly shell: ApplicationShell;
    protected readonly messageService: MessageService;
    protected readonly preferenceService: PreferenceService;
    protected _preferenceScope: PreferenceScope;
    protected init(): void;
    dispose(): void;
    readonly autoSave: 'on' | 'off';
    readonly dirty: boolean;
    save(): void;
    getTrackableWidgets(): Promise<Widget[]>;
    preferenceScope: PreferenceScope;
    protected onAfterAttach(msg: Message): Promise<void>;
    protected onActivateRequest(msg: Message): void;
    protected onCloseRequest(msg: Message): void;
    activatePreferenceEditor(preferenceScope: PreferenceScope): void;
}
export declare class PreferencesEditorsContainer extends DockPanel {
    static ID: string;
    protected readonly fileSystem: FileSystem;
    protected readonly editorManager: EditorManager;
    protected readonly userPreferenceProvider: UserPreferenceProvider;
    protected readonly workspacePreferenceProvider: WorkspacePreferenceProvider;
    private preferenceScope;
    private readonly onInitEmitter;
    readonly onInit: Event<void>;
    private readonly onEditorChangedEmitter;
    readonly onEditorChanged: Event<EditorWidget>;
    protected readonly toDispose: DisposableCollection;
    dispose(): void;
    onCloseRequest(msg: Message): void;
    onUpdateRequest(msg: Message): void;
    protected onAfterAttach(msg: Message): Promise<void>;
    activatePreferenceEditor(preferenceScope: PreferenceScope): void;
    private getPreferenceEditorCaption;
}
export declare class PreferencesTreeWidget extends TreeWidget {
    readonly model: TreeModel;
    protected readonly treeProps: TreeProps;
    protected readonly contextMenuRenderer: ContextMenuRenderer;
    protected readonly preferenceSchemaProvider: PreferenceSchemaProvider;
    static ID: string;
    private preferencesGroupNames;
    private readonly properties;
    private readonly onPreferenceSelectedEmitter;
    readonly onPreferenceSelected: Event<{
        [key: string]: string;
    }>;
    protected readonly toDispose: DisposableCollection;
    protected readonly preferencesMenuFactory: PreferencesMenuFactory;
    protected readonly preferenceService: PreferenceService;
    protected readonly decorator: PreferencesDecorator;
    protected constructor(model: TreeModel, treeProps: TreeProps, contextMenuRenderer: ContextMenuRenderer, preferenceSchemaProvider: PreferenceSchemaProvider);
    dispose(): void;
    protected onAfterAttach(msg: Message): void;
    protected handleContextMenuEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void;
    protected handleClickEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void;
    protected handleEnter(event: KeyboardEvent): void;
    private openContextMenu;
    protected initializeModel(): void;
}
//# sourceMappingURL=preferences-tree-widget.d.ts.map