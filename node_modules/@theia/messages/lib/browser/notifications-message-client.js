"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var notifications_1 = require("./notifications");
var notification_preferences_1 = require("./notification-preferences");
var NotificationsMessageClient = /** @class */ (function (_super) {
    __extends(NotificationsMessageClient, _super);
    function NotificationsMessageClient() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.notifications = new notifications_1.Notifications();
        _this.visibleMessages = new Set();
        _this.visibleProgressNotifications = new Map();
        return _this;
    }
    NotificationsMessageClient.prototype.showMessage = function (message) {
        return this.show(message);
    };
    NotificationsMessageClient.prototype.showProgress = function (progressId, message, cancellationToken, update) {
        var _this = this;
        var messageArguments = __assign({}, message, { type: common_1.MessageType.Progress, options: __assign({}, (message.options || {}), { timeout: 0 }) });
        if (this.visibleProgressNotifications.has(progressId)) {
            throw new Error('Cannot show new progress with already existing id.');
        }
        return new Promise(function (resolve) {
            var progressNotification = _this.notifications.create(_this.getNotificationProperties(progressId, messageArguments, function (action) {
                _this.visibleProgressNotifications.delete(progressId);
                resolve(action);
            }));
            _this.visibleProgressNotifications.set(progressId, progressNotification);
            progressNotification.show();
            if (update) {
                progressNotification.update(update);
            }
            var cancel = function () {
                if (message.options && message.options.cancelable) {
                    resolve(common_1.ProgressMessage.Cancel);
                }
                progressNotification.close();
            };
            if (cancellationToken.isCancellationRequested) {
                cancel();
            }
            else {
                cancellationToken.onCancellationRequested(cancel);
            }
        });
    };
    NotificationsMessageClient.prototype.reportProgress = function (progressId, update, message, cancellationToken) {
        return __awaiter(this, void 0, void 0, function () {
            var notification;
            return __generator(this, function (_a) {
                notification = this.visibleProgressNotifications.get(progressId);
                if (notification) {
                    notification.update(update);
                }
                else {
                    this.showProgress(progressId, message, cancellationToken, update);
                }
                return [2 /*return*/];
            });
        });
    };
    NotificationsMessageClient.prototype.show = function (message) {
        var _this = this;
        var key = this.getKey(message);
        if (this.visibleMessages.has(key)) {
            return Promise.resolve(undefined);
        }
        this.visibleMessages.add(key);
        return new Promise(function (resolve) {
            _this.notifications.show(_this.getNotificationProperties(key, message, function (action) {
                _this.visibleMessages.delete(key);
                resolve(action);
            }));
        });
    };
    NotificationsMessageClient.prototype.getKey = function (m) {
        return m.type + "-" + m.text + "-" + (m.actions ? m.actions.join('|') : '|');
    };
    NotificationsMessageClient.prototype.getNotificationProperties = function (id, message, onCloseFn) {
        var icon = this.iconFor(message.type);
        var text = message.text;
        var actions = (message.actions || []).map(function (action) { return ({
            label: action,
            fn: function (element) { return onCloseFn(action); }
        }); });
        var timeout = actions.length > 0 ? undefined
            : (!!message.options && message.options.timeout !== undefined
                ? message.options.timeout
                : this.preferences['notification.timeout']);
        actions.push({
            label: 'Close',
            fn: function (element) { return onCloseFn(undefined); }
        });
        return {
            id: id,
            icon: icon,
            text: text,
            actions: actions,
            timeout: timeout,
            onTimeout: function () { return onCloseFn(undefined); }
        };
    };
    NotificationsMessageClient.prototype.iconFor = function (type) {
        switch (type) {
            case common_1.MessageType.Error: return 'error';
            case common_1.MessageType.Warning: return 'warning';
            case common_1.MessageType.Progress: return 'progress';
            default: return 'info';
        }
    };
    __decorate([
        inversify_1.inject(notification_preferences_1.NotificationPreferences),
        __metadata("design:type", Object)
    ], NotificationsMessageClient.prototype, "preferences", void 0);
    NotificationsMessageClient = __decorate([
        inversify_1.injectable()
    ], NotificationsMessageClient);
    return NotificationsMessageClient;
}(common_1.MessageClient));
exports.NotificationsMessageClient = NotificationsMessageClient;
//# sourceMappingURL=notifications-message-client.js.map