"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOTIFICATIONS_CONTAINER = 'theia-NotificationsContainer';
exports.NOTIFICATION = 'theia-Notification';
exports.ICON = 'icon';
exports.TEXT = 'text';
exports.BUTTONS = 'buttons';
var Notifications = /** @class */ (function () {
    function Notifications(parent) {
        this.parent = parent;
        this.parent = parent || document.body;
        this.container = this.createNotificationsContainer(this.parent);
    }
    Notifications.prototype.show = function (properties) {
        var notificationElement = this.createNotificationElement(properties);
        this.container.appendChild(notificationElement);
    };
    Notifications.prototype.create = function (properties) {
        return new ProgressNotificationImpl(this.container, this.createNotificationElement(properties), properties);
    };
    Notifications.prototype.createNotificationsContainer = function (parentContainer) {
        var container = document.createElement('div');
        container.classList.add(exports.NOTIFICATIONS_CONTAINER);
        return parentContainer.appendChild(container);
    };
    Notifications.prototype.createNotificationElement = function (properties) {
        var e_1, _a;
        var fragment = document.createDocumentFragment();
        var element = fragment.appendChild(document.createElement('div'));
        element.classList.add(exports.NOTIFICATION);
        element.id = 'notification-container-' + properties.id;
        var iconContainer = element.appendChild(document.createElement('div'));
        iconContainer.classList.add(exports.ICON);
        var icon = iconContainer.appendChild(document.createElement('i'));
        icon.classList.add('fa', this.toIconClass(properties.icon));
        if (properties.icon === 'progress') {
            icon.classList.add('fa-pulse');
        }
        icon.classList.add('fa-fw', properties.icon);
        var textContainer = element.appendChild(document.createElement('div'));
        textContainer.classList.add(exports.TEXT);
        var text = textContainer.appendChild(document.createElement('p'));
        text.id = 'notification-text-' + properties.id;
        text.innerText = properties.text;
        var handler = { element: element, properties: properties };
        var close = function () {
            element.remove();
        };
        var buttons = element.appendChild(document.createElement('div'));
        buttons.classList.add(exports.BUTTONS);
        var closeTimer = (!!properties.timeout && properties.timeout > 0) ?
            window.setTimeout(function () {
                properties.onTimeout();
                close();
            }, properties.timeout) : undefined;
        if (!!properties.actions) {
            var _loop_1 = function (action) {
                var button = buttons.appendChild(document.createElement('button'));
                button.innerText = action.label;
                button.addEventListener('click', function () {
                    if (closeTimer) {
                        window.clearTimeout(closeTimer);
                    }
                    action.fn(handler);
                    close();
                });
            };
            try {
                for (var _b = __values(properties.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var action = _c.value;
                    _loop_1(action);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return fragment;
    };
    Notifications.prototype.toIconClass = function (icon) {
        switch (icon) {
            case 'error': return 'fa-times-circle';
            case 'warning': return 'fa-warning';
            case 'progress': return 'fa-spinner';
            default: return 'fa-info-circle';
        }
    };
    return Notifications;
}());
exports.Notifications = Notifications;
var ProgressNotificationImpl = /** @class */ (function () {
    function ProgressNotificationImpl(container, node, properties) {
        this.node = node;
        this.container = container;
        this.properties = properties;
    }
    ProgressNotificationImpl.prototype.close = function () {
        var element = document.getElementById('notification-container-' + this.properties.id);
        if (!element) {
            return;
        }
        element.remove();
    };
    ProgressNotificationImpl.prototype.show = function () {
        var container = document.getElementById('notification-container-' + this.properties.id);
        if (!container) {
            this.container.appendChild(this.node);
        }
        container = document.getElementById('notification-container-' + this.properties.id);
        if (container) {
            var progressContainer = container.appendChild(document.createElement('div'));
            progressContainer.className = 'progress';
            var progress = progressContainer.appendChild(document.createElement('p'));
            progress.id = 'notification-progress-' + this.properties.id;
        }
    };
    ProgressNotificationImpl.prototype.update = function (item) {
        var textElement = document.getElementById('notification-text-' + this.properties.id);
        if (textElement) {
            if (item.work) {
                var progressElement = document.getElementById('notification-progress-' + this.properties.id);
                if (progressElement) {
                    var progressRate = item.work;
                    progressElement.innerText = Math.floor(progressRate.done / progressRate.total * 100) + "%";
                }
            }
            textElement.innerText = this.properties.text + (item.message ? ': ' + item.message : '');
        }
    };
    return ProgressNotificationImpl;
}());
//# sourceMappingURL=notifications.js.map