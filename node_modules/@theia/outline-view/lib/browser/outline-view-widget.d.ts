/********************************************************************************
 * Copyright (C) 2017-2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { TreeWidget, TreeNode, NodeProps, SelectableTreeNode, TreeProps, ContextMenuRenderer, TreeModel, ExpandableTreeNode } from '@theia/core/lib/browser';
import { Message } from '@phosphor/messaging';
import { Emitter } from '@theia/core';
import { CompositeTreeNode } from '@theia/core/lib/browser';
import * as React from 'react';
export interface OutlineSymbolInformationNode extends CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode {
    iconClass: string;
}
export declare namespace OutlineSymbolInformationNode {
    function is(node: TreeNode): node is OutlineSymbolInformationNode;
}
export declare type OutlineViewWidgetFactory = () => OutlineViewWidget;
export declare const OutlineViewWidgetFactory: unique symbol;
export declare class OutlineViewWidget extends TreeWidget {
    protected readonly treeProps: TreeProps;
    protected readonly contextMenuRenderer: ContextMenuRenderer;
    readonly onDidChangeOpenStateEmitter: Emitter<boolean>;
    constructor(treeProps: TreeProps, model: TreeModel, contextMenuRenderer: ContextMenuRenderer);
    setOutlineTree(roots: OutlineSymbolInformationNode[]): void;
    protected reconcileTreeState(nodes: TreeNode[]): TreeNode[];
    protected onAfterHide(msg: Message): void;
    protected onAfterShow(msg: Message): void;
    renderIcon(node: TreeNode, props: NodeProps): React.ReactNode;
    protected isExpandable(node: TreeNode): node is ExpandableTreeNode;
    protected renderTree(model: TreeModel): React.ReactNode;
}
//# sourceMappingURL=outline-view-widget.d.ts.map