"use strict";
/********************************************************************************
 * Copyright (C) 2017 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var task_contribution_1 = require("./task-contribution");
var terminal_widget_impl_1 = require("@theia/terminal/lib/browser/terminal-widget-impl");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var message_service_1 = require("@theia/core/lib/common/message-service");
var task_protocol_1 = require("../common/task-protocol");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var browser_2 = require("@theia/variable-resolver/lib/browser");
var task_watcher_1 = require("../common/task-watcher");
var task_configurations_1 = require("./task-configurations");
var TaskService = /** @class */ (function () {
    function TaskService() {
        this.workspaceRootUri = undefined;
        /**
         * Reflects whether a valid task configuration file was found
         * in the current workspace, and is being watched for changes.
         */
        this.configurationFileFound = false;
    }
    TaskService.prototype.init = function () {
        var _this = this;
        // wait for the workspace root to be set
        this.workspaceService.roots.then(function (roots) { return __awaiter(_this, void 0, void 0, function () {
            var root, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        root = roots[0];
                        if (!root) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.taskConfigurations.watchConfigurationFile(root.uri)];
                    case 1:
                        _a.configurationFileFound = _b.sent();
                        this.workspaceRootUri = root.uri;
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
        // notify user that task has started
        this.taskWatcher.onTaskCreated(function (event) {
            if (_this.isEventForThisClient(event.ctx)) {
                _this.messageService.info("Task #" + event.taskId + " created - " + event.config.label);
            }
        });
        // notify user that task has finished
        this.taskWatcher.onTaskExit(function (event) {
            if (!_this.isEventForThisClient(event.ctx)) {
                return;
            }
            if (event.code !== undefined) {
                var message = "Task " + event.taskId + " has exited with code " + event.code + ".";
                if (event.code === 0) {
                    _this.messageService.info(message);
                }
                else {
                    _this.messageService.error(message);
                }
            }
            else if (event.signal !== undefined) {
                _this.messageService.info("Task " + event.taskId + " was terminated by signal " + event.signal + ".");
            }
            else {
                console.error('Invalid TaskExitedEvent received, neither code nor signal is set.');
            }
        });
    };
    /** Returns an array of the task configurations configured in tasks.json and provided by the extensions. */
    TaskService.prototype.getTasks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configuredTasks, providedTasks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        configuredTasks = this.taskConfigurations.getTasks();
                        return [4 /*yield*/, this.getProvidedTasks()];
                    case 1:
                        providedTasks = _a.sent();
                        return [2 /*return*/, __spread(configuredTasks, providedTasks)];
                }
            });
        });
    };
    /** Returns an array of the task configurations which are provided by the extensions. */
    TaskService.prototype.getProvidedTasks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, providedTasks, providers, providers_1, providers_1_1, provider, _b, _c, _d, e_1_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        providedTasks = [];
                        providers = this.taskProviderRegistry.getProviders();
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 8]);
                        providers_1 = __values(providers), providers_1_1 = providers_1.next();
                        _e.label = 2;
                    case 2:
                        if (!!providers_1_1.done) return [3 /*break*/, 5];
                        provider = providers_1_1.value;
                        _c = (_b = providedTasks.push).apply;
                        _d = [providedTasks];
                        return [4 /*yield*/, provider.provideTasks()];
                    case 3:
                        _c.apply(_b, _d.concat([__spread.apply(void 0, [_e.sent()])]));
                        _e.label = 4;
                    case 4:
                        providers_1_1 = providers_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, providedTasks];
                }
            });
        });
    };
    /**
     * Returns a task configuration provided by an extension by task type and label.
     * If there are no task configuration, returns undefined.
     */
    TaskService.prototype.getProvidedTask = function (type, label) {
        return __awaiter(this, void 0, void 0, function () {
            var provider, tasks;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        provider = this.taskProviderRegistry.getProvider(type);
                        if (!provider) return [3 /*break*/, 2];
                        return [4 /*yield*/, provider.provideTasks()];
                    case 1:
                        tasks = _a.sent();
                        return [2 /*return*/, tasks.find(function (t) { return t.label === label; })];
                    case 2: return [2 /*return*/, undefined];
                }
            });
        });
    };
    /** Returns an array of running tasks 'TaskInfo' objects */
    TaskService.prototype.getRunningTasks = function () {
        return this.taskServer.getTasks(this.getContext());
    };
    /**
     * Runs a task, by task configuration label.
     * Note, it looks for a task configured in tasks.json only.
     */
    TaskService.prototype.runConfiguredTask = function (taskLabel) {
        return __awaiter(this, void 0, void 0, function () {
            var task;
            return __generator(this, function (_a) {
                task = this.taskConfigurations.getTask(taskLabel);
                if (!task) {
                    this.logger.error("Can't get task launch configuration for label: " + taskLabel);
                    return [2 /*return*/];
                }
                this.run(task.type, task.label);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Runs a task, by task type and task configuration label.
     * It looks for configured and provided tasks.
     */
    TaskService.prototype.run = function (type, taskLabel) {
        return __awaiter(this, void 0, void 0, function () {
            var task, resolver, resolvedTask, _a, error_1, taskInfo, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getProvidedTask(type, taskLabel)];
                    case 1:
                        task = _b.sent();
                        if (!task) {
                            task = this.taskConfigurations.getTask(taskLabel);
                            if (!task) {
                                this.logger.error("Can't get task launch configuration for label: " + taskLabel);
                                return [2 /*return*/];
                            }
                        }
                        resolver = this.taskResolverRegistry.getResolver(task.type);
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 6, , 7]);
                        if (!resolver) return [3 /*break*/, 4];
                        return [4 /*yield*/, resolver.resolveTask(task)];
                    case 3:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        _a = task;
                        _b.label = 5;
                    case 5:
                        resolvedTask = _a;
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _b.sent();
                        this.logger.error("Error resolving task '" + taskLabel + "': " + error_1);
                        this.messageService.error("Error resolving task '" + taskLabel + "': " + error_1);
                        return [2 /*return*/];
                    case 7:
                        _b.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, this.taskServer.run(resolvedTask, this.getContext())];
                    case 8:
                        taskInfo = _b.sent();
                        return [3 /*break*/, 10];
                    case 9:
                        error_2 = _b.sent();
                        this.logger.error("Error launching task '" + taskLabel + "': " + error_2);
                        this.messageService.error("Error launching task '" + taskLabel + "': " + error_2);
                        return [2 /*return*/];
                    case 10:
                        this.logger.debug("Task created. Task id: " + taskInfo.taskId);
                        // open terminal widget if the task is based on a terminal process (type: shell)
                        if (taskInfo.terminalId !== undefined) {
                            this.attach(taskInfo.terminalId, taskInfo.taskId);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TaskService.prototype.attach = function (terminalId, taskId) {
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widgetManager.getOrCreateWidget(terminal_widget_impl_1.TERMINAL_WIDGET_FACTORY_ID, {
                            created: new Date().toString(),
                            id: 'task-' + taskId,
                            caption: "Task #" + taskId,
                            label: "Task #" + taskId,
                            destroyTermOnClose: true
                        })];
                    case 1:
                        widget = _a.sent();
                        this.shell.addWidget(widget, { area: 'bottom' });
                        this.shell.activateWidget(widget.id);
                        widget.start(terminalId);
                        return [2 /*return*/];
                }
            });
        });
    };
    TaskService.prototype.isEventForThisClient = function (context) {
        if (context === this.getContext()) {
            return true;
        }
        return false;
    };
    TaskService.prototype.taskConfigurationChanged = function (event) {
        // do nothing for now
    };
    TaskService.prototype.getContext = function () {
        return this.workspaceRootUri;
    };
    /** Kill task for a given id if task is found */
    TaskService.prototype.kill = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.taskServer.kill(id)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_3 = _a.sent();
                        this.logger.error("Error killing task '" + id + "': " + error_3);
                        this.messageService.error("Error killing task '" + id + "': " + error_3);
                        return [2 /*return*/];
                    case 3:
                        this.logger.debug("Task killed. Task id: " + id);
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(browser_1.FrontendApplication),
        __metadata("design:type", browser_1.FrontendApplication)
    ], TaskService.prototype, "app", void 0);
    __decorate([
        inversify_1.inject(browser_1.ApplicationShell),
        __metadata("design:type", browser_1.ApplicationShell)
    ], TaskService.prototype, "shell", void 0);
    __decorate([
        inversify_1.inject(task_protocol_1.TaskServer),
        __metadata("design:type", Object)
    ], TaskService.prototype, "taskServer", void 0);
    __decorate([
        inversify_1.inject(common_1.ILogger), inversify_1.named('task'),
        __metadata("design:type", Object)
    ], TaskService.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(widget_manager_1.WidgetManager),
        __metadata("design:type", widget_manager_1.WidgetManager)
    ], TaskService.prototype, "widgetManager", void 0);
    __decorate([
        inversify_1.inject(task_watcher_1.TaskWatcher),
        __metadata("design:type", task_watcher_1.TaskWatcher)
    ], TaskService.prototype, "taskWatcher", void 0);
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], TaskService.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(workspace_service_1.WorkspaceService),
        __metadata("design:type", workspace_service_1.WorkspaceService)
    ], TaskService.prototype, "workspaceService", void 0);
    __decorate([
        inversify_1.inject(task_configurations_1.TaskConfigurations),
        __metadata("design:type", task_configurations_1.TaskConfigurations)
    ], TaskService.prototype, "taskConfigurations", void 0);
    __decorate([
        inversify_1.inject(browser_2.VariableResolverService),
        __metadata("design:type", browser_2.VariableResolverService)
    ], TaskService.prototype, "variableResolverService", void 0);
    __decorate([
        inversify_1.inject(task_contribution_1.TaskResolverRegistry),
        __metadata("design:type", task_contribution_1.TaskResolverRegistry)
    ], TaskService.prototype, "taskResolverRegistry", void 0);
    __decorate([
        inversify_1.inject(task_contribution_1.TaskProviderRegistry),
        __metadata("design:type", task_contribution_1.TaskProviderRegistry)
    ], TaskService.prototype, "taskProviderRegistry", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TaskService.prototype, "init", null);
    TaskService = __decorate([
        inversify_1.injectable()
    ], TaskService);
    return TaskService;
}());
exports.TaskService = TaskService;
//# sourceMappingURL=task-service.js.map