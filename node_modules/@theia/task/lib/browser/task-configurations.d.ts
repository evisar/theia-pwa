/********************************************************************************
 * Copyright (C) 2017-2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { TaskConfiguration } from '../common/task-protocol';
import { ILogger, Disposable, DisposableCollection } from '@theia/core/lib/common/';
import { FileSystemWatcherServer, FileChange } from '@theia/filesystem/lib/common/filesystem-watcher-protocol';
import { FileSystem } from '@theia/filesystem/lib/common';
export interface TaskConfigurationClient {
    /**
     * The task configuration file has changed, so a client might want to refresh its configurations
     * @returns an array of strings, each one being a task label
     */
    taskConfigurationChanged: (event: string[]) => void;
}
/**
 * Watches a tasks.json configuration file and provides a parsed version of the contained task configurations
 */
export declare class TaskConfigurations implements Disposable {
    protected readonly logger: ILogger;
    protected readonly watcherServer: FileSystemWatcherServer;
    protected readonly fileSystem: FileSystem;
    protected readonly toDispose: DisposableCollection;
    protected tasksMap: Map<string, TaskConfiguration>;
    protected watchedConfigFileUri: string;
    /** last directory element under which we look for task config */
    protected readonly TASKFILEPATH = ".theia";
    /** task configuration file name */
    protected readonly TASKFILE = "tasks.json";
    protected client: TaskConfigurationClient | undefined;
    constructor(logger: ILogger, watcherServer: FileSystemWatcherServer, fileSystem: FileSystem);
    setClient(client: TaskConfigurationClient): void;
    dispose(): void;
    /**
     * Triggers the watching of a potential task configuration file, under the given root URI.
     * Returns whether a configuration file was found.
     */
    watchConfigurationFile(rootUri: string): Promise<boolean>;
    /** returns the list of known task labels */
    getTaskLabels(): string[];
    /** returns the list of known tasks */
    getTasks(): TaskConfiguration[];
    /** returns the task configuration for a given label or undefined if none */
    getTask(taskLabel: string): TaskConfiguration | undefined;
    /** returns the string uri of where the config file would be, if it existed under a given root directory */
    protected getConfigFileUri(rootDir: string): string;
    /**
     * Called when a change, to a config file we watch, is detected.
     * Triggers a reparse, if appropriate.
     */
    protected onDidTaskFileChange(fileChange: FileChange): Promise<void>;
    /**
     * Tries to read the tasks from a config file and if it success then updates the list of available tasks.
     * If reading a config file wasn't success then does nothing.
     */
    protected refreshTasks(): Promise<void>;
    /** parses a config file and extracts the tasks launch configurations */
    protected readTasks(uri: string): Promise<TaskConfiguration[] | undefined>;
    protected filterDuplicates(tasks: TaskConfiguration[]): TaskConfiguration[];
}
//# sourceMappingURL=task-configurations.d.ts.map