"use strict";
/********************************************************************************
 * Copyright (C) 2017-2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common/");
var uri_1 = require("@theia/core/lib/common/uri");
var filesystem_watcher_protocol_1 = require("@theia/filesystem/lib/common/filesystem-watcher-protocol");
var common_2 = require("@theia/filesystem/lib/common");
var jsoncparser = require("jsonc-parser");
/**
 * Watches a tasks.json configuration file and provides a parsed version of the contained task configurations
 */
var TaskConfigurations = /** @class */ (function () {
    function TaskConfigurations(logger, watcherServer, fileSystem) {
        var _this = this;
        this.logger = logger;
        this.watcherServer = watcherServer;
        this.fileSystem = fileSystem;
        this.toDispose = new common_1.DisposableCollection();
        this.tasksMap = new Map();
        /** last directory element under which we look for task config */
        this.TASKFILEPATH = '.theia';
        /** task configuration file name */
        this.TASKFILE = 'tasks.json';
        this.client = undefined;
        this.toDispose.push(watcherServer);
        watcherServer.setClient({
            onDidFilesChanged: function (event) { return __awaiter(_this, void 0, void 0, function () {
                var watchedConfigFileChange, err_1;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            watchedConfigFileChange = event.changes.find(function (change) { return change.uri === _this.watchedConfigFileUri; });
                            if (!watchedConfigFileChange) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.onDidTaskFileChange(watchedConfigFileChange)];
                        case 1:
                            _a.sent();
                            if (this.client) {
                                this.client.taskConfigurationChanged(this.getTaskLabels());
                            }
                            _a.label = 2;
                        case 2: return [3 /*break*/, 4];
                        case 3:
                            err_1 = _a.sent();
                            this.logger.error(err_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); }
        });
        this.toDispose.push(common_1.Disposable.create(function () {
            _this.tasksMap.clear();
            _this.client = undefined;
        }));
    }
    TaskConfigurations.prototype.setClient = function (client) {
        this.client = client;
    };
    TaskConfigurations.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    /**
     * Triggers the watching of a potential task configuration file, under the given root URI.
     * Returns whether a configuration file was found.
     */
    TaskConfigurations.prototype.watchConfigurationFile = function (rootUri) {
        return __awaiter(this, void 0, void 0, function () {
            var configFile, watchId_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        configFile = this.getConfigFileUri(rootUri);
                        if (!(this.watchedConfigFileUri !== configFile)) return [3 /*break*/, 2];
                        this.watchedConfigFileUri = configFile;
                        return [4 /*yield*/, this.watcherServer.watchFileChanges(configFile)];
                    case 1:
                        watchId_1 = _a.sent();
                        this.toDispose.push(common_1.Disposable.create(function () {
                            return _this.watcherServer.unwatchFileChanges(watchId_1);
                        }));
                        this.refreshTasks();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.fileSystem.exists(configFile)];
                    case 3:
                        if (_a.sent()) {
                            return [2 /*return*/, true];
                        }
                        else {
                            this.logger.info("Config file " + this.TASKFILE + " does not exist under " + rootUri);
                            return [2 /*return*/, false];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /** returns the list of known task labels */
    TaskConfigurations.prototype.getTaskLabels = function () {
        return __spread(this.tasksMap.keys());
    };
    /** returns the list of known tasks */
    TaskConfigurations.prototype.getTasks = function () {
        return __spread(this.tasksMap.values());
    };
    /** returns the task configuration for a given label or undefined if none */
    TaskConfigurations.prototype.getTask = function (taskLabel) {
        return this.tasksMap.get(taskLabel);
    };
    /** returns the string uri of where the config file would be, if it existed under a given root directory */
    TaskConfigurations.prototype.getConfigFileUri = function (rootDir) {
        return new uri_1.default(rootDir).resolve(this.TASKFILEPATH).resolve(this.TASKFILE).toString();
    };
    /**
     * Called when a change, to a config file we watch, is detected.
     * Triggers a reparse, if appropriate.
     */
    TaskConfigurations.prototype.onDidTaskFileChange = function (fileChange) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (fileChange.type === filesystem_watcher_protocol_1.FileChangeType.DELETED) {
                    this.tasksMap.clear();
                }
                else {
                    // re-parse the config file
                    this.refreshTasks();
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Tries to read the tasks from a config file and if it success then updates the list of available tasks.
     * If reading a config file wasn't success then does nothing.
     */
    TaskConfigurations.prototype.refreshTasks = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, tasksConfigsArray, tasksConfigsArray_1, tasksConfigsArray_1_1, task;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.readTasks(this.watchedConfigFileUri)];
                    case 1:
                        tasksConfigsArray = _b.sent();
                        if (tasksConfigsArray) {
                            // only clear tasks map when successful at parsing the config file
                            // this way we avoid clearing and re-filling it multiple times if the
                            // user is editing the file in the auto-save mode, having momentarily
                            // non-parsing JSON.
                            this.tasksMap.clear();
                            try {
                                for (tasksConfigsArray_1 = __values(tasksConfigsArray), tasksConfigsArray_1_1 = tasksConfigsArray_1.next(); !tasksConfigsArray_1_1.done; tasksConfigsArray_1_1 = tasksConfigsArray_1.next()) {
                                    task = tasksConfigsArray_1_1.value;
                                    this.tasksMap.set(task.label, task);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (tasksConfigsArray_1_1 && !tasksConfigsArray_1_1.done && (_a = tasksConfigsArray_1.return)) _a.call(tasksConfigsArray_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /** parses a config file and extracts the tasks launch configurations */
    TaskConfigurations.prototype.readTasks = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, response, strippedContent, errors, tasks, errors_1, errors_1_1, e, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.fileSystem.exists(uri)];
                    case 1:
                        if (!!(_b.sent())) return [3 /*break*/, 2];
                        return [2 /*return*/, undefined];
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.fileSystem.resolveContent(uri)];
                    case 3:
                        response = _b.sent();
                        strippedContent = jsoncparser.stripComments(response.content);
                        errors = [];
                        tasks = jsoncparser.parse(strippedContent, errors);
                        if (errors.length) {
                            try {
                                for (errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
                                    e = errors_1_1.value;
                                    this.logger.error("Error parsing " + uri + ": error: " + e.error + ", length:  " + e.length + ", offset:  " + e.offset);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (errors_1_1 && !errors_1_1.done && (_a = errors_1.return)) _a.call(errors_1);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        else {
                            return [2 /*return*/, this.filterDuplicates(tasks['tasks'])];
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _b.sent();
                        this.logger.error("Error(s) reading config file: " + uri);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TaskConfigurations.prototype.filterDuplicates = function (tasks) {
        var e_3, _a;
        var filteredTasks = [];
        var _loop_1 = function (task) {
            if (filteredTasks.some(function (t) { return t.label === task.label; })) {
                // TODO: create a problem marker so that this issue will be visible in the editor?
                this_1.logger.error("Error parsing " + this_1.TASKFILE + ": found duplicate entry for label: " + task.label);
            }
            else {
                filteredTasks.push(task);
            }
        };
        var this_1 = this;
        try {
            for (var tasks_1 = __values(tasks), tasks_1_1 = tasks_1.next(); !tasks_1_1.done; tasks_1_1 = tasks_1.next()) {
                var task = tasks_1_1.value;
                _loop_1(task);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (tasks_1_1 && !tasks_1_1.done && (_a = tasks_1.return)) _a.call(tasks_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return filteredTasks;
    };
    TaskConfigurations = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.ILogger)), __param(0, inversify_1.named('task')),
        __param(1, inversify_1.inject(filesystem_watcher_protocol_1.FileSystemWatcherServer)),
        __param(2, inversify_1.inject(common_2.FileSystem)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], TaskConfigurations);
    return TaskConfigurations;
}());
exports.TaskConfigurations = TaskConfigurations;
//# sourceMappingURL=task-configurations.js.map