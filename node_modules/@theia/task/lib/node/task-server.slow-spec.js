"use strict";
/********************************************************************************
 * Copyright (C) 2017-2019 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var task_test_container_1 = require("./test/task-test-container");
var backend_application_1 = require("@theia/core/lib/node/backend-application");
var common_1 = require("../common");
var os_1 = require("@theia/core/lib/common/os");
var node_1 = require("@theia/core/lib/node");
var terminal_protocol_1 = require("@theia/terminal/lib/common/terminal-protocol");
var expect_1 = require("@theia/core/lib/common/test/expect");
var test_web_socket_channel_1 = require("@theia/core/lib/node/messaging/test/test-web-socket-channel");
var chai_1 = require("chai");
/**
 * Globals
 */
// test scripts that we bundle with tasks
var commandShortRunning = './task';
var commandShortrunningindows = 'task.bat';
var commandLongRunning = './task-long-running';
var commandLongRunningWindows = 'task-long-running.bat';
var bogusCommand = 'thisisnotavalidcommand';
var commandToFindInPathUnix = 'ls';
var commandToFindInPathWindows = 'dir';
// we use test-resources subfolder ('<theia>/packages/task/test-resources/'),
// as workspace root, for these tests
var wsRoot = node_1.FileUri.fsPath(node_1.FileUri.create(__dirname).resolve('../../test-resources'));
describe('Task server / back-end', function () {
    var _this = this;
    this.timeout(10000);
    var server;
    var taskServer;
    var taskWatcher;
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        var testContainer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testContainer = task_test_container_1.createTaskTestContainer();
                    taskWatcher = testContainer.get(common_1.TaskWatcher);
                    taskServer = testContainer.get(common_1.TaskServer);
                    taskServer.setClient(taskWatcher.getTaskClient());
                    return [4 /*yield*/, testContainer.get(backend_application_1.BackendApplication).start()];
                case 1:
                    server = _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () {
        taskServer = undefined;
        taskWatcher = undefined;
        var s = server;
        server = undefined;
        s.close();
    });
    it('task running in terminal - expected data is received from the terminal ws server', function () {
        return __awaiter(this, void 0, void 0, function () {
            var someString, command, taskInfo, terminalId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        someString = 'someSingleWordString';
                        // This test is flaky on Windows and fails intermittently. Disable it for now
                        if (os_1.isWindows) {
                            this.skip();
                        }
                        command = os_1.isWindows ? commandShortrunningindows : commandShortRunning;
                        return [4 /*yield*/, taskServer.run(createProcessTaskConfig('shell', node_1.FileUri.fsPath(command), [someString]), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        terminalId = taskInfo.terminalId;
                        // hook-up to terminal's ws and confirm that it outputs expected tasks' output
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var channel = new test_web_socket_channel_1.TestWebSocketChannel({ server: server, path: terminal_protocol_1.terminalsPath + "/" + terminalId });
                                channel.onError(reject);
                                channel.onClose(function (code, reason) { return reject("channel is closed with '" + code + "' code and '" + reason + "' reason"); });
                                channel.onMessage(function (msg) {
                                    // check output of task on terminal is what we expect
                                    var expected = "tasking... " + someString;
                                    if (msg.toString().indexOf(expected) !== -1) {
                                        resolve();
                                    }
                                    else {
                                        reject("expected sub-string not found in terminal output. Expected: \"" + expected + "\" vs Actual: \"" + msg.toString() + "\"");
                                    }
                                    channel.close();
                                });
                            })];
                    case 2:
                        // hook-up to terminal's ws and confirm that it outputs expected tasks' output
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task using raw process - task server success response shall not contain a terminal id', function () {
        return __awaiter(this, void 0, void 0, function () {
            var someString, command, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        someString = 'someSingleWordString';
                        command = os_1.isWindows ? commandShortrunningindows : commandShortRunning;
                        return [4 /*yield*/, taskServer.run(createProcessTaskConfig('process', node_1.FileUri.fsPath(command), [someString]), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = new Promise(function (resolve, reject) {
                            var toDispose = taskWatcher.onTaskExit(function (event) {
                                if (event.taskId === taskInfo.taskId && event.code === 0) {
                                    if (taskInfo.terminalId === undefined) {
                                        resolve();
                                    }
                                    else {
                                        reject("terminal id was expected to be undefined, actual: " + taskInfo.terminalId);
                                    }
                                    toDispose.dispose();
                                }
                            });
                        });
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task is executed successfully with cwd as a file URI', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, config, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandShortrunningindows : commandShortRunning;
                        config = createProcessTaskConfig('shell', node_1.FileUri.fsPath(command), [], node_1.FileUri.create(wsRoot).toString());
                        return [4 /*yield*/, taskServer.run(config, wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task is executed successfully using terminal process', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandShortrunningindows : commandShortRunning;
                        return [4 /*yield*/, taskServer.run(createProcessTaskConfig('shell', node_1.FileUri.fsPath(command), []), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task is executed successfully using raw process', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandShortrunningindows : commandShortRunning;
                        return [4 /*yield*/, taskServer.run(createProcessTaskConfig('process', node_1.FileUri.fsPath(command), []))];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task without a specific runner is executed successfully using as a process', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, taskConfig, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandToFindInPathWindows : commandToFindInPathUnix;
                        taskConfig = createTaskConfig('npm', command, []);
                        return [4 /*yield*/, taskServer.run(taskConfig, wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task can successfully execute command found in system path using a terminal process', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, opts, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandToFindInPathWindows : commandToFindInPathUnix;
                        opts = createProcessTaskConfig('shell', command, []);
                        return [4 /*yield*/, taskServer.run(opts, wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task can successfully execute command found in system path using a raw process', function () {
        return __awaiter(this, void 0, void 0, function () {
            var command, taskInfo, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        command = os_1.isWindows ? commandToFindInPathWindows : commandToFindInPathUnix;
                        return [4 /*yield*/, taskServer.run(createProcessTaskConfig('process', command, []), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = checkSuccessfullProcessExit(taskInfo, taskWatcher);
                        return [4 /*yield*/, p];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task using terminal process can be killed', function () {
        return __awaiter(this, void 0, void 0, function () {
            var taskInfo, p, signalOrCode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('shell'), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = new Promise(function (resolve, reject) {
                            taskWatcher.onTaskExit(function (event) {
                                if (os_1.isWindows) {
                                    if (event.taskId !== taskInfo.taskId || event.code === undefined) {
                                        reject();
                                    }
                                    resolve(event.code);
                                }
                                else {
                                    if (event.taskId !== taskInfo.taskId || event.signal === undefined) {
                                        reject();
                                    }
                                    resolve(event.signal);
                                }
                            });
                            taskServer.kill(taskInfo.taskId);
                        });
                        return [4 /*yield*/, p];
                    case 2:
                        signalOrCode = _a.sent();
                        if (os_1.isWindows) {
                            // On Windows, node-pty just reports an exit code of 0.
                            chai_1.expect(signalOrCode).equals(0);
                        }
                        else {
                            // On Linux/macOS, node-pty sends SIGHUP by default, for some reason.
                            chai_1.expect(signalOrCode).equals('SIGHUP');
                        }
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task using raw process can be killed', function () {
        return __awaiter(this, void 0, void 0, function () {
            var taskInfo, p, signal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('process'), wsRoot)];
                    case 1:
                        taskInfo = _a.sent();
                        p = new Promise(function (resolve, reject) {
                            taskWatcher.onTaskExit(function (event) {
                                if (event.taskId !== taskInfo.taskId || event.signal === undefined) {
                                    reject();
                                }
                                resolve(event.signal);
                            });
                            taskServer.kill(taskInfo.taskId);
                        });
                        return [4 /*yield*/, p];
                    case 2:
                        signal = _a.sent();
                        chai_1.expect(signal).equals('SIGTERM');
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task using terminal process can handle command that does not exist', function () {
        return __awaiter(this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        p = taskServer.run(createProcessTaskConfig2('shell', bogusCommand, []), wsRoot);
                        return [4 /*yield*/, expect_1.expectThrowsAsync(p, "Command not found: " + bogusCommand)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('task using raw process can handle command that does not exist', function () {
        return __awaiter(this, void 0, void 0, function () {
            var p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        p = taskServer.run(createProcessTaskConfig2('process', bogusCommand, []), wsRoot);
                        return [4 /*yield*/, expect_1.expectThrowsAsync(p, "Command not found: " + bogusCommand)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('getTasks(ctx) returns tasks according to created context', function () {
        return __awaiter(this, void 0, void 0, function () {
            var context1, context2, task1, task2, task3, task4, task5, task6, runningTasksCtx1, runningTasksCtx2, runningTasksAll, p;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        context1 = 'aContext';
                        context2 = 'anotherContext';
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('shell'), context1)];
                    case 1:
                        task1 = _a.sent();
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('process'), context2)];
                    case 2:
                        task2 = _a.sent();
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('shell'), context1)];
                    case 3:
                        task3 = _a.sent();
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('process'), context2)];
                    case 4:
                        task4 = _a.sent();
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('shell'), context1)];
                    case 5:
                        task5 = _a.sent();
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('process'), context1)];
                    case 6:
                        task6 = _a.sent();
                        return [4 /*yield*/, taskServer.getTasks(context1)];
                    case 7:
                        runningTasksCtx1 = _a.sent();
                        return [4 /*yield*/, taskServer.getTasks(context2)];
                    case 8:
                        runningTasksCtx2 = _a.sent();
                        return [4 /*yield*/, taskServer.getTasks()];
                    case 9:
                        runningTasksAll = _a.sent();
                        p = new Promise(function (resolve, reject) {
                            if (runningTasksCtx1.length === 4) {
                                if (runningTasksCtx2.length === 2) {
                                    if (runningTasksAll.length === 6) {
                                        resolve();
                                    }
                                    else {
                                        reject("Error: unexpected total number of running tasks for all contexts:  expected: 6, actual: " + runningTasksCtx1.length);
                                    }
                                }
                                else {
                                    reject("Error: unexpected number of running tasks for context 2: expected: 2, actual: " + runningTasksCtx1.length);
                                }
                            }
                            else {
                                reject("Error: unexpected number of running tasks for context 1: expected: 4, actual: " + runningTasksCtx1.length);
                            }
                        });
                        // cleanup
                        return [4 /*yield*/, taskServer.kill(task1.taskId)];
                    case 10:
                        // cleanup
                        _a.sent();
                        return [4 /*yield*/, taskServer.kill(task2.taskId)];
                    case 11:
                        _a.sent();
                        return [4 /*yield*/, taskServer.kill(task3.taskId)];
                    case 12:
                        _a.sent();
                        return [4 /*yield*/, taskServer.kill(task4.taskId)];
                    case 13:
                        _a.sent();
                        return [4 /*yield*/, taskServer.kill(task5.taskId)];
                    case 14:
                        _a.sent();
                        return [4 /*yield*/, taskServer.kill(task6.taskId)];
                    case 15:
                        _a.sent();
                        return [4 /*yield*/, p];
                    case 16:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('creating and killing a bunch of tasks works as expected', function () {
        return __awaiter(this, void 0, void 0, function () {
            var numTasks, taskinfo, i, _a, _b, _c, _d, numRunningTasksAfterCreated, i, numRunningTasksAfterKilled, p;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        numTasks = 20;
                        taskinfo = [];
                        i = 0;
                        _e.label = 1;
                    case 1:
                        if (!(i < numTasks)) return [3 /*break*/, 6];
                        if (!(i % 2 === 0)) return [3 /*break*/, 3];
                        _b = (_a = taskinfo).push;
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('shell'))];
                    case 2:
                        _b.apply(_a, [_e.sent()]);
                        return [3 /*break*/, 5];
                    case 3:
                        _d = (_c = taskinfo).push;
                        return [4 /*yield*/, taskServer.run(createTaskConfigTaskLongRunning('process'))];
                    case 4:
                        _d.apply(_c, [_e.sent()]);
                        _e.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [4 /*yield*/, taskServer.getTasks()];
                    case 7:
                        numRunningTasksAfterCreated = _e.sent();
                        i = 0;
                        _e.label = 8;
                    case 8:
                        if (!(i < taskinfo.length)) return [3 /*break*/, 11];
                        return [4 /*yield*/, taskServer.kill(taskinfo[i].taskId)];
                    case 9:
                        _e.sent();
                        _e.label = 10;
                    case 10:
                        i++;
                        return [3 /*break*/, 8];
                    case 11: return [4 /*yield*/, taskServer.getTasks()];
                    case 12:
                        numRunningTasksAfterKilled = _e.sent();
                        p = new Promise(function (resolve, reject) {
                            if (numRunningTasksAfterCreated.length === numTasks) {
                                if (numRunningTasksAfterKilled.length === 0) {
                                    resolve();
                                }
                                else {
                                    reject("Error: remaining running tasks, after all killed: expected: 0, actual: " + numRunningTasksAfterKilled.length);
                                }
                            }
                            else {
                                reject("Error: unexpected number of running tasks: expected: " + numTasks + ", actual: " + numRunningTasksAfterCreated.length);
                            }
                        });
                        return [4 /*yield*/, p];
                    case 13:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
});
function createTaskConfig(taskType, command, args) {
    var options = {
        label: 'test task',
        type: taskType,
        command: command,
        args: args,
        windows: {
            command: 'cmd.exe',
            args: [
                '/c',
                command,
                (args[0] !== undefined) ? args[0] : ''
            ]
        },
        cwd: wsRoot
    };
    return options;
}
function createProcessTaskConfig(processType, command, args, cwd) {
    if (cwd === void 0) { cwd = wsRoot; }
    var options = {
        label: 'test task',
        type: processType,
        command: command,
        args: args,
        windows: {
            command: 'cmd.exe',
            args: [
                '/c',
                command,
                (args[0] !== undefined) ? args[0] : ''
            ]
        },
        cwd: cwd
    };
    return options;
}
function createProcessTaskConfig2(processType, command, args) {
    return {
        label: 'test task',
        type: processType,
        command: command,
        args: args,
        cwd: wsRoot
    };
}
function createTaskConfigTaskLongRunning(processType) {
    return {
        label: '[Task] long running test task (~300s)',
        type: processType,
        cwd: wsRoot,
        command: commandLongRunning,
        args: [],
        windows: {
            command: 'cmd.exe',
            args: [
                '/c',
                commandLongRunningWindows
            ]
        }
    };
}
function checkSuccessfullProcessExit(taskInfo, taskWatcher) {
    var p = new Promise(function (resolve, reject) {
        var toDispose = taskWatcher.onTaskExit(function (event) {
            if (event.taskId === taskInfo.taskId && event.code === 0) {
                toDispose.dispose();
                resolve();
            }
        });
    });
    return p;
}
//# sourceMappingURL=task-server.slow-spec.js.map