/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import { Widget } from '@phosphor/widgets';
import { ILogger, Emitter, Event, ContributionProvider, MaybePromise } from '../common';
export declare const WidgetFactory: unique symbol;
/**
 * `OpenHandler` should be implemented to provide a new opener.
 */
export interface WidgetFactory {
    readonly id: string;
    /**
     * Creates a widget and attaches it to the shell
     * The options need to be serializable JSON data.
     */
    createWidget(options?: any): MaybePromise<Widget>;
}
export interface WidgetConstructionOptions {
    /**
     * the id of the widget factory to use.
     */
    factoryId: string;
    options?: any;
}
export interface DidCreateWidgetEvent {
    readonly widget: Widget;
    readonly factoryId: string;
}
/**
 * Creates and manages widgets.
 */
export declare class WidgetManager {
    protected _cachedFactories: Map<string, WidgetFactory>;
    protected readonly widgets: Map<string, Widget>;
    protected readonly widgetPromises: Map<string, MaybePromise<Widget>>;
    protected readonly pendingWidgetPromises: Map<string, MaybePromise<Widget>>;
    protected readonly factoryProvider: ContributionProvider<WidgetFactory>;
    protected readonly logger: ILogger;
    protected readonly onDidCreateWidgetEmitter: Emitter<DidCreateWidgetEvent>;
    readonly onDidCreateWidget: Event<DidCreateWidgetEvent>;
    getWidgets(factoryId: string): Widget[];
    tryGetWidget<T extends Widget>(factoryId: string, options?: any): T | undefined;
    /**
     * return the widget for the given description
     */
    getWidget<T extends Widget>(factoryId: string, options?: any): Promise<T | undefined>;
    protected doGetWidget<T extends Widget>(key: string): MaybePromise<T> | undefined;
    getOrCreateWidget<T extends Widget>(factoryId: string, options?: any): Promise<T>;
    getDescription(widget: Widget): WidgetConstructionOptions | undefined;
    protected toKey(options: WidgetConstructionOptions): string;
    protected fromKey(key: string): WidgetConstructionOptions;
    protected readonly factories: Map<string, WidgetFactory>;
}
//# sourceMappingURL=widget-manager.d.ts.map