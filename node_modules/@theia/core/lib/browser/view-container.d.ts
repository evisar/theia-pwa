/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import * as React from 'react';
import { ReactWidget, Widget, Message } from './widgets';
import { Disposable } from '../common/disposable';
export declare class ViewContainer extends ReactWidget {
    protected readonly widgets: Set<Widget>;
    constructor();
    protected render(): React.ReactNode;
    protected renderPart(widget: Widget): React.ReactNode;
    addWidget(widget: Widget): Disposable;
    removeWidget(widget: Widget): boolean;
    protected onResize(msg: Widget.ResizeMessage): void;
    protected onUpdateRequest(msg: Message): void;
    onActivateRequest(msg: Message): void;
}
export declare class ViewContainerPart extends React.Component<ViewContainerPart.Props, ViewContainerPart.State> {
    constructor(props: ViewContainerPart.Props);
    protected detaching: boolean;
    componentWillUnmount(): void;
    render(): React.ReactNode;
    protected renderToolbar(): React.ReactNode;
    protected renderToolbarElement(key: number, element: ViewContainerPartToolbarElement): React.ReactNode;
    protected toggle: () => void;
    protected ref: HTMLElement | undefined;
    protected setRef: (ref: HTMLElement | null) => void;
}
export declare namespace ViewContainerPart {
    interface Props {
        widget: Widget;
    }
    interface State {
        expanded: boolean;
    }
}
export interface ViewContainerPartToolbarElement {
    /** default true */
    readonly enabled?: boolean;
    readonly className: string;
    readonly tooltip: string;
    execute(): any;
}
export interface ViewContainerPartWidget extends Widget {
    readonly toolbarElements: ViewContainerPartToolbarElement[];
}
export declare namespace ViewContainerPartWidget {
    function is(widget: Widget | undefined): widget is ViewContainerPartWidget;
}
//# sourceMappingURL=view-container.d.ts.map