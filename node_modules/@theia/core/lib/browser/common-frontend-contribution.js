"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var menu_1 = require("../common/menu");
var uri_command_handler_1 = require("../common/uri-command-handler");
var selection_service_1 = require("../common/selection-service");
var message_service_1 = require("../common/message-service");
var opener_service_1 = require("../browser/opener-service");
var application_shell_1 = require("./shell/application-shell");
var tab_bars_1 = require("./shell/tab-bars");
var about_dialog_1 = require("./about-dialog");
var browser = require("./browser");
var CommonMenus;
(function (CommonMenus) {
    CommonMenus.FILE = __spread(menu_1.MAIN_MENU_BAR, ['1_file']);
    CommonMenus.FILE_NEW = __spread(CommonMenus.FILE, ['1_new']);
    CommonMenus.FILE_OPEN = __spread(CommonMenus.FILE, ['2_open']);
    CommonMenus.FILE_SAVE = __spread(CommonMenus.FILE, ['3_save']);
    CommonMenus.FILE_AUTOSAVE = __spread(CommonMenus.FILE, ['4_autosave']);
    CommonMenus.FILE_SETTINGS = __spread(CommonMenus.FILE, ['5_settings']);
    CommonMenus.FILE_SETTINGS_SUBMENU = __spread(CommonMenus.FILE_SETTINGS, ['1_settings_submenu']);
    CommonMenus.FILE_SETTINGS_SUBMENU_OPEN = __spread(CommonMenus.FILE_SETTINGS_SUBMENU, ['1_settings_submenu_open']);
    CommonMenus.FILE_SETTINGS_SUBMENU_THEME = __spread(CommonMenus.FILE_SETTINGS_SUBMENU, ['2_settings_submenu_theme']);
    CommonMenus.FILE_CLOSE = __spread(CommonMenus.FILE, ['6_close']);
    CommonMenus.EDIT = __spread(menu_1.MAIN_MENU_BAR, ['2_edit']);
    CommonMenus.EDIT_UNDO = __spread(CommonMenus.EDIT, ['1_undo']);
    CommonMenus.EDIT_CLIPBOARD = __spread(CommonMenus.EDIT, ['2_clipboard']);
    CommonMenus.EDIT_FIND = __spread(CommonMenus.EDIT, ['3_find']);
    CommonMenus.VIEW = __spread(menu_1.MAIN_MENU_BAR, ['4_view']);
    CommonMenus.VIEW_PRIMARY = __spread(CommonMenus.VIEW, ['0_primary']);
    CommonMenus.VIEW_VIEWS = __spread(CommonMenus.VIEW, ['1_views']);
    CommonMenus.VIEW_LAYOUT = __spread(CommonMenus.VIEW, ['2_layout']);
    // last menu item
    CommonMenus.HELP = __spread(menu_1.MAIN_MENU_BAR, ['9_help']);
})(CommonMenus = exports.CommonMenus || (exports.CommonMenus = {}));
var CommonCommands;
(function (CommonCommands) {
    var FILE_CATEGORY = 'File';
    var VIEW_CATEGORY = 'View';
    CommonCommands.OPEN = {
        id: 'core.open',
        category: FILE_CATEGORY,
        label: 'Open',
    };
    CommonCommands.CUT = {
        id: 'core.cut',
        label: 'Cut'
    };
    CommonCommands.COPY = {
        id: 'core.copy',
        label: 'Copy'
    };
    CommonCommands.PASTE = {
        id: 'core.paste',
        label: 'Paste'
    };
    CommonCommands.UNDO = {
        id: 'core.undo',
        label: 'Undo'
    };
    CommonCommands.REDO = {
        id: 'core.redo',
        label: 'Redo'
    };
    CommonCommands.FIND = {
        id: 'core.find',
        label: 'Find'
    };
    CommonCommands.REPLACE = {
        id: 'core.replace',
        label: 'Replace'
    };
    CommonCommands.NEXT_TAB = {
        id: 'core.nextTab',
        category: VIEW_CATEGORY,
        label: 'Switch to Next Tab'
    };
    CommonCommands.PREVIOUS_TAB = {
        id: 'core.previousTab',
        category: VIEW_CATEGORY,
        label: 'Switch to Previous Tab'
    };
    CommonCommands.CLOSE_TAB = {
        id: 'core.close.tab',
        category: VIEW_CATEGORY,
        label: 'Close Tab'
    };
    CommonCommands.CLOSE_OTHER_TABS = {
        id: 'core.close.other.tabs',
        category: VIEW_CATEGORY,
        label: 'Close Other Tabs'
    };
    CommonCommands.CLOSE_RIGHT_TABS = {
        id: 'core.close.right.tabs',
        category: VIEW_CATEGORY,
        label: 'Close Tabs to the Right'
    };
    CommonCommands.CLOSE_ALL_TABS = {
        id: 'core.close.all.tabs',
        category: VIEW_CATEGORY,
        label: 'Close All Tabs'
    };
    CommonCommands.COLLAPSE_PANEL = {
        id: 'core.collapse.tab',
        category: VIEW_CATEGORY,
        label: 'Collapse Side Panel'
    };
    CommonCommands.COLLAPSE_ALL_PANELS = {
        id: 'core.collapse.all.tabs',
        category: VIEW_CATEGORY,
        label: 'Collapse All Side Panels'
    };
    CommonCommands.TOGGLE_BOTTOM_PANEL = {
        id: 'core.toggle.bottom.panel',
        category: VIEW_CATEGORY,
        label: 'Toggle Bottom Panel'
    };
    CommonCommands.SAVE = {
        id: 'core.save',
        category: FILE_CATEGORY,
        label: 'Save',
    };
    CommonCommands.SAVE_ALL = {
        id: 'core.saveAll',
        category: FILE_CATEGORY,
        label: 'Save All',
    };
    CommonCommands.AUTO_SAVE = {
        id: 'textEditor.commands.autosave',
        category: FILE_CATEGORY,
        label: 'Auto Save',
    };
    CommonCommands.QUIT = {
        id: 'core.quit',
        label: 'Quit'
    };
    CommonCommands.ABOUT_COMMAND = {
        id: 'core.about',
        label: 'About'
    };
    CommonCommands.OPEN_PREFERENCES = {
        id: 'preferences:open',
        category: 'Settings',
        label: 'Open Preferences',
    };
})(CommonCommands = exports.CommonCommands || (exports.CommonCommands = {}));
exports.supportCut = browser.isNative || document.queryCommandSupported('cut');
exports.supportCopy = browser.isNative || document.queryCommandSupported('copy');
// Chrome incorrectly returns true for document.queryCommandSupported('paste')
// when the paste feature is available but the calling script has insufficient
// privileges to actually perform the action
exports.supportPaste = browser.isNative || (!browser.isChrome && document.queryCommandSupported('paste'));
var CommonFrontendContribution = /** @class */ (function () {
    function CommonFrontendContribution(shell, selectionService, messageService, openerService, aboutDialog) {
        this.shell = shell;
        this.selectionService = selectionService;
        this.messageService = messageService;
        this.openerService = openerService;
        this.aboutDialog = aboutDialog;
    }
    CommonFrontendContribution.prototype.registerMenus = function (registry) {
        registry.registerSubmenu(CommonMenus.FILE, 'File');
        registry.registerSubmenu(CommonMenus.EDIT, 'Edit');
        registry.registerSubmenu(CommonMenus.VIEW, 'View');
        registry.registerSubmenu(CommonMenus.HELP, 'Help');
        registry.registerMenuAction(CommonMenus.FILE_SAVE, {
            commandId: CommonCommands.SAVE.id
        });
        registry.registerMenuAction(CommonMenus.FILE_SAVE, {
            commandId: CommonCommands.SAVE_ALL.id
        });
        registry.registerMenuAction(CommonMenus.FILE_AUTOSAVE, {
            commandId: CommonCommands.AUTO_SAVE.id
        });
        registry.registerSubmenu(CommonMenus.FILE_SETTINGS_SUBMENU, 'Settings');
        registry.registerMenuAction(CommonMenus.EDIT_UNDO, {
            commandId: CommonCommands.UNDO.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_UNDO, {
            commandId: CommonCommands.REDO.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_FIND, {
            commandId: CommonCommands.FIND.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_FIND, {
            commandId: CommonCommands.REPLACE.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.CUT.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.COPY.id,
            order: '1'
        });
        registry.registerMenuAction(CommonMenus.EDIT_CLIPBOARD, {
            commandId: CommonCommands.PASTE.id,
            order: '2'
        });
        registry.registerMenuAction(CommonMenus.VIEW_LAYOUT, {
            commandId: CommonCommands.TOGGLE_BOTTOM_PANEL.id,
            order: '0'
        });
        registry.registerMenuAction(CommonMenus.VIEW_LAYOUT, {
            commandId: CommonCommands.COLLAPSE_ALL_PANELS.id,
            order: '1'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_MENU, {
            commandId: CommonCommands.CLOSE_TAB.id,
            label: 'Close',
            order: '0'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_MENU, {
            commandId: CommonCommands.CLOSE_OTHER_TABS.id,
            label: 'Close Others',
            order: '1'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_MENU, {
            commandId: CommonCommands.CLOSE_RIGHT_TABS.id,
            label: 'Close to the Right',
            order: '2'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_MENU, {
            commandId: CommonCommands.CLOSE_ALL_TABS.id,
            label: 'Close All',
            order: '3'
        });
        registry.registerMenuAction(tab_bars_1.SHELL_TABBAR_CONTEXT_MENU, {
            commandId: CommonCommands.COLLAPSE_PANEL.id,
            label: 'Collapse',
            order: '4'
        });
        registry.registerMenuAction(CommonMenus.HELP, {
            commandId: CommonCommands.ABOUT_COMMAND.id,
            label: 'About',
            order: '9'
        });
    };
    CommonFrontendContribution.prototype.registerCommands = function (commandRegistry) {
        var _this = this;
        commandRegistry.registerCommand(CommonCommands.OPEN, new uri_command_handler_1.UriAwareCommandHandler(this.selectionService, {
            execute: function (uris) { return uris.map(function (uri) { return opener_service_1.open(_this.openerService, uri); }); },
        }, { multi: true }));
        commandRegistry.registerCommand(CommonCommands.CUT, {
            execute: function () {
                if (exports.supportCut) {
                    document.execCommand('cut');
                }
                else {
                    _this.messageService.warn("Please use the browser's cut command or shortcut.");
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.COPY, {
            execute: function () {
                if (exports.supportCopy) {
                    document.execCommand('copy');
                }
                else {
                    _this.messageService.warn("Please use the browser's copy command or shortcut.");
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.PASTE, {
            execute: function () {
                if (exports.supportPaste) {
                    document.execCommand('paste');
                }
                else {
                    _this.messageService.warn("Please use the browser's paste command or shortcut.");
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.UNDO);
        commandRegistry.registerCommand(CommonCommands.REDO);
        commandRegistry.registerCommand(CommonCommands.FIND);
        commandRegistry.registerCommand(CommonCommands.REPLACE);
        commandRegistry.registerCommand(CommonCommands.NEXT_TAB, {
            isEnabled: function () { return _this.shell.currentTabBar !== undefined; },
            execute: function () { return _this.shell.activateNextTab(); }
        });
        commandRegistry.registerCommand(CommonCommands.PREVIOUS_TAB, {
            isEnabled: function () { return _this.shell.currentTabBar !== undefined; },
            execute: function () { return _this.shell.activatePreviousTab(); }
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_TAB, {
            isEnabled: function () { return _this.shell.currentTabBar !== undefined; },
            execute: function () {
                var tabBar = _this.shell.currentTabBar;
                var currentTitle = tabBar.currentTitle;
                _this.shell.closeTabs(tabBar, function (title, index) { return title === currentTitle; });
            }
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_OTHER_TABS, {
            isEnabled: function () {
                var tabBar = _this.shell.currentTabBar;
                if (tabBar) {
                    return tabBar.titles.length > 1;
                }
                return false;
            },
            execute: function () {
                var tabBar = _this.shell.currentTabBar;
                var currentTitle = tabBar.currentTitle;
                _this.shell.closeTabs(_this.shell.currentTabArea, function (title, index) { return title !== currentTitle; });
            }
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_RIGHT_TABS, {
            isEnabled: function () {
                var tabBar = _this.shell.currentTabBar;
                if (tabBar) {
                    return tabBar.currentIndex < tabBar.titles.length - 1;
                }
                return false;
            },
            isVisible: function () {
                var area = _this.shell.currentTabArea;
                return area !== 'left' && area !== 'right';
            },
            execute: function () {
                var tabBar = _this.shell.currentTabBar;
                var currentIndex = tabBar.currentIndex;
                _this.shell.closeTabs(tabBar, function (title, index) { return index > currentIndex; });
            }
        });
        commandRegistry.registerCommand(CommonCommands.CLOSE_ALL_TABS, {
            isEnabled: function () { return _this.shell.currentTabBar !== undefined; },
            execute: function () { return _this.shell.closeTabs(_this.shell.currentTabArea); }
        });
        commandRegistry.registerCommand(CommonCommands.COLLAPSE_PANEL, {
            isEnabled: function () { return application_shell_1.ApplicationShell.isSideArea(_this.shell.currentTabArea); },
            isVisible: function () { return application_shell_1.ApplicationShell.isSideArea(_this.shell.currentTabArea); },
            execute: function () {
                var currentArea = _this.shell.currentTabArea;
                if (application_shell_1.ApplicationShell.isSideArea(currentArea)) {
                    _this.shell.collapsePanel(currentArea);
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.COLLAPSE_ALL_PANELS, {
            execute: function () {
                _this.shell.collapsePanel('left');
                _this.shell.collapsePanel('right');
                _this.shell.collapsePanel('bottom');
            }
        });
        commandRegistry.registerCommand(CommonCommands.TOGGLE_BOTTOM_PANEL, {
            isEnabled: function () { return _this.shell.getWidgets('bottom').length > 0; },
            execute: function () {
                if (_this.shell.isExpanded('bottom')) {
                    _this.shell.collapsePanel('bottom');
                }
                else {
                    _this.shell.expandPanel('bottom');
                }
            }
        });
        commandRegistry.registerCommand(CommonCommands.SAVE, {
            execute: function () { return _this.shell.save(); }
        });
        commandRegistry.registerCommand(CommonCommands.SAVE_ALL, {
            execute: function () { return _this.shell.saveAll(); }
        });
        commandRegistry.registerCommand(CommonCommands.ABOUT_COMMAND, {
            execute: function () { return _this.openAbout(); }
        });
    };
    CommonFrontendContribution.prototype.registerKeybindings = function (registry) {
        if (exports.supportCut) {
            registry.registerKeybinding({
                command: CommonCommands.CUT.id,
                keybinding: 'ctrlcmd+x'
            });
        }
        if (exports.supportCopy) {
            registry.registerKeybinding({
                command: CommonCommands.COPY.id,
                keybinding: 'ctrlcmd+c'
            });
        }
        if (exports.supportPaste) {
            registry.registerKeybinding({
                command: CommonCommands.PASTE.id,
                keybinding: 'ctrlcmd+v'
            });
        }
        registry.registerKeybindings(
        // Edition
        {
            command: CommonCommands.UNDO.id,
            keybinding: 'ctrlcmd+z'
        }, {
            command: CommonCommands.REDO.id,
            keybinding: 'ctrlcmd+shift+z'
        }, {
            command: CommonCommands.FIND.id,
            keybinding: 'ctrlcmd+f'
        }, {
            command: CommonCommands.REPLACE.id,
            keybinding: 'ctrlcmd+alt+f'
        }, 
        // Tabs
        {
            command: CommonCommands.NEXT_TAB.id,
            keybinding: 'ctrlcmd+tab'
        }, {
            command: CommonCommands.NEXT_TAB.id,
            keybinding: 'ctrlcmd+alt+d'
        }, {
            command: CommonCommands.PREVIOUS_TAB.id,
            keybinding: 'ctrlcmd+shift+tab'
        }, {
            command: CommonCommands.PREVIOUS_TAB.id,
            keybinding: 'ctrlcmd+alt+a'
        }, {
            command: CommonCommands.CLOSE_TAB.id,
            keybinding: 'alt+w'
        }, {
            command: CommonCommands.CLOSE_OTHER_TABS.id,
            keybinding: 'ctrlcmd+alt+t'
        }, {
            command: CommonCommands.CLOSE_ALL_TABS.id,
            keybinding: 'alt+shift+w'
        }, 
        // Panels
        {
            command: CommonCommands.COLLAPSE_PANEL.id,
            keybinding: 'alt+c'
        }, {
            command: CommonCommands.TOGGLE_BOTTOM_PANEL.id,
            keybinding: 'ctrlcmd+j',
        }, {
            command: CommonCommands.COLLAPSE_ALL_PANELS.id,
            keybinding: 'alt+shift+c',
        }, 
        // Saving
        {
            command: CommonCommands.SAVE.id,
            keybinding: 'ctrlcmd+s'
        }, {
            command: CommonCommands.SAVE_ALL.id,
            keybinding: 'ctrlcmd+alt+s'
        });
    };
    CommonFrontendContribution.prototype.openAbout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.aboutDialog.open();
                return [2 /*return*/];
            });
        });
    };
    CommonFrontendContribution.prototype.onWillStop = function () {
        var _this = this;
        if (this.shell.canSaveAll()) {
            setTimeout(function () {
                _this.messageService.info('Some documents should be saved, data will be lost otherwise.');
            });
            return true;
        }
    };
    CommonFrontendContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(application_shell_1.ApplicationShell)),
        __param(1, inversify_1.inject(selection_service_1.SelectionService)),
        __param(2, inversify_1.inject(message_service_1.MessageService)),
        __param(3, inversify_1.inject(opener_service_1.OpenerService)),
        __param(4, inversify_1.inject(about_dialog_1.AboutDialog)),
        __metadata("design:paramtypes", [application_shell_1.ApplicationShell,
            selection_service_1.SelectionService,
            message_service_1.MessageService, Object, about_dialog_1.AboutDialog])
    ], CommonFrontendContribution);
    return CommonFrontendContribution;
}());
exports.CommonFrontendContribution = CommonFrontendContribution;
//# sourceMappingURL=common-frontend-contribution.js.map