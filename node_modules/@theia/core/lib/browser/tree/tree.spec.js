"use strict";
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var tree_1 = require("./tree");
describe('Tree', function () {
    it('addChildren', function () {
        assertTreeNode("{\n  \"id\": \"parent\",\n  \"name\": \"parent\",\n  \"children\": [\n    {\n      \"id\": \"foo\",\n      \"name\": \"foo\",\n      \"parent\": \"parent\",\n      \"nextSibling\": \"bar\"\n    },\n    {\n      \"id\": \"bar\",\n      \"name\": \"bar\",\n      \"parent\": \"parent\",\n      \"previousSibling\": \"foo\",\n      \"nextSibling\": \"baz\"\n    },\n    {\n      \"id\": \"baz\",\n      \"name\": \"baz\",\n      \"parent\": \"parent\",\n      \"previousSibling\": \"bar\"\n    }\n  ]\n}", getNode());
    });
    it('removeChild - first', function () {
        var node = getNode();
        tree_1.CompositeTreeNode.removeChild(node, node.children[0]);
        assertTreeNode("{\n  \"id\": \"parent\",\n  \"name\": \"parent\",\n  \"children\": [\n    {\n      \"id\": \"bar\",\n      \"name\": \"bar\",\n      \"parent\": \"parent\",\n      \"nextSibling\": \"baz\"\n    },\n    {\n      \"id\": \"baz\",\n      \"name\": \"baz\",\n      \"parent\": \"parent\",\n      \"previousSibling\": \"bar\"\n    }\n  ]\n}", node);
    });
    it('removeChild - second', function () {
        var node = getNode();
        tree_1.CompositeTreeNode.removeChild(node, node.children[1]);
        assertTreeNode("{\n  \"id\": \"parent\",\n  \"name\": \"parent\",\n  \"children\": [\n    {\n      \"id\": \"foo\",\n      \"name\": \"foo\",\n      \"parent\": \"parent\",\n      \"nextSibling\": \"baz\"\n    },\n    {\n      \"id\": \"baz\",\n      \"name\": \"baz\",\n      \"parent\": \"parent\",\n      \"previousSibling\": \"foo\"\n    }\n  ]\n}", node);
    });
    it('removeChild - thrid', function () {
        var node = getNode();
        tree_1.CompositeTreeNode.removeChild(node, node.children[2]);
        assertTreeNode("{\n  \"id\": \"parent\",\n  \"name\": \"parent\",\n  \"children\": [\n    {\n      \"id\": \"foo\",\n      \"name\": \"foo\",\n      \"parent\": \"parent\",\n      \"nextSibling\": \"bar\"\n    },\n    {\n      \"id\": \"bar\",\n      \"name\": \"bar\",\n      \"parent\": \"parent\",\n      \"previousSibling\": \"foo\"\n    }\n  ]\n}", node);
    });
    function getNode() {
        return tree_1.CompositeTreeNode.addChildren({
            id: 'parent',
            name: 'parent',
            children: [],
            parent: undefined
        }, [{
                id: 'foo',
                name: 'foo',
                parent: undefined
            }, {
                id: 'bar',
                name: 'bar',
                parent: undefined
            }, {
                id: 'baz',
                name: 'baz',
                parent: undefined
            }]);
    }
    function assertTreeNode(expectation, node) {
        // tslint:disable-next-line:no-any
        assert.deepEqual(expectation, JSON.stringify(node, function (key, value) {
            if (key === 'parent' || key === 'previousSibling' || key === 'nextSibling') {
                return value && value.id;
            }
            return value;
        }, 2));
    }
});
//# sourceMappingURL=tree.spec.js.map