"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var command_1 = require("../common/command");
var keys_1 = require("./keys");
var contribution_provider_1 = require("../common/contribution-provider");
var logger_1 = require("../common/logger");
var status_bar_1 = require("./status-bar/status-bar");
var os_1 = require("../common/os");
var KeybindingScope;
(function (KeybindingScope) {
    KeybindingScope[KeybindingScope["DEFAULT"] = 0] = "DEFAULT";
    KeybindingScope[KeybindingScope["USER"] = 1] = "USER";
    KeybindingScope[KeybindingScope["WORKSPACE"] = 2] = "WORKSPACE";
    KeybindingScope[KeybindingScope["END"] = 3] = "END";
})(KeybindingScope = exports.KeybindingScope || (exports.KeybindingScope = {}));
(function (KeybindingScope) {
    KeybindingScope.length = KeybindingScope.END - KeybindingScope.DEFAULT;
})(KeybindingScope = exports.KeybindingScope || (exports.KeybindingScope = {}));
var Keybinding;
(function (Keybinding) {
    /**
     * Returns with the string representation of the binding.
     * Any additional properties which are not described on
     * the `Keybinding` API will be ignored.
     *
     * @param binding the binding to stringify.
     */
    function stringify(binding) {
        var copy = {
            command: binding.command,
            keybinding: binding.keybinding,
            context: binding.context
        };
        return JSON.stringify(copy);
    }
    Keybinding.stringify = stringify;
    /* Return a user visible representation of a keybinding.  */
    function acceleratorFor(keybinding, separator) {
        if (separator === void 0) { separator = ' '; }
        var keyCodesString = keybinding.keybinding.split(' ');
        return keys_1.KeySequence.acceleratorFor(keyCodesString.map(function (k) { return keys_1.KeyCode.parse(k); }), separator);
    }
    Keybinding.acceleratorFor = acceleratorFor;
    /* Determine whether object is a KeyBinding */
    // tslint:disable-next-line:no-any
    function is(arg) {
        return !!arg && arg === Object(arg) && 'command' in arg && 'keybinding' in arg;
    }
    Keybinding.is = is;
})(Keybinding = exports.Keybinding || (exports.Keybinding = {}));
exports.KeybindingContribution = Symbol('KeybindingContribution');
exports.KeybindingContext = Symbol('KeybindingContext');
var KeybindingContexts;
(function (KeybindingContexts) {
    KeybindingContexts.NOOP_CONTEXT = {
        id: 'noop.keybinding.context',
        isEnabled: function () { return true; }
    };
    KeybindingContexts.DEFAULT_CONTEXT = {
        id: 'default.keybinding.context',
        isEnabled: function () { return false; }
    };
})(KeybindingContexts = exports.KeybindingContexts || (exports.KeybindingContexts = {}));
var KeybindingRegistry = /** @class */ (function () {
    function KeybindingRegistry() {
        this.keySequence = [];
        this.contexts = {};
        this.keymaps = __spread(Array(KeybindingScope.length)).map(function () { return []; });
    }
    KeybindingRegistry_1 = KeybindingRegistry;
    KeybindingRegistry.prototype.onStart = function () {
        var e_1, _a;
        this.registerContext(KeybindingContexts.NOOP_CONTEXT);
        this.registerContext(KeybindingContexts.DEFAULT_CONTEXT);
        this.registerContext.apply(this, __spread(this.contextProvider.getContributions()));
        try {
            for (var _b = __values(this.contributions.getContributions()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var contribution = _c.value;
                contribution.registerKeybindings(this);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Registers the keybinding context arguments into the application. Fails when an already registered
     * context is being registered.
     *
     * @param contexts the keybinding contexts to register into the application.
     */
    KeybindingRegistry.prototype.registerContext = function () {
        var contexts = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            contexts[_i] = arguments[_i];
        }
        var e_2, _a;
        try {
            for (var contexts_1 = __values(contexts), contexts_1_1 = contexts_1.next(); !contexts_1_1.done; contexts_1_1 = contexts_1.next()) {
                var context_1 = contexts_1_1.value;
                var id = context_1.id;
                if (this.contexts[id]) {
                    this.logger.error("A keybinding context with ID " + id + " is already registered.");
                }
                else {
                    this.contexts[id] = context_1;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (contexts_1_1 && !contexts_1_1.done && (_a = contexts_1.return)) _a.call(contexts_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * Register a default keybinding to the registry.
     *
     * @param binding
     */
    KeybindingRegistry.prototype.registerKeybinding = function (binding) {
        this.doRegisterKeybinding(binding, KeybindingScope.DEFAULT);
    };
    /**
     * Register default keybindings to the registry
     *
     * @param bindings
     */
    KeybindingRegistry.prototype.registerKeybindings = function () {
        var bindings = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bindings[_i] = arguments[_i];
        }
        this.doRegisterKeybindings(bindings, KeybindingScope.DEFAULT);
    };
    KeybindingRegistry.prototype.unregisterKeybinding = function (keyOrBinding) {
        var key = Keybinding.is(keyOrBinding) ? keyOrBinding.keybinding : keyOrBinding;
        var keymap = this.keymaps[KeybindingScope.DEFAULT];
        var bindings = keymap.filter(function (el) { return el.keybinding === key; });
        bindings.forEach(function (binding) {
            var idx = keymap.indexOf(binding);
            if (idx >= 0) {
                keymap.splice(idx, 1);
            }
        });
    };
    KeybindingRegistry.prototype.doRegisterKeybindings = function (bindings, scope) {
        if (scope === void 0) { scope = KeybindingScope.DEFAULT; }
        var e_3, _a;
        try {
            for (var bindings_1 = __values(bindings), bindings_1_1 = bindings_1.next(); !bindings_1_1.done; bindings_1_1 = bindings_1.next()) {
                var binding = bindings_1_1.value;
                this.doRegisterKeybinding(binding, scope);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (bindings_1_1 && !bindings_1_1.done && (_a = bindings_1.return)) _a.call(bindings_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    KeybindingRegistry.prototype.doRegisterKeybinding = function (binding, scope) {
        if (scope === void 0) { scope = KeybindingScope.DEFAULT; }
        try {
            if (this.containsKeybinding(this.keymaps[scope], binding)) {
                throw new Error("\"" + binding.keybinding + "\" is in collision with something else [scope:" + scope + "]");
            }
            this.keymaps[scope].push(binding);
        }
        catch (error) {
            this.logger.warn("Could not register keybinding:\n  " + Keybinding.stringify(binding) + "\n" + error);
        }
    };
    /**
     * Checks for keySequence collisions in a list of Keybindings
     *
     * @param bindings the keybinding reference list
     * @param binding the keybinding to test collisions for
     */
    KeybindingRegistry.prototype.containsKeybinding = function (bindings, binding) {
        var collisions = this.getKeySequenceCollisions(bindings, keys_1.KeySequence.parse(this.getCurrentPlatformKeybinding(binding.keybinding))).filter(function (b) { return b.context === binding.context; });
        if (collisions.full.length > 0) {
            this.logger.warn('Collided keybinding is ignored; ', Keybinding.stringify(binding), ' collided with ', collisions.full.map(function (b) { return Keybinding.stringify(b); }).join(', '));
            return true;
        }
        if (collisions.partial.length > 0) {
            this.logger.warn('Shadowing keybinding is ignored; ', Keybinding.stringify(binding), ' shadows ', collisions.partial.map(function (b) { return Keybinding.stringify(b); }).join(', '));
            return true;
        }
        if (collisions.shadow.length > 0) {
            this.logger.warn('Shadowed keybinding is ignored; ', Keybinding.stringify(binding), ' would be shadowed by ', collisions.shadow.map(function (b) { return Keybinding.stringify(b); }).join(', '));
            return true;
        }
        return false;
    };
    KeybindingRegistry.prototype.containsKeybindingInScope = function (binding, scope) {
        if (scope === void 0) { scope = KeybindingScope.USER; }
        return this.containsKeybinding(this.keymaps[scope], binding);
    };
    /**
     * Converts special `ctrlcmd` modifier back to `ctrl` for non-OSX users in a keybinding string.
     * (`ctrlcmd` is mapped to the same actual key as `ctrl` under non-OSX users)
     *
     * @param keybinding The keybinding string to convert.
     */
    KeybindingRegistry.prototype.getCurrentPlatformKeybinding = function (keybinding) {
        return os_1.isOSX ? keybinding : keybinding.replace(/\bctrlcmd\b/, 'ctrl');
    };
    /**
     * Finds collisions for a binding inside a list of bindings (error-free)
     *
     * @param bindings the reference bindings
     * @param binding the binding to match
     */
    KeybindingRegistry.prototype.getKeybindingCollisions = function (bindings, binding) {
        var result = new KeybindingRegistry_1.KeybindingsResult();
        try {
            var keySequence = keys_1.KeySequence.parse(this.getCurrentPlatformKeybinding(binding.keybinding));
            result.merge(this.getKeySequenceCollisions(bindings, keySequence));
        }
        catch (error) {
            this.logger.warn(error);
        }
        return result;
    };
    /**
     * Finds collisions for a key sequence inside a list of bindings (error-free)
     *
     * @param bindings the reference bindings
     * @param keySequence the sequence to match
     */
    KeybindingRegistry.prototype.getKeySequenceCollisions = function (bindings, keySequence) {
        var e_4, _a;
        var result = new KeybindingRegistry_1.KeybindingsResult();
        /**
         * compare the given KeySequence with a particular binding
         */
        function compareBinding(candidate, binding) {
            var bindingKeySequence = keys_1.KeySequence.parse(binding.keybinding);
            var compareResult = keys_1.KeySequence.compare(candidate, bindingKeySequence);
            switch (compareResult) {
                case keys_1.KeySequence.CompareResult.FULL: {
                    result.full.push(binding);
                    break;
                }
                case keys_1.KeySequence.CompareResult.PARTIAL: {
                    result.partial.push(binding);
                    break;
                }
                case keys_1.KeySequence.CompareResult.SHADOW: {
                    result.shadow.push(binding);
                    break;
                }
                default: {
                    // no match. Let's try with a US keborad normalized version if there is one.
                    var normalizedUs = candidate.map(function (k) { return k.normalizeToUsLayout(); });
                    if (normalizedUs.indexOf(undefined) === -1) {
                        compareBinding(normalizedUs, binding);
                    }
                    break;
                }
            }
        }
        try {
            for (var bindings_2 = __values(bindings), bindings_2_1 = bindings_2.next(); !bindings_2_1.done; bindings_2_1 = bindings_2.next()) {
                var registeredBinding = bindings_2_1.value;
                try {
                    compareBinding(keySequence, registeredBinding);
                }
                catch (error) {
                    this.logger.warn(error);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (bindings_2_1 && !bindings_2_1.done && (_a = bindings_2.return)) _a.call(bindings_2);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
    };
    /**
     * Get the lists of keybindings matching fully or partially matching a KeySequence.
     * The lists are sorted by priority (see #sortKeybindingsByPriority).
     *
     * @param keySequence The key sequence for which we are looking for keybindings.
     */
    KeybindingRegistry.prototype.getKeybindingsForKeySequence = function (keySequence) {
        var _this = this;
        var result = new KeybindingRegistry_1.KeybindingsResult();
        for (var scope = KeybindingScope.END; --scope >= KeybindingScope.DEFAULT;) {
            var matches = this.getKeySequenceCollisions(this.keymaps[scope], keySequence);
            matches.full = matches.full.filter(function (binding) { return _this.getKeybindingCollisions(result.full, binding).full.length === 0; });
            matches.partial = matches.partial.filter(function (binding) { return _this.getKeybindingCollisions(result.partial, binding).partial.length === 0; });
            result.merge(matches);
        }
        this.sortKeybindingsByPriority(result.full);
        this.sortKeybindingsByPriority(result.partial);
        return result;
    };
    /**
     * Get the keybindings associated to commandId.
     *
     * @param commandId The ID of the command for which we are looking for keybindings.
     */
    KeybindingRegistry.prototype.getKeybindingsForCommand = function (commandId) {
        var _this = this;
        var result = [];
        var _loop_1 = function (scope) {
            this_1.keymaps[scope].forEach(function (binding) {
                var command = _this.commandRegistry.getCommand(binding.command);
                if (command) {
                    if (command.id === commandId) {
                        result.push(__assign({}, binding, { scope: scope }));
                    }
                }
            });
            if (result.length > 0) {
                return { value: result };
            }
        };
        var this_1 = this;
        for (var scope = KeybindingScope.END - 1; scope >= KeybindingScope.DEFAULT; scope--) {
            var state_1 = _loop_1(scope);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return result;
    };
    /**
     * Returns a list of keybindings for a command in a specific scope
     * @param scope specific scope to look for
     * @param commandId unique id of the command
     */
    KeybindingRegistry.prototype.getScopedKeybindingsForCommand = function (scope, commandId) {
        var _this = this;
        var result = [];
        if (scope >= KeybindingScope.END) {
            return [];
        }
        this.keymaps[scope].forEach(function (binding) {
            var command = _this.commandRegistry.getCommand(binding.command);
            if (command && command.id === commandId) {
                result.push(binding);
            }
        });
        return result;
    };
    /**
     * Sort keybindings in-place, in order of priority.
     *
     * The only criterion right now is that a keybinding with a context has
     * more priority than a keybinding with no context.
     *
     * @param keybindings Array of keybindings to be sorted in-place.
     */
    KeybindingRegistry.prototype.sortKeybindingsByPriority = function (keybindings) {
        var _this = this;
        keybindings.sort(function (a, b) {
            var acontext;
            if (a.context) {
                acontext = _this.contexts[a.context];
            }
            var bcontext;
            if (b.context) {
                bcontext = _this.contexts[b.context];
            }
            if (acontext && !bcontext) {
                return -1;
            }
            if (!acontext && bcontext) {
                return 1;
            }
            return 0;
        });
    };
    KeybindingRegistry.prototype.isActive = function (binding) {
        /* Pseudo commands like "passthrough" are always active (and not found
           in the command registry).  */
        if (this.isPseudoCommand(binding.command)) {
            return true;
        }
        var command = this.commandRegistry.getCommand(binding.command);
        return !!command && !!this.commandRegistry.getActiveHandler(command.id);
    };
    /**
     * Tries to execute a keybinding.
     *
     * @param bindings list of matching keybindings as returned by getKeybindingsForKeySequence.full
     * @param event keyboard event.
     * @return true if the corresponding command was executed false otherwise.
     */
    KeybindingRegistry.prototype.tryKeybindingExecution = function (bindings, event) {
        var e_5, _a;
        if (bindings.length === 0) {
            return false;
        }
        try {
            for (var bindings_3 = __values(bindings), bindings_3_1 = bindings_3.next(); !bindings_3_1.done; bindings_3_1 = bindings_3.next()) {
                var binding = bindings_3_1.value;
                var context_2 = binding.context !== undefined && this.contexts[binding.context];
                /* Only execute if it has no context (global context) or if we're in
                   that context.  */
                if (!context_2 || context_2.isEnabled(binding)) {
                    if (this.isPseudoCommand(binding.command)) {
                        /* Don't do anything, let the event propagate.  */
                        return true;
                    }
                    else {
                        var command = this.commandRegistry.getCommand(binding.command);
                        if (command) {
                            var commandHandler = this.commandRegistry.getActiveHandler(command.id);
                            if (commandHandler) {
                                commandHandler.execute();
                            }
                            /* Note that if a keybinding is in context but the command is
                               not active we still stop the processing here.  */
                            event.preventDefault();
                            event.stopPropagation();
                            return true;
                        }
                    }
                    return false;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (bindings_3_1 && !bindings_3_1.done && (_a = bindings_3.return)) _a.call(bindings_3);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return false;
    };
    /**
     * Run the command matching to the given keyboard event.
     */
    KeybindingRegistry.prototype.run = function (event) {
        if (event.defaultPrevented) {
            return;
        }
        var keyCode = keys_1.KeyCode.createKeyCode(event);
        /* Keycode is only a modifier, next keycode will be modifier + key.
           Ignore this one.  */
        if (keyCode.isModifierOnly()) {
            return;
        }
        this.keySequence.push(keyCode);
        var bindings = this.getKeybindingsForKeySequence(this.keySequence);
        if (this.tryKeybindingExecution(bindings.full, event)) {
            this.keySequence = [];
            this.statusBar.removeElement('keybinding-status');
        }
        else if (bindings.partial.length > 0) {
            /* Accumulate the keysequence */
            event.preventDefault();
            event.stopPropagation();
            this.statusBar.setElement('keybinding-status', {
                text: "(" + keys_1.KeySequence.acceleratorFor(this.keySequence, '+') + ") was pressed, waiting for more keys",
                alignment: status_bar_1.StatusBarAlignment.LEFT,
                priority: 2
            });
        }
        else {
            this.keySequence = [];
            this.statusBar.removeElement('keybinding-status');
        }
    };
    /**
     * Return true of string a pseudo-command id, in other words a command id
     * that has a special meaning and that we won't find in the command
     * registry.
     *
     * @param commandId commandId to test
     */
    KeybindingRegistry.prototype.isPseudoCommand = function (commandId) {
        return commandId === KeybindingRegistry_1.PASSTHROUGH_PSEUDO_COMMAND;
    };
    KeybindingRegistry.prototype.setKeymap = function (scope, bindings) {
        this.resetKeybindingsForScope(scope);
        this.doRegisterKeybindings(bindings, scope);
    };
    /**
     * Reset keybindings for a specific scope
     * @param scope scope to reset the keybindings for
     */
    KeybindingRegistry.prototype.resetKeybindingsForScope = function (scope) {
        this.keymaps[scope] = [];
    };
    /**
     * Reset keybindings for all scopes(only leaves the default keybindings mapped)
     */
    KeybindingRegistry.prototype.resetKeybindings = function () {
        for (var i = KeybindingScope.DEFAULT + 1; i < KeybindingScope.END; i++) {
            this.keymaps[i] = [];
        }
    };
    var KeybindingRegistry_1;
    KeybindingRegistry.PASSTHROUGH_PSEUDO_COMMAND = 'passthrough';
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider), inversify_1.named(exports.KeybindingContext),
        __metadata("design:type", Object)
    ], KeybindingRegistry.prototype, "contextProvider", void 0);
    __decorate([
        inversify_1.inject(command_1.CommandRegistry),
        __metadata("design:type", command_1.CommandRegistry)
    ], KeybindingRegistry.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(contribution_provider_1.ContributionProvider), inversify_1.named(exports.KeybindingContribution),
        __metadata("design:type", Object)
    ], KeybindingRegistry.prototype, "contributions", void 0);
    __decorate([
        inversify_1.inject(status_bar_1.StatusBar),
        __metadata("design:type", Object)
    ], KeybindingRegistry.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], KeybindingRegistry.prototype, "logger", void 0);
    KeybindingRegistry = KeybindingRegistry_1 = __decorate([
        inversify_1.injectable()
    ], KeybindingRegistry);
    return KeybindingRegistry;
}());
exports.KeybindingRegistry = KeybindingRegistry;
(function (KeybindingRegistry) {
    var KeybindingsResult = /** @class */ (function () {
        function KeybindingsResult() {
            this.full = [];
            this.partial = [];
            this.shadow = [];
        }
        /**
         * Merge two results together inside `this`
         *
         * @param other the other KeybindingsResult to merge with
         * @return this
         */
        KeybindingsResult.prototype.merge = function (other) {
            var _a, _b, _c;
            (_a = this.full).push.apply(_a, __spread(other.full));
            (_b = this.partial).push.apply(_b, __spread(other.partial));
            (_c = this.shadow).push.apply(_c, __spread(other.shadow));
            return this;
        };
        /**
         * Returns a new filtered KeybindingsResult
         *
         * @param fn callback filter on the results
         * @return filtered new result
         */
        KeybindingsResult.prototype.filter = function (fn) {
            var result = new KeybindingsResult();
            result.full = this.full.filter(fn);
            result.partial = this.partial.filter(fn);
            result.shadow = this.shadow.filter(fn);
            return result;
        };
        return KeybindingsResult;
    }());
    KeybindingRegistry.KeybindingsResult = KeybindingsResult;
})(KeybindingRegistry = exports.KeybindingRegistry || (exports.KeybindingRegistry = {}));
exports.KeybindingRegistry = KeybindingRegistry;
//# sourceMappingURL=keybinding.js.map