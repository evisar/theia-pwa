"use strict";
/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
var coreutils_1 = require("@phosphor/coreutils");
var inversify_1 = require("inversify");
var common_1 = require("../../common");
var promise_util_1 = require("../../common/promise-util");
var preference_contribution_1 = require("./preference-contribution");
var PreferenceScope;
(function (PreferenceScope) {
    PreferenceScope[PreferenceScope["User"] = 0] = "User";
    PreferenceScope[PreferenceScope["Workspace"] = 1] = "Workspace";
})(PreferenceScope = exports.PreferenceScope || (exports.PreferenceScope = {}));
exports.PreferenceService = Symbol('PreferenceService');
/**
 * We cannot load providers directly in the case if they depend on `PreferenceService` somehow.
 * It allows to load them lazilly after DI is configured.
 */
exports.PreferenceProviderProvider = Symbol('PreferenceProviderProvider');
var PreferenceServiceImpl = /** @class */ (function () {
    function PreferenceServiceImpl() {
        this.preferences = {};
        this.onPreferenceChangedEmitter = new common_1.Emitter();
        this.onPreferenceChanged = this.onPreferenceChangedEmitter.event;
        this.onPreferencesChangedEmitter = new common_1.Emitter();
        this.onPreferencesChanged = this.onPreferencesChangedEmitter.event;
        this.toDispose = new common_1.DisposableCollection(this.onPreferenceChangedEmitter, this.onPreferencesChangedEmitter);
        this.providers = [];
        this._ready = new promise_util_1.Deferred();
    }
    PreferenceServiceImpl.prototype.init = function () {
        var _this = this;
        this.toDispose.push(common_1.Disposable.create(function () { return _this._ready.reject(); }));
        this.providers.push(this.schema);
        this.preferences = this.parsePreferences();
    };
    PreferenceServiceImpl.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    Object.defineProperty(PreferenceServiceImpl.prototype, "ready", {
        get: function () {
            return this._ready.promise;
        },
        enumerable: true,
        configurable: true
    });
    PreferenceServiceImpl.prototype.initialize = function () {
        this.initializeProviders();
    };
    PreferenceServiceImpl.prototype.initializeProviders = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, e_1, _b, providers, providers_1, providers_1_1, provider, e_2;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        providers = this.createProviders();
                        this.toDispose.pushAll(providers);
                        return [4 /*yield*/, Promise.all(providers.map(function (p) { return p.ready; }))];
                    case 1:
                        _c.sent();
                        if (this.toDispose.disposed) {
                            return [2 /*return*/];
                        }
                        (_a = this.providers).push.apply(_a, __spread(providers));
                        try {
                            for (providers_1 = __values(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()) {
                                provider = providers_1_1.value;
                                provider.onDidPreferencesChanged(function (_) { return _this.reconcilePreferences(); });
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (providers_1_1 && !providers_1_1.done && (_b = providers_1.return)) _b.call(providers_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this.reconcilePreferences();
                        this._ready.resolve();
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _c.sent();
                        this._ready.reject(e_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PreferenceServiceImpl.prototype.createProviders = function () {
        return [
            this.providerProvider(PreferenceScope.User),
            this.providerProvider(PreferenceScope.Workspace)
        ];
    };
    PreferenceServiceImpl.prototype.reconcilePreferences = function () {
        var e_3, _a;
        var changes = {};
        var deleted = new Set(Object.keys(this.preferences));
        var preferences = this.parsePreferences();
        // tslint:disable-next-line:forin
        for (var preferenceName in preferences) {
            deleted.delete(preferenceName);
            var oldValue = this.preferences[preferenceName];
            var newValue = preferences[preferenceName];
            if (oldValue !== undefined) {
                if (!coreutils_1.JSONExt.deepEqual(oldValue, newValue)) {
                    changes[preferenceName] = { preferenceName: preferenceName, newValue: newValue, oldValue: oldValue };
                    this.preferences[preferenceName] = common_1.deepFreeze(newValue);
                }
            }
            else {
                changes[preferenceName] = { preferenceName: preferenceName, newValue: newValue };
                this.preferences[preferenceName] = common_1.deepFreeze(newValue);
            }
        }
        try {
            for (var deleted_1 = __values(deleted), deleted_1_1 = deleted_1.next(); !deleted_1_1.done; deleted_1_1 = deleted_1.next()) {
                var preferenceName = deleted_1_1.value;
                var oldValue = this.preferences[preferenceName];
                changes[preferenceName] = { preferenceName: preferenceName, oldValue: oldValue };
                this.preferences[preferenceName] = undefined;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (deleted_1_1 && !deleted_1_1.done && (_a = deleted_1.return)) _a.call(deleted_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        this.onPreferencesChangedEmitter.fire(changes);
        // tslint:disable-next-line:forin
        for (var preferenceName in changes) {
            this.onPreferenceChangedEmitter.fire(changes[preferenceName]);
        }
    };
    PreferenceServiceImpl.prototype.parsePreferences = function () {
        var e_4, _a;
        var result = {};
        try {
            for (var _b = __values(this.providers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var provider = _c.value;
                var preferences = provider.getPreferences();
                // tslint:disable-next-line:forin
                for (var preferenceName in preferences) {
                    if (this.schema.validate(preferenceName, preferences[preferenceName])) {
                        result[preferenceName] = preferences[preferenceName];
                    }
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
    };
    PreferenceServiceImpl.prototype.getPreferences = function () {
        return this.preferences;
    };
    PreferenceServiceImpl.prototype.has = function (preferenceName) {
        return this.preferences[preferenceName] !== undefined;
    };
    PreferenceServiceImpl.prototype.get = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? value : defaultValue;
    };
    PreferenceServiceImpl.prototype.set = function (preferenceName, value, scope) {
        if (scope === void 0) { scope = PreferenceScope.User; }
        return this.providerProvider(scope).setPreference(preferenceName, value);
    };
    PreferenceServiceImpl.prototype.getBoolean = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? !!value : defaultValue;
    };
    PreferenceServiceImpl.prototype.getString = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === 'string') {
            return value;
        }
        return value.toString();
    };
    PreferenceServiceImpl.prototype.getNumber = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === 'number') {
            return value;
        }
        return Number(value);
    };
    __decorate([
        inversify_1.inject(preference_contribution_1.PreferenceSchemaProvider),
        __metadata("design:type", preference_contribution_1.PreferenceSchemaProvider)
    ], PreferenceServiceImpl.prototype, "schema", void 0);
    __decorate([
        inversify_1.inject(exports.PreferenceProviderProvider),
        __metadata("design:type", Function)
    ], PreferenceServiceImpl.prototype, "providerProvider", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], PreferenceServiceImpl.prototype, "init", null);
    PreferenceServiceImpl = __decorate([
        inversify_1.injectable()
    ], PreferenceServiceImpl);
    return PreferenceServiceImpl;
}());
exports.PreferenceServiceImpl = PreferenceServiceImpl;
//# sourceMappingURL=preference-service.js.map