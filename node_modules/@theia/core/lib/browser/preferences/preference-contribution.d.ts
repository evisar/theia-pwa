/********************************************************************************
 * Copyright (C) 2018 Ericsson and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import * as Ajv from 'ajv';
import { interfaces } from 'inversify';
import { ContributionProvider } from '../../common';
import { PreferenceProvider } from './preference-provider';
export declare const PreferenceContribution: unique symbol;
export interface PreferenceContribution {
    readonly schema: PreferenceSchema;
}
export declare const PreferenceSchema: unique symbol;
export interface PreferenceSchema {
    [name: string]: Object;
    properties: {
        [name: string]: PreferenceProperty;
    };
}
export interface PreferenceItem {
    type?: JsonType | JsonType[];
    minimum?: number;
    default?: any;
    enum?: string[];
    items?: PreferenceItem;
    properties?: {
        [name: string]: PreferenceItem;
    };
    additionalProperties?: object;
    [name: string]: any;
}
export interface PreferenceProperty extends PreferenceItem {
    description: string;
}
export declare type JsonType = 'string' | 'array' | 'number' | 'integer' | 'object' | 'boolean' | 'null';
export declare function bindPreferenceSchemaProvider(bind: interfaces.Bind): void;
export declare class PreferenceSchemaProvider extends PreferenceProvider {
    protected readonly combinedSchema: PreferenceSchema;
    protected readonly preferences: {
        [name: string]: any;
    };
    protected validateFunction: Ajv.ValidateFunction;
    protected readonly preferenceContributions: ContributionProvider<PreferenceContribution>;
    protected init(): void;
    protected doSetSchema(schema: PreferenceSchema): void;
    protected updateValidate(): void;
    validate(name: string, value: any): boolean;
    getCombinedSchema(): PreferenceSchema;
    getPreferences(): {
        [name: string]: any;
    };
    setSchema(schema: PreferenceSchema): void;
    setPreference(): Promise<void>;
}
//# sourceMappingURL=preference-contribution.d.ts.map