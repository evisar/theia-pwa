"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var event_1 = require("../common/event");
var quick_open_model_1 = require("./quick-open/quick-open-model");
var quick_open_service_1 = require("./quick-open/quick-open-service");
var frontend_application_config_provider_1 = require("./frontend-application-config-provider");
var common_frontend_contribution_1 = require("./common-frontend-contribution");
exports.ThemeServiceSymbol = Symbol('ThemeService');
var ThemeService = /** @class */ (function () {
    function ThemeService(_defaultTheme, fallbackTheme) {
        if (_defaultTheme === void 0) { _defaultTheme = frontend_application_config_provider_1.FrontendApplicationConfigProvider.get().defaultTheme; }
        if (fallbackTheme === void 0) { fallbackTheme = 'dark'; }
        this._defaultTheme = _defaultTheme;
        this.fallbackTheme = fallbackTheme;
        this.themes = {};
        this.themeChange = new event_1.Emitter();
        this.onThemeChange = this.themeChange.event;
        var global = window; // tslint:disable-line
        global[exports.ThemeServiceSymbol] = this;
    }
    ThemeService.get = function () {
        var global = window; // tslint:disable-line
        return global[exports.ThemeServiceSymbol] || new ThemeService();
    };
    ThemeService.prototype.register = function () {
        var themes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            themes[_i] = arguments[_i];
        }
        var e_1, _a;
        try {
            for (var themes_1 = __values(themes), themes_1_1 = themes_1.next(); !themes_1_1.done; themes_1_1 = themes_1.next()) {
                var theme = themes_1_1.value;
                this.themes[theme.id] = theme;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (themes_1_1 && !themes_1_1.done && (_a = themes_1.return)) _a.call(themes_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ThemeService.prototype.getThemes = function () {
        var result = [];
        for (var o in this.themes) {
            if (this.themes.hasOwnProperty(o)) {
                result.push(this.themes[o]);
            }
        }
        return result;
    };
    ThemeService.prototype.getTheme = function (themeId) {
        return this.themes[themeId] || this.defaultTheme;
    };
    ThemeService.prototype.startupTheme = function () {
        var theme = this.getCurrentTheme();
        theme.activate();
    };
    ThemeService.prototype.loadUserTheme = function () {
        var theme = this.getCurrentTheme();
        this.setCurrentTheme(theme.id);
    };
    ThemeService.prototype.setCurrentTheme = function (themeId) {
        var newTheme = this.getTheme(themeId);
        var oldTheme = this.activeTheme;
        if (oldTheme) {
            if (oldTheme.id === newTheme.id) {
                return;
            }
            oldTheme.deactivate();
        }
        newTheme.activate();
        this.activeTheme = newTheme;
        window.localStorage.setItem('theme', themeId);
        this.themeChange.fire({
            newTheme: newTheme, oldTheme: oldTheme
        });
    };
    ThemeService.prototype.getCurrentTheme = function () {
        var themeId = window.localStorage.getItem('theme') || this.defaultTheme.id;
        return this.getTheme(themeId);
    };
    Object.defineProperty(ThemeService.prototype, "defaultTheme", {
        /**
         * The default theme. If that is not applicable, returns with the fallback theme.
         */
        get: function () {
            return this.themes[this._defaultTheme || this.fallbackTheme] || this.themes[this.fallbackTheme];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the state to the user's default, or to the fallback theme. Also discards any persisted state in the local storage.
     */
    ThemeService.prototype.reset = function () {
        this.setCurrentTheme(this.defaultTheme.id);
    };
    return ThemeService;
}());
exports.ThemeService = ThemeService;
var ThemingCommandContribution = /** @class */ (function () {
    function ThemingCommandContribution() {
        this.id = 'change_theme';
        this.category = 'Settings';
        this.label = 'Change Color Theme';
    }
    ThemingCommandContribution.prototype.registerCommands = function (commands) {
        commands.registerCommand(this, this);
    };
    ThemingCommandContribution.prototype.registerMenus = function (menus) {
        menus.registerMenuAction(common_frontend_contribution_1.CommonMenus.FILE_SETTINGS_SUBMENU_THEME, {
            commandId: this.id,
            label: this.label,
            order: 'a30'
        });
    };
    ThemingCommandContribution.prototype.execute = function () {
        var _this = this;
        this.resetTo = this.themeService.getCurrentTheme().id;
        this.openService.open(this, {
            placeholder: 'Select Color Theme (Up/Down Keys to Preview)',
            fuzzyMatchLabel: true,
            selectIndex: function () { return _this.activeIndex(); },
            onClose: function () {
                if (_this.resetTo) {
                    _this.themeService.setCurrentTheme(_this.resetTo);
                }
            }
        });
    };
    ThemingCommandContribution.prototype.activeIndex = function () {
        var current = this.themeService.getCurrentTheme().id;
        var themes = this.themeService.getThemes();
        return themes.findIndex(function (theme) { return theme.id === current; });
    };
    ThemingCommandContribution.prototype.onType = function (lookFor, acceptor) {
        var _this = this;
        var items = this.themeService.getThemes().map(function (t) {
            return new quick_open_model_1.QuickOpenItem({
                label: t.label,
                description: t.description,
                run: function (mode) {
                    if (mode === quick_open_model_1.QuickOpenMode.OPEN) {
                        _this.resetTo = undefined;
                    }
                    _this.themeService.setCurrentTheme(t.id);
                    return true;
                }
            });
        });
        acceptor(items);
    };
    __decorate([
        inversify_1.inject(ThemeService),
        __metadata("design:type", ThemeService)
    ], ThemingCommandContribution.prototype, "themeService", void 0);
    __decorate([
        inversify_1.inject(quick_open_service_1.QuickOpenService),
        __metadata("design:type", quick_open_service_1.QuickOpenService)
    ], ThemingCommandContribution.prototype, "openService", void 0);
    ThemingCommandContribution = __decorate([
        inversify_1.injectable()
    ], ThemingCommandContribution);
    return ThemingCommandContribution;
}());
exports.ThemingCommandContribution = ThemingCommandContribution;
var BuiltinThemeProvider = /** @class */ (function () {
    function BuiltinThemeProvider() {
    }
    // Webpack converts these `require` in some Javascript object that wraps the `.css` files
    BuiltinThemeProvider.darkCss = require('../../src/browser/style/variables-dark.useable.css');
    BuiltinThemeProvider.lightCss = require('../../src/browser/style/variables-bright.useable.css');
    BuiltinThemeProvider.darkTheme = {
        id: 'dark',
        label: 'Dark Theme',
        description: 'Bright fonts on dark backgrounds.',
        editorTheme: 'vs-dark',
        activate: function () {
            BuiltinThemeProvider.darkCss.use();
        },
        deactivate: function () {
            BuiltinThemeProvider.darkCss.unuse();
        }
    };
    BuiltinThemeProvider.lightTheme = {
        id: 'light',
        label: 'Light Theme',
        description: 'Dark fonts on light backgrounds.',
        editorTheme: 'vs',
        activate: function () {
            BuiltinThemeProvider.lightCss.use();
        },
        deactivate: function () {
            BuiltinThemeProvider.lightCss.unuse();
        }
    };
    BuiltinThemeProvider.themes = [
        BuiltinThemeProvider.darkTheme,
        BuiltinThemeProvider.lightTheme,
    ];
    return BuiltinThemeProvider;
}());
exports.BuiltinThemeProvider = BuiltinThemeProvider;
//# sourceMappingURL=theming.js.map