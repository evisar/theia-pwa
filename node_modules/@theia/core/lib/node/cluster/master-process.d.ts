/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
/// <reference types="node" />
import { EventEmitter } from 'events';
import { ServerWorker } from './server-worker';
export declare type MasterProcessEvent = 'started' | 'restarted' | 'restarting';
export declare class MasterProcess extends EventEmitter {
    protected readonly startupTimeout: number;
    /**
     * The option for the backend startup.
     */
    static startupTimeoutOption: string;
    /**
     * The default timeout (in milliseconds) for the backend startup.
     */
    static defaultStartupTimeoutOption: number;
    protected serverWorker: ServerWorker | undefined;
    protected workerCount: number;
    constructor(startupTimeout: number);
    protected fork(): Promise<ServerWorker>;
    start(): Promise<ServerWorker>;
    readonly started: Promise<ServerWorker>;
    restart(): Promise<void>;
    readonly restarting: Promise<ServerWorker>;
    readonly restarted: Promise<ServerWorker>;
    protected timeout(delay: number): Promise<void>;
    onexit(listener: (code: number) => void): this;
    on(event: MasterProcessEvent, listener: (worker: ServerWorker) => void): this;
    emit(event: MasterProcessEvent, worker: ServerWorker): boolean;
}
//# sourceMappingURL=master-process.d.ts.map