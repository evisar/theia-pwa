"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var cluster = require("cluster");
var ipc_protocol_1 = require("../messaging/ipc-protocol");
var master_process_1 = require("./master-process");
var backend_application_config_provider_1 = require("../backend-application-config-provider");
ipc_protocol_1.checkParentAlive();
process.on('unhandledRejection', function (reason, promise) {
    throw reason;
});
var yargs = require("yargs");
var args = yargs.option(master_process_1.MasterProcess.startupTimeoutOption, {
    description: 'The number of milliseconds to wait for the server to start up. Pass a negative number to disable the timeout.',
    type: 'number',
    default: backend_application_config_provider_1.BackendApplicationConfigProvider.get().startupTimeout || master_process_1.MasterProcess.defaultStartupTimeoutOption
}).help(false).argv;
var noCluster = args['cluster'] === false;
var isMaster = !noCluster && cluster.isMaster;
var development = process.env.NODE_ENV === 'development';
var startupTimeout = args[master_process_1.MasterProcess.startupTimeoutOption];
if (isMaster) {
    console.log("Starting the master backend process " + (Number.isInteger(startupTimeout) && startupTimeout > 0 ? "with " + startupTimeout + " (ms)" : 'without a') + " timeout.");
}
if (isMaster && development) {
    // https://github.com/Microsoft/vscode/issues/3201
    process.execArgv = process.execArgv.reduce(function (result, arg) {
        result.push(arg.replace('-brk', ''));
        return result;
    }, []);
}
function start(serverPath) {
    return __awaiter(this, void 0, void 0, function () {
        var master, worker, error_1, server;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isMaster) return [3 /*break*/, 4];
                    master = new master_process_1.MasterProcess(startupTimeout);
                    master.onexit(process.exit);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, master.start()];
                case 2:
                    worker = _a.sent();
                    return [2 /*return*/, worker.listening];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1.message);
                    process.exit(error_1.returnCode);
                    return [3 /*break*/, 4];
                case 4: return [4 /*yield*/, require(serverPath)()];
                case 5:
                    server = _a.sent();
                    return [2 /*return*/, server.address()];
            }
        });
    });
}
exports.start = start;
exports.default = start;
//# sourceMappingURL=main.js.map