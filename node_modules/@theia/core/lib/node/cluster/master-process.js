"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var server_worker_1 = require("./server-worker");
var ProcessError = /** @class */ (function (_super) {
    __extends(ProcessError, _super);
    function ProcessError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.returnCode = 1;
        return _this;
    }
    return ProcessError;
}(Error));
var MasterProcess = /** @class */ (function (_super) {
    __extends(MasterProcess, _super);
    function MasterProcess(startupTimeout) {
        var _this = _super.call(this) || this;
        _this.startupTimeout = startupTimeout;
        _this.workerCount = 0;
        return _this;
    }
    MasterProcess.prototype.fork = function () {
        return __awaiter(this, void 0, void 0, function () {
            var worker, success, failure, started, message, error, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        worker = new server_worker_1.ServerWorker(function () { return _this.restart(); });
                        success = worker.initialized.then(function () { return true; });
                        failure = Promise.race([worker.failed, worker.disconnect, worker.exit, this.timeout(this.startupTimeout)]).then(function () { return false; });
                        return [4 /*yield*/, Promise.race([success, failure])];
                    case 1:
                        started = _b.sent();
                        if (!!started) return [3 /*break*/, 3];
                        message = 'Server worker failed to start';
                        if (this.startupTimeout >= 0) {
                            message += " within " + this.startupTimeout + " milliseconds.\nPass a greater value as '--" + MasterProcess.startupTimeoutOption + "' option to increase the timeout or a negative to disable.";
                        }
                        else {
                            message += '.';
                        }
                        error = new ProcessError(message);
                        _a = error;
                        return [4 /*yield*/, worker.stop()];
                    case 2:
                        _a.returnCode = _b.sent();
                        throw error;
                    case 3:
                        // Success
                        this.workerCount++;
                        worker.exit.then(function (code) {
                            if (--_this.workerCount === 0) {
                                _super.prototype.emit.call(_this, 'exit', code);
                            }
                        });
                        return [2 /*return*/, worker];
                }
            });
        });
    };
    MasterProcess.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.serverWorker) {
                            throw new Error('Server worker is already running.');
                        }
                        _a = this;
                        return [4 /*yield*/, this.fork()];
                    case 1:
                        _a.serverWorker = _b.sent();
                        this.emit('started', this.serverWorker);
                        return [2 /*return*/, this.serverWorker];
                }
            });
        });
    };
    Object.defineProperty(MasterProcess.prototype, "started", {
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return _this.once('started', resolve); });
        },
        enumerable: true,
        configurable: true
    });
    MasterProcess.prototype.restart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var newServerWorker;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.serverWorker) {
                            throw new Error('Server worker is not running.');
                        }
                        this.emit('restarting', this.serverWorker);
                        console.log('Restarting the server worker is requested.');
                        return [4 /*yield*/, this.fork()];
                    case 1:
                        newServerWorker = _a.sent();
                        this.serverWorker = newServerWorker;
                        console.log('Server worker has been restarted.');
                        this.emit('restarted', this.serverWorker);
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(MasterProcess.prototype, "restarting", {
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return _this.once('restarting', resolve); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MasterProcess.prototype, "restarted", {
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return _this.once('restarted', resolve); });
        },
        enumerable: true,
        configurable: true
    });
    MasterProcess.prototype.timeout = function (delay) {
        return new Promise(function (resolve) { return delay >= 0 && setTimeout(resolve, delay); });
    };
    MasterProcess.prototype.onexit = function (listener) {
        return _super.prototype.on.call(this, 'exit', listener);
    };
    MasterProcess.prototype.on = function (event, listener) {
        return _super.prototype.on.call(this, event, listener);
    };
    MasterProcess.prototype.emit = function (event, worker) {
        return _super.prototype.emit.call(this, event, worker);
    };
    /**
     * The option for the backend startup.
     */
    MasterProcess.startupTimeoutOption = 'startup-timeout';
    /**
     * The default timeout (in milliseconds) for the backend startup.
     */
    MasterProcess.defaultStartupTimeoutOption = 5000;
    return MasterProcess;
}(events_1.EventEmitter));
exports.MasterProcess = MasterProcess;
//# sourceMappingURL=master-process.js.map