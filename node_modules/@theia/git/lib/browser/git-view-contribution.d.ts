import URI from '@theia/core/lib/common/uri';
import { DisposableCollection, CommandRegistry, MenuModelRegistry, CommandContribution, MenuContribution, Command } from '@theia/core';
import { AbstractViewContribution, StatusBar, StatusBarEntry, FrontendApplicationContribution, FrontendApplication, Widget } from '@theia/core/lib/browser';
import { TabBarToolbarContribution, TabBarToolbarRegistry } from '@theia/core/lib/browser/shell/tab-bar-toolbar';
import { EditorManager, EditorWidget, EditorOpenerOptions } from '@theia/editor/lib/browser';
import { GitFileChange } from '../common';
import { GitWidget } from './git-widget';
import { GitRepositoryTracker } from './git-repository-tracker';
import { GitQuickOpenService } from './git-quick-open-service';
import { GitSyncService } from './git-sync-service';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { GitPrompt } from '../common/git-prompt';
export declare const GIT_WIDGET_FACTORY_ID = "git";
export declare const EDITOR_CONTEXT_MENU_GIT: string[];
export declare namespace GIT_COMMANDS {
    const CLONE: {
        id: string;
        label: string;
    };
    const FETCH: {
        id: string;
        label: string;
    };
    const PULL: {
        id: string;
        label: string;
    };
    const PUSH: {
        id: string;
        label: string;
    };
    const MERGE: {
        id: string;
        label: string;
    };
    const CHECKOUT: {
        id: string;
        label: string;
    };
    const COMMIT_AMEND: {
        id: string;
    };
    const COMMIT_SIGN_OFF: {
        id: string;
    };
    const CHANGE_REPOSITORY: {
        id: string;
        label: string;
    };
    const OPEN_FILE: Command;
    const OPEN_CHANGES: Command;
    const SYNC: {
        id: string;
        label: string;
    };
    const PUBLISH: {
        id: string;
        label: string;
    };
}
export declare class GitViewContribution extends AbstractViewContribution<GitWidget> implements FrontendApplicationContribution, CommandContribution, MenuContribution, TabBarToolbarContribution {
    static GIT_SELECTED_REPOSITORY: string;
    static GIT_REPOSITORY_STATUS: string;
    static GIT_SYNC_STATUS: string;
    protected toDispose: DisposableCollection;
    protected readonly statusBar: StatusBar;
    protected readonly editorManager: EditorManager;
    protected readonly quickOpenService: GitQuickOpenService;
    protected readonly repositoryTracker: GitRepositoryTracker;
    protected readonly syncService: GitSyncService;
    protected readonly workspaceService: WorkspaceService;
    protected readonly prompt: GitPrompt;
    constructor();
    initializeLayout(app: FrontendApplication): Promise<void>;
    onStart(): void;
    registerMenus(menus: MenuModelRegistry): void;
    registerCommands(registry: CommandRegistry): void;
    registerToolbarItems(registry: TabBarToolbarRegistry): void;
    protected hasConflicts(changes: GitFileChange[]): boolean;
    protected allStaged(changes: GitFileChange[]): boolean;
    protected openFile(widget?: Widget): Promise<EditorWidget | undefined>;
    protected getOpenFileOptions(widget?: Widget): GitOpenFileOptions | undefined;
    openChanges(widget?: Widget): Promise<EditorWidget | undefined>;
    protected getOpenChangesOptions(widget?: Widget): GitOpenChangesOptions | undefined;
    protected hasMultipleRepositories(): boolean;
    protected updateSyncStatusBarEntry(): void;
    protected getStatusBarEntry(): (Pick<StatusBarEntry, 'text'> & Partial<StatusBarEntry>) | undefined;
}
export interface GitOpenFileOptions {
    readonly uri: URI;
    readonly options?: EditorOpenerOptions;
}
export interface GitOpenChangesOptions {
    readonly change: GitFileChange;
    readonly options?: EditorOpenerOptions;
}
//# sourceMappingURL=git-view-contribution.d.ts.map