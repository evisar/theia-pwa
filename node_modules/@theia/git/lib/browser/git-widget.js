"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var browser_3 = require("@theia/workspace/lib/browser");
var common_1 = require("../common");
var git_watcher_1 = require("../common/git-watcher");
var git_resource_1 = require("./git-resource");
var git_repository_provider_1 = require("./git-repository-provider");
var git_commit_message_validator_1 = require("./git-commit-message-validator");
var git_avatar_service_1 = require("./history/git-avatar-service");
var React = require("react");
var git_error_handler_1 = require("./git-error-handler");
var git_diff_widget_1 = require("./diff/git-diff-widget");
var alert_message_1 = require("@theia/core/lib/browser/widgets/alert-message");
var GitWidget = /** @class */ (function (_super) {
    __extends(GitWidget, _super);
    function GitWidget(git, gitWatcher, contextMenuRenderer, resourceProvider, commandService, repositoryProvider, labelProvider, avatarService, commitMessageValidator) {
        var _this = _super.call(this) || this;
        _this.git = git;
        _this.gitWatcher = gitWatcher;
        _this.contextMenuRenderer = contextMenuRenderer;
        _this.resourceProvider = resourceProvider;
        _this.commandService = commandService;
        _this.repositoryProvider = repositoryProvider;
        _this.labelProvider = labelProvider;
        _this.avatarService = avatarService;
        _this.commitMessageValidator = commitMessageValidator;
        _this.stagedChanges = [];
        _this.unstagedChanges = [];
        _this.mergeChanges = [];
        _this.message = '';
        _this.messageBoxHeight = GitWidget_1.MESSAGE_BOX_MIN_HEIGHT;
        _this.selectChange = function (change) { return _this.selectNode(change); };
        _this.addGitListKeyListeners = function (id) { return _this.doAddGitListKeyListeners(id); };
        _this.stageOrUnstage = function () { return _this.doStageOrUnstage(); };
        _this.handleBackspace = function () { return _this.doHandleBackspace(); };
        _this.openFile = function (uri) { return _this.doOpenFile(uri); };
        _this.handleListFocus = function (e) { return _this.doHandleListFocus(e); };
        _this.refresh = function () { return _this.doRefresh(); };
        _this.showMoreToolButtons = function (event) { return _this.doShowMoreToolButtons(event); };
        _this.signOff = function () { return _this.doSignOff(); };
        _this.commit = function (repository) { return _this.doCommit.bind(_this)(repository); };
        _this.unstage = function (repository, change) { return _this.doUnstage(repository, change); };
        _this.discard = function (repository, change) { return _this.doDiscard(repository, change); };
        _this.stage = function (repository, change) { return _this.doStage(repository, change); };
        _this.handleOpenChange = function (change, options) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, this.openChange(change, options)];
        }); }); };
        _this.id = 'theia-gitContainer';
        _this.title.label = 'Git';
        _this.title.caption = 'Git';
        _this.title.iconClass = 'fa git-tab-icon';
        _this.scrollContainer = GitWidget_1.Styles.CHANGES_CONTAINER;
        _this.addClass('theia-git');
        _this.node.tabIndex = 0;
        return _this;
    }
    GitWidget_1 = GitWidget;
    GitWidget.prototype.init = function () {
        var _this = this;
        this.toDispose.push(this.repositoryProvider.onDidChangeRepository(function (repository) {
            return _this.initialize(repository);
        }));
        this.initialize(this.repositoryProvider.selectedRepository);
        this.gitNodes = [];
        this.update();
    };
    GitWidget.prototype.initialize = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!repository) return [3 /*break*/, 2];
                        this.toDispose.dispose();
                        _b = (_a = this.toDispose).push;
                        return [4 /*yield*/, this.gitWatcher.watchGitChanges(repository)];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        this.toDispose.push(this.gitWatcher.onGitEvent(function (gitEvent) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        if (!git_watcher_1.GitStatusChangeEvent.is(gitEvent)) return [3 /*break*/, 5];
                                        if (!(gitEvent.status.currentHead !== this.lastHead)) return [3 /*break*/, 4];
                                        this.lastHead = gitEvent.status.currentHead;
                                        _a = this;
                                        if (!gitEvent.status.currentHead) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.getLastCommit()];
                                    case 1:
                                        _b = _c.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        _b = undefined;
                                        _c.label = 3;
                                    case 3:
                                        _a.lastCommit = _b;
                                        _c.label = 4;
                                    case 4:
                                        this.status = gitEvent.status;
                                        this.updateView(gitEvent.status);
                                        _c.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); }));
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.doAddGitListKeyListeners = function (id) {
        var container = document.getElementById(id);
        if (container) {
            this.addGitListNavigationKeyListeners(container);
            this.addKeyListener(container, browser_1.Key.SPACE, this.stageOrUnstage);
            this.addKeyListener(container, browser_1.Key.BACKSPACE, this.handleBackspace);
        }
    };
    GitWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        var messageInput = document.getElementById(GitWidget_1.Styles.COMMIT_MESSAGE);
        if (messageInput) {
            messageInput.focus();
        }
    };
    GitWidget.prototype.storeState = function () {
        var messageBoxHeight = this.messageBoxHeight ? this.messageBoxHeight : GitWidget_1.MESSAGE_BOX_MIN_HEIGHT;
        return {
            message: this.message,
            commitMessageValidationResult: this.commitMessageValidationResult,
            messageBoxHeight: messageBoxHeight
        };
    };
    // tslint:disable-next-line:no-any
    GitWidget.prototype.restoreState = function (oldState) {
        this.message = oldState.message;
        // Do not restore the validation message if the commit message is undefined or empty.
        this.commitMessageValidationResult = this.message ? oldState.commitMessageValidationResult : undefined;
        this.messageBoxHeight = oldState.messageBoxHeight || GitWidget_1.MESSAGE_BOX_MIN_HEIGHT;
    };
    GitWidget.prototype.doStageOrUnstage = function () {
        var change = this.getSelected();
        if (change && this.repositoryProvider.selectedRepository) {
            this.setLastSelectedNode(change);
            var repository = this.repositoryProvider.selectedRepository;
            if (!change.staged) {
                this.stage(repository, change);
            }
            else {
                this.unstage(repository, change);
            }
        }
    };
    GitWidget.prototype.doHandleBackspace = function () {
        return __awaiter(this, void 0, void 0, function () {
            var change;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        change = this.getSelected();
                        if (!(change && this.repositoryProvider.selectedRepository)) return [3 /*break*/, 2];
                        this.setLastSelectedNode(change);
                        return [4 /*yield*/, this.discard(this.repositoryProvider.selectedRepository, change)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.setLastSelectedNode = function (change) {
        this.lastSelectedNode = {
            id: this.indexOfSelected,
            node: change
        };
    };
    GitWidget.prototype.amend = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedRepository, message, commitTextArea;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        selectedRepository = this.repositoryProvider.selectedRepository;
                        if (!selectedRepository) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.git.exec(selectedRepository, ['log', '-n', '1', '--format=%B'])];
                    case 1:
                        message = (_a.sent()).stdout.trim();
                        commitTextArea = document.getElementById(GitWidget_1.Styles.COMMIT_MESSAGE);
                        return [4 /*yield*/, this.git.exec(selectedRepository, ['reset', 'HEAD~', '--soft'])];
                    case 2:
                        _a.sent();
                        if (commitTextArea) {
                            this.message = message;
                            commitTextArea.value = message;
                            this.resize(commitTextArea);
                            commitTextArea.focus();
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.doCommit = function (repository, options, message) {
        if (message === void 0) { message = this.message; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, signOff, amend, status_1, error_1, messageInput;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!repository) return [3 /*break*/, 9];
                        this.commitMessageValidationResult = undefined;
                        if (message.trim().length === 0) {
                            this.commitMessageValidationResult = {
                                status: 'error',
                                message: 'Please provide a commit message'
                            };
                        }
                        _a = this.commitMessageValidationResult === undefined;
                        if (!_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.git.status(repository)];
                    case 1:
                        _a = !(_b.sent()).changes.some(function (c) { return c.staged === true; });
                        _b.label = 2;
                    case 2:
                        if (_a) {
                            this.commitMessageValidationResult = {
                                status: 'error',
                                message: 'No changes added to commit'
                            };
                        }
                        if (!(this.commitMessageValidationResult === undefined)) return [3 /*break*/, 8];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 6, , 7]);
                        signOff = options === 'sign-off';
                        amend = options === 'amend';
                        return [4 /*yield*/, this.git.commit(repository, message, { signOff: signOff, amend: amend })];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, this.git.status(repository)];
                    case 5:
                        status_1 = _b.sent();
                        this.resetCommitMessages();
                        this.updateView(status_1);
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _b.sent();
                        this.gitErrorHandler.handleError(error_1);
                        return [3 /*break*/, 7];
                    case 7: return [3 /*break*/, 9];
                    case 8:
                        messageInput = document.getElementById(GitWidget_1.Styles.COMMIT_MESSAGE);
                        if (messageInput) {
                            this.update();
                            messageInput.focus();
                        }
                        _b.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.updateView = function (status) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, stagedChanges, unstagedChanges, mergeChanges, _b, _c, change, uri, repository, _d, icon, label, description, e_1_1, sort;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        stagedChanges = [];
                        unstagedChanges = [];
                        mergeChanges = [];
                        if (!status) return [3 /*break*/, 9];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 8]);
                        _b = __values(status.changes), _c = _b.next();
                        _e.label = 2;
                    case 2:
                        if (!!_c.done) return [3 /*break*/, 5];
                        change = _c.value;
                        uri = new uri_1.default(change.uri);
                        repository = this.repositoryProvider.selectedRepository;
                        return [4 /*yield*/, Promise.all([
                                this.labelProvider.getIcon(uri),
                                this.labelProvider.getName(uri),
                                repository ? common_1.Repository.relativePath(repository, uri.parent).toString() : this.labelProvider.getLongName(uri.parent)
                            ])];
                    case 3:
                        _d = __read.apply(void 0, [_e.sent(), 3]), icon = _d[0], label = _d[1], description = _d[2];
                        if (common_1.GitFileStatus[common_1.GitFileStatus.Conflicted.valueOf()] !== common_1.GitFileStatus[change.status]) {
                            if (change.staged) {
                                stagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                            else {
                                unstagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        else {
                            if (!change.staged) {
                                mergeChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        _e.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        this.incomplete = status.incomplete;
                        _e.label = 9;
                    case 9:
                        sort = function (l, r) { return l.label.localeCompare(r.label); };
                        this.stagedChanges = stagedChanges.sort(sort);
                        this.unstagedChanges = unstagedChanges.sort(sort);
                        this.mergeChanges = mergeChanges.sort(sort);
                        this.gitNodes = __spread(this.mergeChanges, this.stagedChanges, this.unstagedChanges);
                        this.setNodeSelection();
                        this.update();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.setNodeSelection = function () {
        if (this.lastSelectedNode) {
            var newId = this.lastSelectedNode.id;
            if (this.lastSelectedNode.node.staged) {
                newId -= 1;
                if (newId < 0) {
                    newId = 0;
                }
                this.gitNodes[newId].selected = true;
            }
            else {
                if (this.gitNodes[newId] && this.gitNodes[newId].staged && this.gitNodes[newId + 1]) {
                    newId += 1;
                }
                else if (!this.gitNodes[newId]) {
                    newId = this.gitNodes.length - 1;
                }
                this.gitNodes[newId].selected = true;
            }
            this.lastSelectedNode = undefined;
        }
    };
    GitWidget.prototype.renderCommitMessage = function () {
        var validationStatus = this.commitMessageValidationResult ? this.commitMessageValidationResult.status : 'idle';
        var validationMessage = this.commitMessageValidationResult ? this.commitMessageValidationResult.message : '';
        return React.createElement("div", { className: GitWidget_1.Styles.COMMIT_MESSAGE_CONTAINER },
            React.createElement("textarea", { className: GitWidget_1.Styles.COMMIT_MESSAGE + " theia-git-commit-message-" + validationStatus, style: { height: this.messageBoxHeight, overflow: this.messageBoxHeight > GitWidget_1.MESSAGE_BOX_MIN_HEIGHT ? 'auto' : 'hidden' }, autoFocus: true, onInput: this.onCommitMessageChange.bind(this), placeholder: 'Commit message', id: GitWidget_1.Styles.COMMIT_MESSAGE, defaultValue: this.message, tabIndex: 1 }),
            React.createElement("div", { className: GitWidget_1.Styles.VALIDATION_MESSAGE + " " + GitWidget_1.Styles.NO_SELECT + "\n                    theia-git-validation-message-" + validationStatus + " theia-git-commit-message-" + validationStatus, style: {
                    display: !!this.commitMessageValidationResult ? 'block' : 'none'
                } }, validationMessage));
    };
    GitWidget.prototype.onCommitMessageChange = function (e) {
        var _this = this;
        var target = e.target;
        if (target instanceof HTMLTextAreaElement) {
            var value = target.value;
            this.message = value;
            this.resize(target);
            this.validateCommitMessage(value).then(function (result) {
                if (!git_commit_message_validator_1.GitCommitMessageValidator.Result.equal(_this.commitMessageValidationResult, result)) {
                    _this.commitMessageValidationResult = result;
                    _this.update();
                }
            });
        }
    };
    GitWidget.prototype.resize = function (textArea) {
        // tslint:disable-next-line:no-null-keyword
        var fontSize = Number.parseInt(window.getComputedStyle(textArea, undefined).getPropertyValue('font-size').split('px')[0] || '0', 10);
        var value = textArea.value;
        if (Number.isInteger(fontSize) && fontSize > 0) {
            var requiredHeight = fontSize * value.split(/\r?\n/).length;
            if (requiredHeight < textArea.scrollHeight) {
                textArea.style.height = requiredHeight + "px";
            }
        }
        if (textArea.clientHeight < textArea.scrollHeight) {
            textArea.style.height = textArea.scrollHeight + "px";
            if (textArea.clientHeight < textArea.scrollHeight) {
                textArea.style.height = (textArea.scrollHeight * 2 - textArea.clientHeight) + "px";
            }
        }
        var updatedHeight = textArea.style.height;
        if (updatedHeight) {
            this.messageBoxHeight = parseInt(updatedHeight, 10) || GitWidget_1.MESSAGE_BOX_MIN_HEIGHT;
            if (this.messageBoxHeight > GitWidget_1.MESSAGE_BOX_MIN_HEIGHT) {
                textArea.style.overflow = 'auto';
            }
            else {
                // Hide the scroll-bar if we shrink down the size.
                textArea.style.overflow = 'hidden';
            }
        }
    };
    GitWidget.prototype.validateCommitMessage = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.commitMessageValidator.validate(input)];
            });
        });
    };
    GitWidget.prototype.render = function () {
        var _this = this;
        var repository = this.repositoryProvider.selectedRepository;
        if (!repository) {
            return React.createElement(alert_message_1.AlertMessage, { type: 'WARNING', header: 'Version control is not available at this time' });
        }
        return React.createElement("div", { className: GitWidget_1.Styles.MAIN_CONTAINER },
            React.createElement("div", { className: 'headerContainer' },
                this.renderCommitMessage(),
                this.renderCommandBar(repository)),
            this.incomplete ?
                React.createElement("div", { className: GitWidget_1.Styles.MESSAGE_CONTAINER + " " + GitWidget_1.Styles.WARNING_MESSAGE }, "There are too many active changes, only a subset is shown.")
                : '',
            React.createElement(GitChangesListContainer, { ref: function (ref) { return _this.listContainer = ref || undefined; }, id: this.scrollContainer, repository: repository, openChange: this.handleOpenChange, openFile: this.openFile, selectChange: this.selectChange, discard: this.discard, unstage: this.unstage, stage: this.stage, mergeChanges: this.mergeChanges, stagedChanges: this.stagedChanges, unstagedChanges: this.unstagedChanges, addGitListKeyListeners: this.addGitListKeyListeners, onFocus: this.handleListFocus }),
            this.lastCommit ?
                React.createElement("div", null,
                    React.createElement("div", { className: GitWidget_1.Styles.LAST_COMMIT_CONTAINER }, this.renderLastCommit()))
                : '');
    };
    GitWidget.prototype.doOpenFile = function (uri) {
        this.editorManager.open(uri, { mode: 'reveal' });
    };
    GitWidget.prototype.doHandleListFocus = function (e) {
        var selected = this.getSelected();
        if (!selected && this.gitNodes.length > 0) {
            this.selectNode(this.gitNodes[0]);
        }
    };
    GitWidget.prototype.getLastCommit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedRepository, commits, commit, avatar;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        selectedRepository = this.repositoryProvider.selectedRepository;
                        if (!selectedRepository) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.git.log(selectedRepository, { maxCount: 1, shortSha: true })];
                    case 1:
                        commits = _a.sent();
                        if (!(commits.length > 0)) return [3 /*break*/, 3];
                        commit = commits[0];
                        return [4 /*yield*/, this.avatarService.getAvatar(commit.author.email)];
                    case 2:
                        avatar = _a.sent();
                        return [2 /*return*/, { commit: commit, avatar: avatar }];
                    case 3: return [2 /*return*/, undefined];
                }
            });
        });
    };
    GitWidget.prototype.renderLastCommit = function () {
        var _this = this;
        if (!this.lastCommit) {
            return '';
        }
        var _a = this.lastCommit, commit = _a.commit, avatar = _a.avatar;
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: GitWidget_1.Styles.LAST_COMMIT_MESSAGE_AVATAR },
                React.createElement("img", { src: avatar })),
            React.createElement("div", { className: GitWidget_1.Styles.LAST_COMMIT_DETAILS },
                React.createElement("div", { className: GitWidget_1.Styles.LAST_COMMIT_MESSAGE_SUMMARY }, commit.summary),
                React.createElement("div", { className: GitWidget_1.Styles.LAST_COMMIT_MESSAGE_TIME }, commit.authorDateRelative + " by " + commit.author.name)),
            React.createElement("div", { className: GitWidget_1.Styles.FLEX_CENTER },
                React.createElement("button", { className: 'theia-button', title: 'Amend last commit', onClick: function () { return _this.amend.bind(_this)(); } }, "Amend")));
    };
    GitWidget.prototype.doRefresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repositoryProvider.refresh()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.doShowMoreToolButtons = function (event) {
        var el = event.target.parentElement;
        if (el) {
            this.contextMenuRenderer.render(GitWidget_1.ContextMenu.PATH, {
                x: el.getBoundingClientRect().left,
                y: el.getBoundingClientRect().top + el.offsetHeight
            });
        }
    };
    GitWidget.prototype.doSignOff = function () {
        return __awaiter(this, void 0, void 0, function () {
            var selectedRepository, _a, username, email, signOff, commitTextArea, content;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        selectedRepository = this.repositoryProvider.selectedRepository;
                        if (!selectedRepository) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getUserConfig(selectedRepository)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), username = _a[0], email = _a[1];
                        signOff = "\n\nSigned-off-by: " + username + " <" + email + ">";
                        commitTextArea = document.getElementById(GitWidget_1.Styles.COMMIT_MESSAGE);
                        if (commitTextArea) {
                            content = commitTextArea.value;
                            if (content.endsWith(signOff)) {
                                commitTextArea.value = content.substr(0, content.length - signOff.length);
                            }
                            else {
                                commitTextArea.value = "" + content + signOff;
                            }
                            this.resize(commitTextArea);
                            this.message = commitTextArea.value;
                            commitTextArea.focus();
                        }
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.renderCommandBar = function (repository) {
        var _this = this;
        return React.createElement("div", { id: 'commandBar', className: 'flexcontainer' },
            React.createElement("div", { className: 'buttons' },
                React.createElement("a", { className: 'toolbar-button', title: 'Refresh', onClick: this.refresh },
                    React.createElement("i", { className: 'fa fa-refresh' })),
                repository ?
                    React.createElement(React.Fragment, null,
                        React.createElement("a", { className: 'toolbar-button', title: 'Add Signed-off-by', onClick: this.signOff },
                            React.createElement("i", { className: 'fa fa-pencil-square-o ' })),
                        React.createElement("a", { className: 'toolbar-button', title: 'More...', onClick: this.showMoreToolButtons },
                            React.createElement("i", { className: 'fa fa-ellipsis-h' })))
                    : ''),
            React.createElement("div", { className: 'placeholder' }),
            React.createElement("div", { className: 'buttons' },
                React.createElement("button", { className: 'theia-button', title: 'Commit all the staged changes', onClick: function () { return _this.commit(repository); } }, "Commit")));
    };
    GitWidget.prototype.getUserConfig = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, username, email;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.git.exec(repository, ['config', 'user.name']),
                            this.git.exec(repository, ['config', 'user.email'])
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [(_b.sent()).map(function (result) { return result.stdout.trim(); }), 2]), username = _a[0], email = _a[1];
                        return [2 /*return*/, [username, email]];
                }
            });
        });
    };
    GitWidget.prototype.doUnstage = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.git.unstage(repository, change.uri)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        this.gitErrorHandler.handleError(error_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.doDiscard = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.git.lsFiles(repository, change.uri, { errorUnmatch: true })];
                    case 1:
                        if (!_a.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.confirm(change.uri)];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 6];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.git.unstage(repository, change.uri, { treeish: 'HEAD', reset: 'working-tree' })];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        error_3 = _a.sent();
                        this.gitErrorHandler.handleError(error_3);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, this.commandService.executeCommand(browser_3.WorkspaceCommands.FILE_DELETE.id, new uri_1.default(change.uri))];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        if (this.listContainer) {
                            this.listContainer.focus();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.confirm = function (path) {
        var uri = new uri_1.default(path);
        return new browser_1.ConfirmDialog({
            title: 'Discard changes',
            msg: "Do you really want to discard changes in " + uri.displayName
        }).open();
    };
    GitWidget.prototype.doStage = function (repository, change) {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.git.add(repository, change.uri)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_4 = _a.sent();
                        this.gitErrorHandler.handleError(error_4);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.findChange = function (uri) {
        var stringUri = uri.toString();
        var merge = this.mergeChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (merge) {
            return merge;
        }
        var unstaged = this.unstagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (unstaged) {
            return unstaged;
        }
        return this.stagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
    };
    GitWidget.prototype.getUriToOpen = function (change) {
        var changeUri = new uri_1.default(change.uri);
        if (change.status !== common_1.GitFileStatus.New) {
            if (change.staged) {
                return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri.displayName + ' (Index)');
            }
            if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
                return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
            }
            if (this.mergeChanges.find(function (c) { return c.uri === change.uri; })) {
                return changeUri;
            }
            return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri, changeUri.displayName + ' (Working tree)');
        }
        if (change.staged) {
            return changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME);
        }
        if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
            return browser_1.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
        }
        return changeUri;
    };
    GitWidget.prototype.resetCommitMessages = function () {
        this.message = '';
        var messageInput = document.getElementById(GitWidget_1.Styles.COMMIT_MESSAGE);
        messageInput.value = '';
        this.resize(messageInput);
    };
    var GitWidget_1;
    GitWidget.MESSAGE_BOX_MIN_HEIGHT = 25;
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitWidget.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(git_error_handler_1.GitErrorHandler),
        __metadata("design:type", git_error_handler_1.GitErrorHandler)
    ], GitWidget.prototype, "gitErrorHandler", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], GitWidget.prototype, "init", null);
    GitWidget = GitWidget_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.Git)),
        __param(1, inversify_1.inject(git_watcher_1.GitWatcher)),
        __param(2, inversify_1.inject(browser_1.ContextMenuRenderer)),
        __param(3, inversify_1.inject(core_1.ResourceProvider)),
        __param(4, inversify_1.inject(core_1.CommandService)),
        __param(5, inversify_1.inject(git_repository_provider_1.GitRepositoryProvider)),
        __param(6, inversify_1.inject(browser_1.LabelProvider)),
        __param(7, inversify_1.inject(git_avatar_service_1.GitAvatarService)),
        __param(8, inversify_1.inject(git_commit_message_validator_1.GitCommitMessageValidator)),
        __metadata("design:paramtypes", [Object, git_watcher_1.GitWatcher, Object, Function, Object, git_repository_provider_1.GitRepositoryProvider,
            browser_1.LabelProvider,
            git_avatar_service_1.GitAvatarService,
            git_commit_message_validator_1.GitCommitMessageValidator])
    ], GitWidget);
    return GitWidget;
}(git_diff_widget_1.GitDiffWidget));
exports.GitWidget = GitWidget;
(function (GitWidget) {
    var ContextMenu;
    (function (ContextMenu) {
        ContextMenu.PATH = ['git-widget-context-menu'];
        ContextMenu.OTHER_GROUP = __spread(ContextMenu.PATH, ['1_other']);
        ContextMenu.COMMIT_GROUP = __spread(ContextMenu.PATH, ['2_commit']);
    })(ContextMenu = GitWidget.ContextMenu || (GitWidget.ContextMenu = {}));
    var Styles;
    (function (Styles) {
        Styles.MAIN_CONTAINER = 'theia-git-main-container';
        Styles.CHANGES_CONTAINER = 'changesOuterContainer';
        Styles.COMMIT_MESSAGE_CONTAINER = 'theia-git-commit-message-container';
        Styles.COMMIT_MESSAGE = 'theia-git-commit-message';
        Styles.MESSAGE_CONTAINER = 'theia-git-message';
        Styles.WARNING_MESSAGE = 'theia-git-message-warning';
        Styles.VALIDATION_MESSAGE = 'theia-git-commit-validation-message';
        Styles.LAST_COMMIT_CONTAINER = 'theia-git-last-commit-container';
        Styles.LAST_COMMIT_DETAILS = 'theia-git-last-commit-details';
        Styles.LAST_COMMIT_MESSAGE_AVATAR = 'theia-git-last-commit-message-avatar';
        Styles.LAST_COMMIT_MESSAGE_SUMMARY = 'theia-git-last-commit-message-summary';
        Styles.LAST_COMMIT_MESSAGE_TIME = 'theia-git-last-commit-message-time';
        Styles.FLEX_CENTER = 'flex-container-center';
        Styles.NO_SELECT = 'no-select';
    })(Styles = GitWidget.Styles || (GitWidget.Styles = {}));
})(GitWidget = exports.GitWidget || (exports.GitWidget = {}));
exports.GitWidget = GitWidget;
var GitItem = /** @class */ (function (_super) {
    __extends(GitItem, _super);
    function GitItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.openChange = function () { return _this.props.openChange(_this.props.change, { mode: 'reveal' }); };
        _this.selectChange = function () { return _this.props.selectChange(_this.props.change); };
        _this.doGitAction = function (action) { return _this.props[action](_this.props.repository, _this.props.change); };
        _this.doOpenFile = function () { return _this.props.openFile(new uri_1.default(_this.props.change.uri)); };
        return _this;
    }
    GitItem.prototype.render = function () {
        var change = this.props.change;
        return React.createElement("div", { className: "gitItem " + GitWidget.Styles.NO_SELECT + (change.selected ? ' ' + browser_1.SELECTED_CLASS : '') },
            React.createElement("div", { className: 'noWrapInfo', onDoubleClick: this.openChange, onClick: this.selectChange },
                React.createElement("span", { className: change.icon + ' file-icon' }),
                React.createElement("span", { className: 'name' }, change.label + ' '),
                React.createElement("span", { className: 'path' }, change.description)),
            React.createElement("div", { className: 'itemButtonsContainer' },
                this.renderGitItemButtons(),
                React.createElement("div", { title: common_1.GitFileStatus.toString(change.status, change.staged), className: "status " + (change.staged ? 'staged ' : '') + " " + common_1.GitFileStatus[change.status].toLowerCase() }, common_1.GitFileStatus.toAbbreviation(change.status, change.staged))));
    };
    GitItem.prototype.renderGitItemButtons = function () {
        var _this = this;
        return React.createElement("div", { className: 'buttons' },
            React.createElement("a", { className: 'toolbar-button', title: 'Open File', onClick: function () { return _this.doOpenFile(); } },
                React.createElement("i", { className: 'open-file' })),
            this.props.change.staged ?
                React.createElement("a", { className: 'toolbar-button', title: 'Unstage Changes', onClick: function () { return _this.doGitAction('unstage'); } },
                    React.createElement("i", { className: 'fa fa-minus' })) :
                React.createElement(React.Fragment, null,
                    React.createElement("a", { className: 'toolbar-button', title: 'Discard Changes', onClick: function () { return _this.doGitAction('discard'); } },
                        React.createElement("i", { className: 'fa fa-undo' })),
                    React.createElement("a", { className: 'toolbar-button', title: 'Stage Changes', onClick: function () { return _this.doGitAction('stage'); } },
                        React.createElement("i", { className: 'fa fa-plus' }))));
    };
    return GitItem;
}(React.Component));
exports.GitItem = GitItem;
var GitChangesListContainer = /** @class */ (function (_super) {
    __extends(GitChangesListContainer, _super);
    function GitChangesListContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOnFocus = function (e) {
            _this.props.onFocus(e);
        };
        return _this;
    }
    GitChangesListContainer.prototype.render = function () {
        var _this = this;
        return (React.createElement("div", { ref: function (ref) { return _this.listContainer = ref || undefined; }, className: GitWidget.Styles.CHANGES_CONTAINER, id: this.props.id, onFocus: this.handleOnFocus, tabIndex: 2 },
            this.renderMergeChanges(this.props.repository) || '',
            this.renderStagedChanges(this.props.repository) || '',
            this.renderUnstagedChanges(this.props.repository) || ''));
    };
    GitChangesListContainer.prototype.componentDidMount = function () {
        this.props.addGitListKeyListeners(this.props.id);
    };
    GitChangesListContainer.prototype.focus = function () {
        if (this.listContainer) {
            this.listContainer.focus();
        }
    };
    GitChangesListContainer.prototype.renderGitItem = function (change, repository) {
        if (!repository) {
            return '';
        }
        return React.createElement(GitItem, { key: change.uri + change.status, repository: repository, change: change, openChange: this.props.openChange, discard: this.props.discard, stage: this.props.stage, unstage: this.props.unstage, selectChange: this.props.selectChange, openFile: this.props.openFile });
    };
    GitChangesListContainer.prototype.renderMergeChanges = function (repository) {
        var _this = this;
        if (this.props.mergeChanges.length > 0) {
            return React.createElement("div", { id: 'mergeChanges', className: 'changesContainer' },
                React.createElement("div", { className: 'theia-header' },
                    "Merge Changes",
                    this.renderChangeCount(this.props.mergeChanges.length)),
                this.props.mergeChanges.map(function (change) { return _this.renderGitItem(change, repository); }));
        }
        else {
            return undefined;
        }
    };
    GitChangesListContainer.prototype.renderStagedChanges = function (repository) {
        var _this = this;
        if (this.props.stagedChanges.length > 0) {
            return React.createElement("div", { id: 'stagedChanges', className: 'changesContainer' },
                React.createElement("div", { className: 'theia-header' },
                    "Staged Changes",
                    this.renderChangeCount(this.props.stagedChanges.length)),
                this.props.stagedChanges.map(function (change) { return _this.renderGitItem(change, repository); }));
        }
        else {
            return undefined;
        }
    };
    GitChangesListContainer.prototype.renderUnstagedChanges = function (repository) {
        var _this = this;
        if (this.props.unstagedChanges.length > 0) {
            return React.createElement("div", { id: 'unstagedChanges', className: 'changesContainer' },
                React.createElement("div", { className: 'theia-header' },
                    "Changes",
                    this.renderChangeCount(this.props.unstagedChanges.length)),
                this.props.unstagedChanges.map(function (change) { return _this.renderGitItem(change, repository); }));
        }
        return undefined;
    };
    GitChangesListContainer.prototype.renderChangeCount = function (changes) {
        return React.createElement("div", { className: 'notification-count-container git-change-count' },
            React.createElement("span", { className: 'notification-count' }, changes));
    };
    return GitChangesListContainer;
}(React.Component));
exports.GitChangesListContainer = GitChangesListContainer;
//# sourceMappingURL=git-widget.js.map