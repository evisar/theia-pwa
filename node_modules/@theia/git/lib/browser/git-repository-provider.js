"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("../common");
var inversify_1 = require("inversify");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var common_2 = require("@theia/filesystem/lib/common");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var uri_1 = require("@theia/core/lib/common/uri");
var filesystem_watcher_1 = require("@theia/filesystem/lib/browser/filesystem-watcher");
var debounce = require("lodash.debounce");
var GitRepositoryProvider = /** @class */ (function () {
    function GitRepositoryProvider(git, workspaceService, watcher, fileSystem, storageService) {
        var _this = this;
        this.git = git;
        this.workspaceService = workspaceService;
        this.watcher = watcher;
        this.fileSystem = fileSystem;
        this.storageService = storageService;
        this.onDidChangeRepositoryEmitter = new core_1.Emitter();
        this.selectedRepoStorageKey = 'theia-git-selected-repository';
        this.allRepoStorageKey = 'theia-git-all-repositories';
        this.toDisposeOnWorkspaceChange = new core_1.DisposableCollection();
        this.lazyRefresh = debounce(function () { return _this.refresh(); }, 1000);
        this.initialize();
    }
    GitRepositoryProvider.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        /*
                         * Listen for changes to the list of workspaces.  This will not be fired when changes
                         * are made inside a workspace.
                         */
                        this.workspaceService.onWorkspaceChanged(function (roots) { return __awaiter(_this, void 0, void 0, function () {
                            var e_1, _a, roots_1, roots_1_1, root, uri, _b, _c, e_1_1;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0:
                                        this.refresh();
                                        this.toDisposeOnWorkspaceChange.dispose();
                                        _d.label = 1;
                                    case 1:
                                        _d.trys.push([1, 6, 7, 8]);
                                        roots_1 = __values(roots), roots_1_1 = roots_1.next();
                                        _d.label = 2;
                                    case 2:
                                        if (!!roots_1_1.done) return [3 /*break*/, 5];
                                        root = roots_1_1.value;
                                        uri = new uri_1.default(root.uri);
                                        _c = (_b = this.toDisposeOnWorkspaceChange).push;
                                        return [4 /*yield*/, this.watcher.watchFileChanges(uri)];
                                    case 3:
                                        _c.apply(_b, [_d.sent()]);
                                        _d.label = 4;
                                    case 4:
                                        roots_1_1 = roots_1.next();
                                        return [3 /*break*/, 2];
                                    case 5: return [3 /*break*/, 8];
                                    case 6:
                                        e_1_1 = _d.sent();
                                        e_1 = { error: e_1_1 };
                                        return [3 /*break*/, 8];
                                    case 7:
                                        try {
                                            if (roots_1_1 && !roots_1_1.done && (_a = roots_1.return)) _a.call(roots_1);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                        return [7 /*endfinally*/];
                                    case 8: return [2 /*return*/];
                                }
                            });
                        }); });
                        /*
                         * Listen for changes within the workspaces.
                         */
                        this.watcher.onFilesChanged(function (_changedFiles) {
                            _this.lazyRefresh();
                        });
                        _a = this;
                        return [4 /*yield*/, this.storageService.getData(this.selectedRepoStorageKey)];
                    case 1:
                        _a._selectedRepository = _c.sent();
                        _b = this;
                        return [4 /*yield*/, this.storageService.getData(this.allRepoStorageKey)];
                    case 2:
                        _b._allRepositories = _c.sent();
                        if (!!this._allRepositories) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.refresh({ maxCount: 1 })];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4: return [4 /*yield*/, this.refresh()];
                    case 5:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(GitRepositoryProvider.prototype, "selectedRepository", {
        /**
         * Returns with the previously selected repository, or if no repository has been selected yet,
         * it picks the first available repository from the backend and sets it as the selected one and returns with that.
         * If no repositories are available, returns `undefined`.
         */
        get: function () {
            return this._selectedRepository;
        },
        /**
         * Sets or un-sets the repository.
         */
        set: function (repository) {
            this._selectedRepository = repository;
            this.storageService.setData(this.selectedRepoStorageKey, repository);
            this.fireDidChangeRepository();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GitRepositoryProvider.prototype, "onDidChangeRepository", {
        get: function () {
            return this.onDidChangeRepositoryEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    GitRepositoryProvider.prototype.fireDidChangeRepository = function () {
        this.onDidChangeRepositoryEmitter.fire(this._selectedRepository);
    };
    Object.defineProperty(GitRepositoryProvider.prototype, "allRepositories", {
        /**
         * Returns with all know repositories.
         */
        get: function () {
            return this._allRepositories || [];
        },
        enumerable: true,
        configurable: true
    });
    GitRepositoryProvider.prototype.findRepository = function (uri) {
        var reposSorted = this._allRepositories ? this._allRepositories.sort(common_1.Repository.sortComparator) : [];
        return reposSorted.find(function (repo) { return new uri_1.default(repo.localUri).isEqualOrParent(uri); });
    };
    GitRepositoryProvider.prototype.findRepositoryOrSelected = function (arg) {
        var uri;
        if (arg) {
            if (arg instanceof uri_1.default || typeof arg === 'string') {
                uri = arg;
            }
            else if (typeof arg === 'object' && 'uri' in arg && arg.uri) {
                uri = arg.uri;
            }
            if (uri) {
                if (typeof uri === 'string') {
                    uri = new uri_1.default(uri);
                }
                return this.findRepository(uri);
            }
        }
        return this.selectedRepository;
    };
    GitRepositoryProvider.prototype.refresh = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, roots, _b, _c, root, e_2_1, repoUris, reposOfRoots, selectedRepository;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        roots = [];
                        return [4 /*yield*/, this.workspaceService.roots];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, 8, 9]);
                        _b = __values(this.workspaceService.tryGetRoots()), _c = _b.next();
                        _d.label = 3;
                    case 3:
                        if (!!_c.done) return [3 /*break*/, 6];
                        root = _c.value;
                        return [4 /*yield*/, this.fileSystem.exists(root.uri)];
                    case 4:
                        if (_d.sent()) {
                            roots.push(root);
                        }
                        _d.label = 5;
                    case 5:
                        _c = _b.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        repoUris = new Map();
                        return [4 /*yield*/, Promise.all(roots.map(function (r) { return _this.git.repositories(r.uri, __assign({}, options)); }))];
                    case 10:
                        reposOfRoots = _d.sent();
                        reposOfRoots.forEach(function (reposPerRoot) {
                            reposPerRoot.forEach(function (repoOfOneRoot) {
                                repoUris.set(repoOfOneRoot.localUri, repoOfOneRoot);
                            });
                        });
                        this._allRepositories = Array.from(repoUris.values());
                        this.storageService.setData(this.allRepoStorageKey, this._allRepositories);
                        selectedRepository = this._selectedRepository;
                        if (!selectedRepository || !this.exists(selectedRepository)) {
                            this.selectedRepository = this._allRepositories[0];
                        }
                        else {
                            this.fireDidChangeRepository();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    GitRepositoryProvider.prototype.exists = function (repository) {
        return !!this._allRepositories && this._allRepositories.some(function (repository2) { return common_1.Repository.equal(repository, repository2); });
    };
    GitRepositoryProvider = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.Git)),
        __param(1, inversify_1.inject(workspace_service_1.WorkspaceService)),
        __param(2, inversify_1.inject(filesystem_watcher_1.FileSystemWatcher)),
        __param(3, inversify_1.inject(common_2.FileSystem)),
        __param(4, inversify_1.inject(browser_1.LocalStorageService)),
        __metadata("design:paramtypes", [Object, workspace_service_1.WorkspaceService,
            filesystem_watcher_1.FileSystemWatcher, Object, browser_1.LocalStorageService])
    ], GitRepositoryProvider);
    return GitRepositoryProvider;
}());
exports.GitRepositoryProvider = GitRepositoryProvider;
//# sourceMappingURL=git-repository-provider.js.map