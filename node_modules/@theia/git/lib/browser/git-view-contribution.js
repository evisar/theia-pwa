"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/********************************************************************************
 * Copyright (C) 2018 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var common_1 = require("../common");
var git_widget_1 = require("./git-widget");
var git_repository_tracker_1 = require("./git-repository-tracker");
var git_quick_open_service_1 = require("./git-quick-open-service");
var git_sync_service_1 = require("./git-sync-service");
var browser_3 = require("@theia/workspace/lib/browser");
var git_prompt_1 = require("../common/git-prompt");
exports.GIT_WIDGET_FACTORY_ID = 'git';
exports.EDITOR_CONTEXT_MENU_GIT = __spread(browser_2.EDITOR_CONTEXT_MENU, ['3_git']);
var GIT_COMMANDS;
(function (GIT_COMMANDS) {
    GIT_COMMANDS.CLONE = {
        id: 'git.clone',
        label: 'Git: Clone...'
    };
    GIT_COMMANDS.FETCH = {
        id: 'git.fetch',
        label: 'Git: Fetch...'
    };
    GIT_COMMANDS.PULL = {
        id: 'git.pull',
        label: 'Git: Pull...'
    };
    GIT_COMMANDS.PUSH = {
        id: 'git.push',
        label: 'Git: Push...'
    };
    GIT_COMMANDS.MERGE = {
        id: 'git.merge',
        label: 'Git: Merge...'
    };
    GIT_COMMANDS.CHECKOUT = {
        id: 'git.checkout',
        label: 'Git: Checkout'
    };
    GIT_COMMANDS.COMMIT_AMEND = {
        id: 'git.commit.amend'
    };
    GIT_COMMANDS.COMMIT_SIGN_OFF = {
        id: 'git.commit.signOff'
    };
    GIT_COMMANDS.CHANGE_REPOSITORY = {
        id: 'git.change.repository',
        label: 'Git: Change Repository...'
    };
    GIT_COMMANDS.OPEN_FILE = {
        id: 'git.open.file',
        category: 'Git',
        label: 'Open File'
    };
    GIT_COMMANDS.OPEN_CHANGES = {
        id: 'git.open.changes',
        category: 'Git',
        label: 'Open Changes'
    };
    GIT_COMMANDS.SYNC = {
        id: 'git.sync',
        label: 'Git: Sync'
    };
    GIT_COMMANDS.PUBLISH = {
        id: 'git.publish',
        label: 'Git: Publish Branch'
    };
})(GIT_COMMANDS = exports.GIT_COMMANDS || (exports.GIT_COMMANDS = {}));
var GitViewContribution = /** @class */ (function (_super) {
    __extends(GitViewContribution, _super);
    function GitViewContribution() {
        var _this = _super.call(this, {
            widgetId: exports.GIT_WIDGET_FACTORY_ID,
            widgetName: 'Git',
            defaultWidgetOptions: {
                area: 'left',
                rank: 200
            },
            toggleCommandId: 'gitView:toggle',
            toggleKeybinding: 'ctrlcmd+shift+g'
        }) || this;
        _this.toDispose = new core_1.DisposableCollection();
        return _this;
    }
    GitViewContribution_1 = GitViewContribution;
    GitViewContribution.prototype.initializeLayout = function (app) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.openView()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitViewContribution.prototype.onStart = function () {
        var _this = this;
        this.repositoryTracker.onDidChangeRepository(function (repository) {
            if (repository) {
                if (_this.hasMultipleRepositories()) {
                    var path = new uri_1.default(repository.localUri).path;
                    _this.statusBar.setElement(GitViewContribution_1.GIT_SELECTED_REPOSITORY, {
                        text: "$(database) " + path.base,
                        alignment: browser_1.StatusBarAlignment.LEFT,
                        priority: 102,
                        command: GIT_COMMANDS.CHANGE_REPOSITORY.id,
                        tooltip: path.toString()
                    });
                }
                else {
                    _this.statusBar.removeElement(GitViewContribution_1.GIT_SELECTED_REPOSITORY);
                }
            }
            else {
                _this.statusBar.removeElement(GitViewContribution_1.GIT_SELECTED_REPOSITORY);
                _this.statusBar.removeElement(GitViewContribution_1.GIT_REPOSITORY_STATUS);
                _this.statusBar.removeElement(GitViewContribution_1.GIT_SYNC_STATUS);
            }
        });
        this.repositoryTracker.onGitEvent(function (event) {
            var status = event.status;
            var branch = status.branch ? status.branch : status.currentHead ? status.currentHead.substring(0, 8) : 'NO-HEAD';
            var dirty = '';
            if (status.changes.length > 0) {
                var conflicts = _this.hasConflicts(status.changes);
                var staged = _this.allStaged(status.changes);
                if (conflicts || staged) {
                    if (conflicts) {
                        dirty = '!';
                    }
                    else if (staged) {
                        dirty = '+';
                    }
                }
                else {
                    dirty = '*';
                }
            }
            _this.statusBar.setElement(GitViewContribution_1.GIT_REPOSITORY_STATUS, {
                text: "$(code-fork) " + branch + dirty,
                alignment: browser_1.StatusBarAlignment.LEFT,
                priority: 101,
                command: GIT_COMMANDS.CHECKOUT.id
            });
            _this.updateSyncStatusBarEntry();
        });
        this.syncService.onDidChange(function () { return _this.updateSyncStatusBarEntry(); });
    };
    GitViewContribution.prototype.registerMenus = function (menus) {
        _super.prototype.registerMenus.call(this, menus);
        [GIT_COMMANDS.FETCH, GIT_COMMANDS.PULL, GIT_COMMANDS.PUSH, GIT_COMMANDS.MERGE].forEach(function (command) {
            return menus.registerMenuAction(git_widget_1.GitWidget.ContextMenu.OTHER_GROUP, {
                commandId: command.id,
                label: command.label.slice('Git: '.length)
            });
        });
        menus.registerMenuAction(git_widget_1.GitWidget.ContextMenu.COMMIT_GROUP, {
            commandId: GIT_COMMANDS.COMMIT_AMEND.id,
            label: 'Commit (Amend)'
        });
        menus.registerMenuAction(git_widget_1.GitWidget.ContextMenu.COMMIT_GROUP, {
            commandId: GIT_COMMANDS.COMMIT_SIGN_OFF.id,
            label: 'Commit (Signed Off)'
        });
        menus.registerMenuAction(browser_2.EditorContextMenu.NAVIGATION, {
            commandId: GIT_COMMANDS.OPEN_FILE.id
        });
        menus.registerMenuAction(browser_2.EditorContextMenu.NAVIGATION, {
            commandId: GIT_COMMANDS.OPEN_CHANGES.id
        });
    };
    GitViewContribution.prototype.registerCommands = function (registry) {
        var _this = this;
        _super.prototype.registerCommands.call(this, registry);
        registry.registerCommand(GIT_COMMANDS.FETCH, {
            execute: function () { return _this.quickOpenService.fetch(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.PULL, {
            execute: function () { return _this.quickOpenService.pull(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.PUSH, {
            execute: function () { return _this.quickOpenService.push(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.MERGE, {
            execute: function () { return _this.quickOpenService.merge(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.CHECKOUT, {
            execute: function () { return _this.quickOpenService.checkout(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.COMMIT_SIGN_OFF, {
            execute: function () { return _this.tryGetWidget().doCommit(_this.repositoryTracker.selectedRepository, 'sign-off'); },
            isEnabled: function () { return !!_this.tryGetWidget() && !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.COMMIT_AMEND, {
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var widget, selectedRepository, message, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            widget = this.tryGetWidget();
                            selectedRepository = this.repositoryTracker.selectedRepository;
                            if (!(!!widget && !!selectedRepository)) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.quickOpenService.commitMessageForAmend()];
                        case 2:
                            message = _a.sent();
                            widget.doCommit(selectedRepository, 'amend', message);
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            if (!(e_1 instanceof Error) || e_1.message !== 'User abort.') {
                                throw e_1;
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); },
            isEnabled: function () { return !!_this.tryGetWidget() && !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.CHANGE_REPOSITORY, {
            execute: function () { return _this.quickOpenService.changeRepository(); },
            isEnabled: function () { return _this.hasMultipleRepositories(); }
        });
        registry.registerCommand(GIT_COMMANDS.OPEN_FILE, {
            execute: function (widget) { return _this.openFile(widget); },
            isEnabled: function (widget) { return !!_this.getOpenFileOptions(widget); },
            isVisible: function (widget) { return !!_this.getOpenFileOptions(widget); }
        });
        registry.registerCommand(GIT_COMMANDS.OPEN_CHANGES, {
            execute: function (widget) { return _this.openChanges(widget); },
            isEnabled: function (widget) { return !!_this.getOpenChangesOptions(widget); },
            isVisible: function (widget) { return !!_this.getOpenChangesOptions(widget); }
        });
        registry.registerCommand(GIT_COMMANDS.SYNC, {
            execute: function () { return _this.syncService.sync(); },
            isEnabled: function () { return _this.syncService.canSync(); },
            isVisible: function () { return _this.syncService.canSync(); }
        });
        registry.registerCommand(GIT_COMMANDS.PUBLISH, {
            execute: function () { return _this.syncService.publish(); },
            isEnabled: function () { return _this.syncService.canPublish(); },
            isVisible: function () { return _this.syncService.canPublish(); }
        });
        registry.registerCommand(GIT_COMMANDS.CLONE, {
            isEnabled: function () { return _this.workspaceService.opened; },
            // tslint:disable-next-line:no-any
            execute: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _a;
                var url = undefined;
                var folder = undefined;
                var branch = undefined;
                if (args) {
                    _a = __read(args, 3), url = _a[0], folder = _a[1], branch = _a[2];
                }
                return _this.quickOpenService.clone(url, folder, branch);
            }
        });
    };
    GitViewContribution.prototype.registerToolbarItems = function (registry) {
        registry.registerItem({
            id: GIT_COMMANDS.OPEN_FILE.id,
            command: GIT_COMMANDS.OPEN_FILE.id,
            text: '$(file-o)',
            tooltip: GIT_COMMANDS.OPEN_FILE.label
        });
        registry.registerItem({
            id: GIT_COMMANDS.OPEN_CHANGES.id,
            command: GIT_COMMANDS.OPEN_CHANGES.id,
            text: '$(files-o)',
            tooltip: GIT_COMMANDS.OPEN_CHANGES.label
        });
    };
    GitViewContribution.prototype.hasConflicts = function (changes) {
        return changes.some(function (c) { return c.status === common_1.GitFileStatus.Conflicted; });
    };
    GitViewContribution.prototype.allStaged = function (changes) {
        return !changes.some(function (c) { return !c.staged; });
    };
    GitViewContribution.prototype.openFile = function (widget) {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = this.getOpenFileOptions(widget);
                return [2 /*return*/, options && this.editorManager.open(options.uri, options.options)];
            });
        });
    };
    GitViewContribution.prototype.getOpenFileOptions = function (widget) {
        var ref = widget ? widget : this.editorManager.currentEditor;
        if (ref instanceof browser_2.EditorWidget && browser_1.DiffUris.isDiffUri(ref.editor.uri)) {
            var _a = __read(browser_1.DiffUris.decode(ref.editor.uri), 2), right = _a[1];
            var uri = right.withScheme('file');
            var selection = ref.editor.selection;
            return { uri: uri, options: { selection: selection, widgetOptions: { ref: ref } } };
        }
        return undefined;
    };
    GitViewContribution.prototype.openChanges = function (widget) {
        return __awaiter(this, void 0, void 0, function () {
            var options, view;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = this.getOpenChangesOptions(widget);
                        if (!options) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.widget];
                    case 1:
                        view = _a.sent();
                        return [2 /*return*/, view.openChange(options.change, options.options)];
                    case 2: return [2 /*return*/, undefined];
                }
            });
        });
    };
    GitViewContribution.prototype.getOpenChangesOptions = function (widget) {
        var view = this.tryGetWidget();
        if (!view) {
            return undefined;
        }
        var ref = widget ? widget : this.editorManager.currentEditor;
        if (ref instanceof browser_2.EditorWidget && !browser_1.DiffUris.isDiffUri(ref.editor.uri)) {
            var uri = ref.editor.uri;
            var change = view.findChange(uri);
            if (change && view.getUriToOpen(change).toString() !== uri.toString()) {
                var selection = ref.editor.selection;
                return { change: change, options: { selection: selection, widgetOptions: { ref: ref } } };
            }
        }
        return undefined;
    };
    GitViewContribution.prototype.hasMultipleRepositories = function () {
        return this.repositoryTracker.allRepositories.length > 1;
    };
    GitViewContribution.prototype.updateSyncStatusBarEntry = function () {
        var entry = this.getStatusBarEntry();
        if (entry) {
            this.statusBar.setElement(GitViewContribution_1.GIT_SYNC_STATUS, __assign({ alignment: browser_1.StatusBarAlignment.LEFT, priority: 100 }, entry));
        }
        else {
            this.statusBar.removeElement(GitViewContribution_1.GIT_SYNC_STATUS);
        }
    };
    GitViewContribution.prototype.getStatusBarEntry = function () {
        var status = this.repositoryTracker.selectedRepositoryStatus;
        if (!status || !status.branch) {
            return undefined;
        }
        if (this.syncService.isSyncing()) {
            return {
                text: '$(refresh~spin)',
                tooltip: 'Synchronizing Changes...'
            };
        }
        var upstreamBranch = status.upstreamBranch, aheadBehind = status.aheadBehind;
        if (upstreamBranch) {
            return {
                text: '$(refresh)' + (aheadBehind ? " " + aheadBehind.behind + " $(arrow-down) " + aheadBehind.ahead + " $(arrow-up)" : ''),
                command: GIT_COMMANDS.SYNC.id,
                tooltip: 'Synchronize Changes'
            };
        }
        return {
            text: '$(cloud-upload)',
            command: GIT_COMMANDS.PUBLISH.id,
            tooltip: 'Publish Changes'
        };
    };
    var GitViewContribution_1;
    GitViewContribution.GIT_SELECTED_REPOSITORY = 'git-selected-repository';
    GitViewContribution.GIT_REPOSITORY_STATUS = 'git-repository-status';
    GitViewContribution.GIT_SYNC_STATUS = 'git-sync-status';
    __decorate([
        inversify_1.inject(browser_1.StatusBar),
        __metadata("design:type", Object)
    ], GitViewContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitViewContribution.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(git_quick_open_service_1.GitQuickOpenService),
        __metadata("design:type", git_quick_open_service_1.GitQuickOpenService)
    ], GitViewContribution.prototype, "quickOpenService", void 0);
    __decorate([
        inversify_1.inject(git_repository_tracker_1.GitRepositoryTracker),
        __metadata("design:type", git_repository_tracker_1.GitRepositoryTracker)
    ], GitViewContribution.prototype, "repositoryTracker", void 0);
    __decorate([
        inversify_1.inject(git_sync_service_1.GitSyncService),
        __metadata("design:type", git_sync_service_1.GitSyncService)
    ], GitViewContribution.prototype, "syncService", void 0);
    __decorate([
        inversify_1.inject(browser_3.WorkspaceService),
        __metadata("design:type", browser_3.WorkspaceService)
    ], GitViewContribution.prototype, "workspaceService", void 0);
    __decorate([
        inversify_1.inject(git_prompt_1.GitPrompt),
        __metadata("design:type", git_prompt_1.GitPrompt)
    ], GitViewContribution.prototype, "prompt", void 0);
    GitViewContribution = GitViewContribution_1 = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], GitViewContribution);
    return GitViewContribution;
}(browser_1.AbstractViewContribution));
exports.GitViewContribution = GitViewContribution;
//# sourceMappingURL=git-view-contribution.js.map