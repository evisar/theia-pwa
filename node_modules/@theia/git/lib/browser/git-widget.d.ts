/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
import URI from '@theia/core/lib/common/uri';
import { ResourceProvider, CommandService, MenuPath } from '@theia/core';
import { ContextMenuRenderer, LabelProvider, StatefulWidget, Message } from '@theia/core/lib/browser';
import { EditorManager, EditorWidget, EditorOpenerOptions } from '@theia/editor/lib/browser';
import { Git, GitFileChange, Repository, WorkingDirectoryStatus, CommitWithChanges } from '../common';
import { GitWatcher } from '../common/git-watcher';
import { GitRepositoryProvider } from './git-repository-provider';
import { GitCommitMessageValidator } from './git-commit-message-validator';
import { GitAvatarService } from './history/git-avatar-service';
import * as React from 'react';
import { GitErrorHandler } from './git-error-handler';
import { GitDiffWidget } from './diff/git-diff-widget';
import { GitFileChangeNode } from './git-file-change-node';
export declare class GitWidget extends GitDiffWidget implements StatefulWidget {
    protected readonly git: Git;
    protected readonly gitWatcher: GitWatcher;
    protected readonly contextMenuRenderer: ContextMenuRenderer;
    protected readonly resourceProvider: ResourceProvider;
    protected readonly commandService: CommandService;
    protected readonly repositoryProvider: GitRepositoryProvider;
    protected readonly labelProvider: LabelProvider;
    protected readonly avatarService: GitAvatarService;
    protected readonly commitMessageValidator: GitCommitMessageValidator;
    private static MESSAGE_BOX_MIN_HEIGHT;
    protected stagedChanges: GitFileChangeNode[];
    protected unstagedChanges: GitFileChangeNode[];
    protected mergeChanges: GitFileChangeNode[];
    protected incomplete?: boolean;
    protected message: string;
    protected messageBoxHeight: number;
    protected status: WorkingDirectoryStatus | undefined;
    protected scrollContainer: string;
    protected commitMessageValidationResult: GitCommitMessageValidator.Result | undefined;
    protected lastCommit: {
        commit: CommitWithChanges;
        avatar: string;
    } | undefined;
    protected lastHead: string | undefined;
    protected lastSelectedNode?: {
        id: number;
        node: GitFileChangeNode;
    };
    protected listContainer: GitChangesListContainer | undefined;
    protected readonly selectChange: (change: GitFileChangeNode) => void;
    protected readonly editorManager: EditorManager;
    protected readonly gitErrorHandler: GitErrorHandler;
    constructor(git: Git, gitWatcher: GitWatcher, contextMenuRenderer: ContextMenuRenderer, resourceProvider: ResourceProvider, commandService: CommandService, repositoryProvider: GitRepositoryProvider, labelProvider: LabelProvider, avatarService: GitAvatarService, commitMessageValidator: GitCommitMessageValidator);
    protected init(): void;
    initialize(repository: Repository | undefined): Promise<void>;
    protected addGitListKeyListeners: (id: string) => void;
    protected doAddGitListKeyListeners(id: string): void;
    onActivateRequest(msg: Message): void;
    storeState(): object;
    restoreState(oldState: any): void;
    protected stageOrUnstage: () => void;
    protected doStageOrUnstage(): void;
    protected handleBackspace: () => Promise<void>;
    protected doHandleBackspace(): Promise<void>;
    protected setLastSelectedNode(change: GitFileChangeNode): void;
    protected amend(): Promise<void>;
    doCommit(repository?: Repository, options?: 'amend' | 'sign-off', message?: string): Promise<void>;
    protected updateView(status: WorkingDirectoryStatus | undefined): Promise<void>;
    protected setNodeSelection(): void;
    protected renderCommitMessage(): React.ReactNode;
    protected onCommitMessageChange(e: Event): void;
    protected resize(textArea: HTMLTextAreaElement): void;
    protected validateCommitMessage(input: string | undefined): Promise<GitCommitMessageValidator.Result | undefined>;
    protected render(): React.ReactNode;
    protected readonly openFile: (uri: URI) => void;
    protected doOpenFile(uri: URI): void;
    protected readonly handleListFocus: (e: React.FocusEvent<Element>) => void;
    protected doHandleListFocus(e: React.FocusEvent): void;
    protected getLastCommit(): Promise<{
        commit: CommitWithChanges;
        avatar: string;
    } | undefined>;
    protected renderLastCommit(): React.ReactNode;
    protected readonly refresh: () => Promise<void>;
    protected doRefresh(): Promise<void>;
    protected readonly showMoreToolButtons: (event: React.MouseEvent<HTMLElement>) => void;
    protected doShowMoreToolButtons(event: React.MouseEvent<HTMLElement>): void;
    protected readonly signOff: () => Promise<void>;
    protected doSignOff(): Promise<void>;
    protected readonly commit: (repository: Repository | undefined) => any;
    protected renderCommandBar(repository: Repository | undefined): React.ReactNode;
    protected getUserConfig(repository: Repository): Promise<[string, string]>;
    protected readonly unstage: (repository: Repository, change: GitFileChange) => Promise<void>;
    protected doUnstage(repository: Repository, change: GitFileChange): Promise<void>;
    protected readonly discard: (repository: Repository, change: GitFileChange) => Promise<void>;
    protected doDiscard(repository: Repository, change: GitFileChange): Promise<void>;
    protected confirm(path: string): Promise<boolean | undefined>;
    protected readonly stage: (repository: Repository, change: GitFileChange) => Promise<void>;
    protected doStage(repository: Repository, change: GitFileChange): Promise<void>;
    findChange(uri: URI): GitFileChange | undefined;
    handleOpenChange: (change: GitFileChange, options?: EditorOpenerOptions | undefined) => Promise<EditorWidget | undefined>;
    getUriToOpen(change: GitFileChange): URI;
    protected resetCommitMessages(): void;
}
export declare namespace GitWidget {
    namespace ContextMenu {
        const PATH: MenuPath;
        const OTHER_GROUP: MenuPath;
        const COMMIT_GROUP: MenuPath;
    }
    namespace Styles {
        const MAIN_CONTAINER = "theia-git-main-container";
        const CHANGES_CONTAINER = "changesOuterContainer";
        const COMMIT_MESSAGE_CONTAINER = "theia-git-commit-message-container";
        const COMMIT_MESSAGE = "theia-git-commit-message";
        const MESSAGE_CONTAINER = "theia-git-message";
        const WARNING_MESSAGE = "theia-git-message-warning";
        const VALIDATION_MESSAGE = "theia-git-commit-validation-message";
        const LAST_COMMIT_CONTAINER = "theia-git-last-commit-container";
        const LAST_COMMIT_DETAILS = "theia-git-last-commit-details";
        const LAST_COMMIT_MESSAGE_AVATAR = "theia-git-last-commit-message-avatar";
        const LAST_COMMIT_MESSAGE_SUMMARY = "theia-git-last-commit-message-summary";
        const LAST_COMMIT_MESSAGE_TIME = "theia-git-last-commit-message-time";
        const FLEX_CENTER = "flex-container-center";
        const NO_SELECT = "no-select";
    }
}
export declare namespace GitItem {
    interface Props {
        change: GitFileChangeNode;
        repository: Repository;
        openChange: (change: GitFileChange, options?: EditorOpenerOptions) => Promise<EditorWidget | undefined>;
        selectChange: (change: GitFileChange) => void;
        unstage: (repository: Repository, change: GitFileChange) => void;
        stage: (repository: Repository, change: GitFileChange) => void;
        discard: (repository: Repository, change: GitFileChange) => void;
        openFile: (uri: URI) => void;
    }
}
export declare class GitItem extends React.Component<GitItem.Props> {
    protected readonly openChange: () => Promise<EditorWidget | undefined>;
    protected readonly selectChange: () => void;
    protected readonly doGitAction: (action: "stage" | "unstage" | "discard") => void;
    protected readonly doOpenFile: () => void;
    render(): JSX.Element;
    protected renderGitItemButtons(): React.ReactNode;
}
export declare namespace GitChangesListContainer {
    interface Props {
        id: string;
        repository: Repository | undefined;
        openChange: (change: GitFileChange, options?: EditorOpenerOptions) => Promise<EditorWidget | undefined>;
        selectChange: (change: GitFileChange) => void;
        unstage: (repository: Repository, change: GitFileChange) => void;
        stage: (repository: Repository, change: GitFileChange) => void;
        discard: (repository: Repository, change: GitFileChange) => void;
        openFile: (uri: URI) => void;
        mergeChanges: GitFileChangeNode[];
        stagedChanges: GitFileChangeNode[];
        unstagedChanges: GitFileChangeNode[];
        addGitListKeyListeners: (id: string) => void;
        onFocus: (e: React.FocusEvent) => void;
    }
}
export declare class GitChangesListContainer extends React.Component<GitChangesListContainer.Props> {
    protected listContainer: HTMLDivElement | undefined;
    render(): JSX.Element;
    componentDidMount(): void;
    focus(): void;
    protected handleOnFocus: (e: React.FocusEvent<Element>) => void;
    protected renderGitItem(change: GitFileChangeNode, repository?: Repository): React.ReactNode;
    protected renderMergeChanges(repository: Repository | undefined): React.ReactNode | undefined;
    protected renderStagedChanges(repository: Repository | undefined): React.ReactNode | undefined;
    protected renderUnstagedChanges(repository: Repository | undefined): React.ReactNode | undefined;
    protected renderChangeCount(changes: number): React.ReactNode;
}
//# sourceMappingURL=git-widget.d.ts.map