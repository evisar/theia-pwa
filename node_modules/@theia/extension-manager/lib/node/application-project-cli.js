"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var node_1 = require("@theia/core/lib/node");
var appNpmClient = 'app-npm-client';
var appAutoInstall = 'app-auto-install';
var appWatchRegistry = 'app-watch-registry';
var ApplicationProjectCliContribution = /** @class */ (function () {
    function ApplicationProjectCliContribution() {
    }
    Object.defineProperty(ApplicationProjectCliContribution.prototype, "args", {
        get: function () {
            return this._args;
        },
        enumerable: true,
        configurable: true
    });
    ApplicationProjectCliContribution.prototype.configure = function (conf) {
        conf.option(appNpmClient, {
            description: 'Sets the application npm client',
            choices: ['npm', 'yarn'],
            default: 'yarn'
        });
        conf.option(appAutoInstall, {
            description: 'Sets whether the application should be build on package.json changes',
            type: 'boolean',
            default: true
        });
        conf.option(appWatchRegistry, {
            type: 'boolean',
            default: true
        });
    };
    ApplicationProjectCliContribution.prototype.setArguments = function (args) {
        var projectPath = this.applicationCli.projectPath;
        this._args = {
            projectPath: projectPath,
            npmClient: args[appNpmClient],
            autoInstall: args[appAutoInstall],
            watchRegistry: args[appWatchRegistry]
        };
    };
    __decorate([
        inversify_1.inject(node_1.BackendApplicationCliContribution),
        __metadata("design:type", node_1.BackendApplicationCliContribution)
    ], ApplicationProjectCliContribution.prototype, "applicationCli", void 0);
    ApplicationProjectCliContribution = __decorate([
        inversify_1.injectable()
    ], ApplicationProjectCliContribution);
    return ApplicationProjectCliContribution;
}());
exports.ApplicationProjectCliContribution = ApplicationProjectCliContribution;
//# sourceMappingURL=application-project-cli.js.map