"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var extension_protocol_1 = require("../common/extension-protocol");
var common_1 = require("../common");
var extension_contribution_1 = require("./extension-contribution");
var extension_widget_1 = require("./extension-widget");
var extension_widget_factory_1 = require("./extension-widget-factory");
var extension_open_handler_1 = require("./extension-open-handler");
require("../../src/browser/style/index.css");
exports.default = new inversify_1.ContainerModule(function (bind) {
    bind(extension_protocol_1.ExtensionServer).toDynamicValue(function (ctx) {
        var provider = ctx.container.get(browser_1.WebSocketConnectionProvider);
        return provider.createProxy(extension_protocol_1.extensionPath);
    }).inSingletonScope();
    bind(common_1.ExtensionManager).toSelf().inSingletonScope();
    browser_1.bindViewContribution(bind, extension_contribution_1.ExtensionContribution);
    bind(extension_widget_1.ExtensionWidget).toSelf();
    bind(browser_1.WidgetFactory).toDynamicValue(function (ctx) { return ({
        id: extension_contribution_1.EXTENSIONS_WIDGET_FACTORY_ID,
        createWidget: function () { return ctx.container.get(extension_widget_1.ExtensionWidget); }
    }); });
    bind(extension_widget_factory_1.ExtensionWidgetFactory).toSelf().inSingletonScope();
    bind(browser_1.WidgetFactory).toService(extension_widget_factory_1.ExtensionWidgetFactory);
    bind(extension_open_handler_1.ExtensionOpenHandler).toSelf().inSingletonScope();
    bind(browser_1.OpenHandler).toService(extension_open_handler_1.ExtensionOpenHandler);
});
//# sourceMappingURL=extension-frontend-module.js.map