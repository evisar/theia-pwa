"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@theia/core/lib/browser");
var react_widget_1 = require("@theia/core/lib/browser/widgets/react-widget");
var React = require("react");
var ExtensionDetailWidget = /** @class */ (function (_super) {
    __extends(ExtensionDetailWidget, _super);
    function ExtensionDetailWidget(resolvedExtension) {
        var _this = _super.call(this) || this;
        _this.resolvedExtension = resolvedExtension;
        _this.addClass('theia-extension-detail');
        _this.node.tabIndex = 0;
        _this.toDispose.push(resolvedExtension);
        _this.toDispose.push(resolvedExtension.onDidChange(function (change) {
            if (change.name === _this.resolvedExtension.name) {
                _this.update();
            }
        }));
        _this.update();
        return _this;
    }
    ExtensionDetailWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        this.node.focus();
        this.update();
    };
    ExtensionDetailWidget.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        var el = document.getElementById(this.id + 'Doc');
        if (el !== null) {
            el.innerHTML = this.resolvedExtension.documentation;
        }
    };
    ExtensionDetailWidget.prototype.render = function () {
        var r = this.resolvedExtension;
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: this.createExtensionClassName() },
                React.createElement("div", { className: 'extensionTitleContainer' },
                    React.createElement("h2", { className: 'extensionName' }, r.name),
                    React.createElement("div", { className: 'extensionSubtitle' },
                        React.createElement("div", { className: 'extensionAuthor' }, r.author),
                        React.createElement("div", { className: 'extensionVersion' }, r.version))),
                React.createElement("div", { className: 'extensionDescription' }, r.description),
                this.createButtonContainer()),
            React.createElement("div", { className: 'extensionDocContainer flexcontainer' },
                React.createElement("div", { className: 'extensionDocumentation', id: this.id + 'Doc' })));
    };
    ExtensionDetailWidget.prototype.createExtensionClassName = function () {
        var classNames = ['extensionHeaderContainer'];
        if (this.resolvedExtension.dependent) {
            classNames.push(browser_1.DISABLED_CLASS);
        }
        return classNames.join(' ');
    };
    ExtensionDetailWidget.prototype.createButtonContainer = function () {
        if (this.resolvedExtension.dependent) {
            return 'installed via ' + this.resolvedExtension.dependent;
        }
        return React.createElement("div", { className: 'extensionButtonContainer' },
            React.createElement("div", { className: 'extensionButtonRow' }, this.createButtons(this.resolvedExtension)));
    };
    ExtensionDetailWidget.prototype.createButtons = function (extension) {
        var buttonArr = [];
        var btnLabel = 'Install';
        if (extension.installed) {
            btnLabel = 'Uninstall';
        }
        var faEl = React.createElement("i", { className: 'fa fa-spinner fa-pulse fa-fw' });
        var content = extension.busy ? faEl : btnLabel;
        buttonArr.push(React.createElement("div", { className: 'theia-button extensionButton' +
                (extension.busy ? ' working' : '') + ' ' +
                (extension.installed && !extension.busy ? ' installed' : '') + ' ' +
                (extension.outdated && !extension.busy ? ' outdated' : ''), onClick: function (event) {
                if (!extension.busy) {
                    if (extension.installed) {
                        extension.uninstall();
                    }
                    else {
                        extension.install();
                    }
                    event.stopPropagation();
                }
            } }, content));
        if (extension.outdated) {
            buttonArr.push(React.createElement("div", { className: (extension.busy ? ' working' : '') + ' ' + 'theia-button extensionButton' + (extension.outdated && !extension.busy ? ' outdated' : ''), onClick: function (event) {
                    if (!extension.busy) {
                        extension.update();
                    }
                } }, extension.busy ? faEl : 'Update'));
        }
        return buttonArr;
    };
    return ExtensionDetailWidget;
}(react_widget_1.ReactWidget));
exports.ExtensionDetailWidget = ExtensionDetailWidget;
//# sourceMappingURL=extension-detail-widget.js.map