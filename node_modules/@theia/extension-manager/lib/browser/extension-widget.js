"use strict";
/********************************************************************************
 * Copyright (C) 2017 TypeFox and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var common_1 = require("../common");
var extension_uri_1 = require("./extension-uri");
var react_widget_1 = require("@theia/core/lib/browser/widgets/react-widget");
var React = require("react");
var ExtensionWidget = /** @class */ (function (_super) {
    __extends(ExtensionWidget, _super);
    function ExtensionWidget(extensionManager, openerService) {
        var _this = _super.call(this) || this;
        _this.extensionManager = extensionManager;
        _this.openerService = openerService;
        _this.extensions = [];
        _this.toDisposeOnFetch = new core_1.DisposableCollection();
        _this.toDisposeOnSearch = new core_1.DisposableCollection();
        _this.ready = false;
        _this.searchFieldKeyUp = function () {
            _this.toDisposeOnSearch.dispose();
            var delay = setTimeout(function () { return _this.fetchExtensions(); }, ExtensionWidget_1.SEARCH_DELAY);
            _this.toDisposeOnSearch.push(core_1.Disposable.create(function () { return clearTimeout(delay); }));
            _this.toDispose.push(_this.toDisposeOnSearch);
        };
        _this.extensionClick = function (extension) { return browser_1.open(_this.openerService, extension_uri_1.ExtensionUri.toUri(extension.name)); };
        _this.installButtonClick = function (extension) {
            if (!extension.busy) {
                if (extension.installed) {
                    if (extension.outdated) {
                        extension.update();
                    }
                    else {
                        extension.uninstall();
                    }
                }
                else {
                    extension.install();
                }
                _this.update();
            }
        };
        _this.id = 'extensions';
        _this.title.label = 'Extensions';
        _this.title.caption = 'Extensions';
        _this.title.iconClass = 'fa extensions-tab-icon';
        _this.addClass('theia-extensions');
        _this.update();
        _this.fetchExtensions();
        _this.toDispose.push(extensionManager.onDidChange(function () { return _this.update(); }));
        return _this;
    }
    ExtensionWidget_1 = ExtensionWidget;
    ExtensionWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        this.fetchExtensions();
        var searchField = this.findSearchField();
        if (searchField) {
            searchField.focus();
        }
        else {
            this.node.focus();
        }
    };
    ExtensionWidget.prototype.fetchExtensions = function () {
        var _this = this;
        var searchField = this.findSearchField();
        var query = searchField ? searchField.value.trim() : '';
        this.extensionManager.list({ query: query }).then(function (extensions) {
            _this.toDisposeOnFetch.dispose();
            _this.toDisposeOnFetch.pushAll(extensions);
            if (_this.isDisposed) {
                _this.toDisposeOnFetch.dispose();
                return;
            }
            _this.toDispose.push(_this.toDisposeOnFetch);
            _this.extensions = query ? extensions : extensions.filter(function (e) { return !e.dependent; });
            _this.ready = true;
            _this.update();
        });
    };
    ExtensionWidget.prototype.render = function () {
        if (this.ready) {
            return React.createElement(React.Fragment, null,
                this.renderSearchField(),
                this.renderExtensionList());
        }
        else {
            return React.createElement("div", { className: 'spinnerContainer' },
                React.createElement("div", { className: 'fa fa-spinner fa-pulse fa-3x fa-fw' }));
        }
    };
    ExtensionWidget.prototype.renderSearchField = function () {
        return React.createElement("div", { id: 'extensionSearchContainer', className: 'flexcontainer' },
            React.createElement("div", { id: 'extensionSearchFieldContainer', className: 'flexcontainer' },
                React.createElement("input", { id: 'extensionSearchField', type: 'text', placeholder: 'Search theia extensions', onKeyUp: this.searchFieldKeyUp })));
    };
    ExtensionWidget.prototype.findSearchField = function () {
        return document.getElementById('extensionSearchField');
    };
    ExtensionWidget.prototype.renderExtensionList = function () {
        var _this = this;
        var theList = [];
        this.extensions.forEach(function (extension) {
            var container = _this.renderExtension(extension);
            theList.push(container);
        });
        return React.createElement("div", { id: 'extensionListContainer' }, theList);
    };
    ExtensionWidget.prototype.renderExtension = function (extension) {
        var _this = this;
        var extensionButtonContainer = !extension.dependent ?
            React.createElement("div", { className: 'extensionButtonContainer flexcontainer' },
                " ",
                this.createButton(extension)) : 'installed via ' + extension.dependent;
        return React.createElement("div", { key: extension.name, className: this.createExtensionClassName(extension), onClick: function () { return _this.extensionClick(extension); }, title: this.getTooltip(extension) },
            React.createElement("div", { className: 'column flexcontainer extensionInformationContainer' },
                React.createElement("div", { className: 'row flexcontainer' },
                    React.createElement("div", { className: 'extensionName noWrapInfo' }, extension.name),
                    React.createElement("div", { className: 'extensionVersion' }, extension.version)),
                React.createElement("div", { className: 'row flexcontainer' },
                    React.createElement("div", { className: 'extensionDescription noWrapInfo' }, extension.description)),
                React.createElement("div", { className: 'row flexcontainer' },
                    React.createElement("div", { className: 'extensionAuthor noWrapInfo flexcontainer' }, extension.author),
                    extensionButtonContainer)));
    };
    ExtensionWidget.prototype.createExtensionClassName = function (extension) {
        var classNames = ['extensionHeaderContainer'];
        if (extension.dependent) {
            classNames.push(browser_1.DISABLED_CLASS);
        }
        return classNames.join(' ');
    };
    ExtensionWidget.prototype.createButton = function (extension) {
        var _this = this;
        var btnLabel = 'Install';
        if (extension.installed) {
            if (extension.outdated) {
                btnLabel = 'Update';
            }
            else {
                btnLabel = 'Uninstall';
            }
        }
        var className = 'theia-button extensionButton' +
            (extension.busy ? ' working' : '') + ' ' +
            (extension.installed && !extension.busy ? ' installed' : '') + ' ' +
            (extension.outdated && !extension.busy ? ' outdated' : '');
        return React.createElement("div", { className: className, onClick: function (event) {
                _this.installButtonClick(extension);
                event.stopPropagation();
            } }, extension.busy ? React.createElement("i", { className: 'fa fa-spinner fa-pulse fa-fw' }) : btnLabel);
    };
    ExtensionWidget.prototype.getTooltip = function (extension) {
        return extension.name + "\n" + extension.description;
    };
    var ExtensionWidget_1;
    ExtensionWidget.SEARCH_DELAY = 200;
    ExtensionWidget = ExtensionWidget_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.ExtensionManager)),
        __param(1, inversify_1.inject(browser_1.OpenerService)),
        __metadata("design:paramtypes", [common_1.ExtensionManager, Object])
    ], ExtensionWidget);
    return ExtensionWidget;
}(react_widget_1.ReactWidget));
exports.ExtensionWidget = ExtensionWidget;
//# sourceMappingURL=extension-widget.js.map